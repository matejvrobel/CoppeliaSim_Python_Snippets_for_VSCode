{
  "sim.Object": {
    "prefix": "sim.Object",
    "body": ["sim.Object($1)"],
    "description": "sim.Object(int handle)"
  },
  "sim.acquireLock": {
    "prefix": "sim.acquireLock",
    "body": ["sim.acquireLock()"],
    "description": "sim.acquireLock()"
  },
  "sim.addDrawingObject": {
    "prefix": "sim.addDrawingObject",
    "body": ["sim.addDrawingObject($1, $2, $3, $4, $5)"],
    "description": "sim.addDrawingObject(int objectType, float size, float duplicateTolerance, int parentObjectHandle, int maxItemCount, list color=None)"
  },
  "sim.addDrawingObjectItem": {
    "prefix": "sim.addDrawingObjectItem",
    "body": ["sim.addDrawingObjectItem($1, $2)"],
    "description": "sim.addDrawingObjectItem(int drawingObjectHandle, float[] itemData)"
  },
  "sim.addForce": {
    "prefix": "sim.addForce",
    "body": ["sim.addForce($1, $2, $3)"],
    "description": "sim.addForce(int shapeHandle, list position, list force)"
  },
  "sim.addForceAndTorque": {
    "prefix": "sim.addForceAndTorque",
    "body": ["sim.addForceAndTorque($1)"],
    "description": "sim.addForceAndTorque(int shapeHandle, list force=None, list torque=None)"
  },
  "sim.addGraphCurve": {
    "prefix": "sim.addGraphCurve",
    "body": ["sim.addGraphCurve($1, $2, $3, $4, $5, $6, $7, $8)"],
    "description": "sim.addGraphCurve(int graphHandle, str curveName, int dim, int[2..3] streamIds, float[2..3] defaultValues, str unitStr, int options=0, list color={1, 1, 0}, int curveWidth=2)"
  },
  "sim.addGraphStream": {
    "prefix": "sim.addGraphStream",
    "body": ["sim.addGraphStream($1, $2, $3, $4, $5)"],
    "description": "sim.addGraphStream(int graphHandle, str streamName, str unit, int options=0, list color={1, 0, 0}, float cyclicRange=pi)"
  },
  "sim.addItemToCollection": {
    "prefix": "sim.addItemToCollection",
    "body": ["sim.addItemToCollection($1, $2, $3, $4)"],
    "description": "sim.addItemToCollection(int collectionHandle, int what, int objectHandle, int options)"
  },
  "sim.addLog": {
    "prefix": "sim.addLog",
    "body": ["sim.addLog($1, $2)"],
    "description": "sim.addLog(int verbosityLevel, str logMessage)"
  },
  "sim.addParticleObject": {
    "prefix": "sim.addParticleObject",
    "body": ["sim.addParticleObject($1, $2, $3, $4, $5, $6)"],
    "description": "sim.addParticleObject(int objectType, float size, float density, float[] params, float lifeTime, int maxItemCount, list color=None)"
  },
  "sim.addParticleObjectItem": {
    "prefix": "sim.addParticleObjectItem",
    "body": ["sim.addParticleObjectItem($1, $2)"],
    "description": "sim.addParticleObjectItem(int objectHandle, float[] itemData)"
  },
  "sim.addReferencedHandle": {
    "prefix": "sim.addReferencedHandle",
    "body": ["sim.addReferencedHandle($1, $2)"],
    "description": "sim.addReferencedHandle(int objectHandle, int referencedHandle, str tag='', dict opts={})"
  },
  "sim.adjustView": {
    "prefix": "sim.adjustView",
    "body": ["sim.adjustView($1, $2, $3)"],
    "description": "sim.adjustView(int viewHandleOrIndex, int objectHandle, int options, str viewLabel=None)"
  },
  "sim.alignShapeBB": {
    "prefix": "sim.alignShapeBB",
    "body": ["sim.alignShapeBB($1, $2)"],
    "description": "sim.alignShapeBB(int shapeHandle, list pose)"
  },
  "sim.alphaBetaGammaToYawPitchRoll": {
    "prefix": "sim.alphaBetaGammaToYawPitchRoll",
    "body": ["sim.alphaBetaGammaToYawPitchRoll($1, $2, $3)"],
    "description": "sim.alphaBetaGammaToYawPitchRoll(float alphaAngle, float betaAngle, float gammaAngle)"
  },
  "sim.announceSceneContentChange": {
    "prefix": "sim.announceSceneContentChange",
    "body": ["sim.announceSceneContentChange()"],
    "description": "sim.announceSceneContentChange()"
  },
  "sim.auxiliaryConsoleClose": {
    "prefix": "sim.auxiliaryConsoleClose",
    "body": ["sim.auxiliaryConsoleClose($1)"],
    "description": "sim.auxiliaryConsoleClose(int consoleHandle)"
  },
  "sim.auxiliaryConsoleOpen": {
    "prefix": "sim.auxiliaryConsoleOpen",
    "body": ["sim.auxiliaryConsoleOpen($1, $2, $3)"],
    "description": "sim.auxiliaryConsoleOpen(str title, int maxLines, int mode, list position=None, list size=None, list textColor=None, list backgroundColor=None)"
  },
  "sim.auxiliaryConsolePrint": {
    "prefix": "sim.auxiliaryConsolePrint",
    "body": ["sim.auxiliaryConsolePrint($1, $2)"],
    "description": "sim.auxiliaryConsolePrint(int consoleHandle, str text)"
  },
  "sim.auxiliaryConsoleShow": {
    "prefix": "sim.auxiliaryConsoleShow",
    "body": ["sim.auxiliaryConsoleShow($1, $2)"],
    "description": "sim.auxiliaryConsoleShow(int consoleHandle, bool showState)"
  },
  "sim.broadcastMsg": {
    "prefix": "sim.broadcastMsg",
    "body": ["sim.broadcastMsg($1)"],
    "description": "sim.broadcastMsg(dict message, int options=0)"
  },
  "sim.buildIdentityMatrix": {
    "prefix": "sim.buildIdentityMatrix",
    "body": ["sim.buildIdentityMatrix()"],
    "description": "sim.buildIdentityMatrix()"
  },
  "sim.buildMatrix": {
    "prefix": "sim.buildMatrix",
    "body": ["sim.buildMatrix($1, $2)"],
    "description": "sim.buildMatrix(list position, list eulerAngles)"
  },
  "sim.buildPose": {
    "prefix": "sim.buildPose",
    "body": ["sim.buildPose($1, $2)"],
    "description": "sim.buildPose(list position, list eulerAnglesOrAxis, int mode=0, list axis2=None)"
  },
  "sim.callScriptFunction": {
    "prefix": "sim.callScriptFunction",
    "body": ["sim.callScriptFunction($1, $2, $3)"],
    "description": "sim.callScriptFunction(str functionName, int scriptHandle, ...)"
  },
  "sim.cameraFitToView": {
    "prefix": "sim.cameraFitToView",
    "body": ["sim.cameraFitToView($1)"],
    "description": "sim.cameraFitToView(int viewHandleOrIndex, int[] objectHandles=None, int options=0, float scaling=1.0)"
  },
  "sim.cancelScheduledExecution": {
    "prefix": "sim.cancelScheduledExecution",
    "body": ["sim.cancelScheduledExecution($1)"],
    "description": "sim.cancelScheduledExecution(int id)"
  },
  "sim.changeEntityColor": {
    "prefix": "sim.changeEntityColor",
    "body": ["sim.changeEntityColor($1, $2)"],
    "description": "sim.changeEntityColor(int entityHandle, list newColor, int colorComponent=sim.colorcomponent_ambient_diffuse)"
  },
  "sim.checkCollision": {
    "prefix": "sim.checkCollision",
    "body": ["sim.checkCollision($1, $2)"],
    "description": "sim.checkCollision(int entity1Handle, int entity2Handle)"
  },
  "sim.checkCollisionEx": {
    "prefix": "sim.checkCollisionEx",
    "body": ["sim.checkCollisionEx($1, $2)"],
    "description": "sim.checkCollisionEx(int entity1Handle, int entity2Handle)"
  },
  "sim.checkDistance": {
    "prefix": "sim.checkDistance",
    "body": ["sim.checkDistance($1, $2)"],
    "description": "sim.checkDistance(int entity1Handle, int entity2Handle, float threshold=0.0)"
  },
  "sim.checkOctreePointOccupancy": {
    "prefix": "sim.checkOctreePointOccupancy",
    "body": ["sim.checkOctreePointOccupancy($1, $2, $3)"],
    "description": "sim.checkOctreePointOccupancy(int octreeHandle, int options, float[] points)"
  },
  "sim.checkProximitySensor": {
    "prefix": "sim.checkProximitySensor",
    "body": ["sim.checkProximitySensor($1, $2)"],
    "description": "sim.checkProximitySensor(int sensorHandle, int entityHandle)"
  },
  "sim.checkProximitySensorEx": {
    "prefix": "sim.checkProximitySensorEx",
    "body": ["sim.checkProximitySensorEx($1, $2, $3, $4, $5)"],
    "description": "sim.checkProximitySensorEx(int sensorHandle, int entityHandle, int mode, float threshold, float maxAngle)"
  },
  "sim.checkProximitySensorEx2": {
    "prefix": "sim.checkProximitySensorEx2",
    "body": ["sim.checkProximitySensorEx2($1, $2, $3, $4, $5, $6, $7)"],
    "description": "sim.checkProximitySensorEx2(int sensorHandle, float[3..*] vertices, int itemType, int itemCount, int mode, float threshold, float maxAngle)"
  },
  "sim.checkVisionSensor": {
    "prefix": "sim.checkVisionSensor",
    "body": ["sim.checkVisionSensor($1, $2)"],
    "description": "sim.checkVisionSensor(int sensorHandle, int entityHandle)"
  },
  "sim.checkVisionSensorEx": {
    "prefix": "sim.checkVisionSensorEx",
    "body": ["sim.checkVisionSensorEx($1, $2, $3)"],
    "description": "sim.checkVisionSensorEx(int sensorHandle, int entityHandle, bool returnImage)"
  },
  "sim.clearBufferSignal": {
    "prefix": "sim.clearBufferSignal",
    "body": ["sim.clearBufferSignal($1)"],
    "description": "sim.clearBufferSignal(str signalName)"
  },
  "sim.clearFloatSignal": {
    "prefix": "sim.clearFloatSignal",
    "body": ["sim.clearFloatSignal($1)"],
    "description": "sim.clearFloatSignal(str signalName)"
  },
  "sim.clearInt32Signal": {
    "prefix": "sim.clearInt32Signal",
    "body": ["sim.clearInt32Signal($1)"],
    "description": "sim.clearInt32Signal(str signalName)"
  },
  "sim.clearStringSignal": {
    "prefix": "sim.clearStringSignal",
    "body": ["sim.clearStringSignal($1)"],
    "description": "sim.clearStringSignal(str signalName)"
  },
  "sim.closeScene": {
    "prefix": "sim.closeScene",
    "body": ["sim.closeScene()"],
    "description": "sim.closeScene()"
  },
  "sim.combineRgbImages": {
    "prefix": "sim.combineRgbImages",
    "body": ["sim.combineRgbImages($1, $2, $3, $4, $5)"],
    "description": "sim.combineRgbImages(buffer img1, list img1Res, buffer img2, list img2Res, int operation)"
  },
  "sim.computeMassAndInertia": {
    "prefix": "sim.computeMassAndInertia",
    "body": ["sim.computeMassAndInertia($1, $2)"],
    "description": "sim.computeMassAndInertia(int shapeHandle, float density)"
  },
  "sim.convertPropertyValue": {
    "prefix": "sim.convertPropertyValue",
    "body": ["sim.convertPropertyValue($1, $2, $3)"],
    "description": "sim.convertPropertyValue(any value, int fromType, int toType)"
  },
  "sim.copyPasteObjects": {
    "prefix": "sim.copyPasteObjects",
    "body": ["sim.copyPasteObjects($1)"],
    "description": "sim.copyPasteObjects(int[1..*] objectHandles, int options=0)"
  },
  "sim.copyTable": {
    "prefix": "sim.copyTable",
    "body": ["sim.copyTable($1)"],
    "description": "sim.copyTable(any[] original)"
  },
  "sim.createCollection": {
    "prefix": "sim.createCollection",
    "body": ["sim.createCollection()"],
    "description": "sim.createCollection(int options=0)"
  },
  "sim.createDummy": {
    "prefix": "sim.createDummy",
    "body": ["sim.createDummy($1)"],
    "description": "sim.createDummy(float size)"
  },
  "sim.createForceSensor": {
    "prefix": "sim.createForceSensor",
    "body": ["sim.createForceSensor($1, $2, $3)"],
    "description": "sim.createForceSensor(int options, list intParams, list floatParams)"
  },
  "sim.createHeightfieldShape": {
    "prefix": "sim.createHeightfieldShape",
    "body": ["sim.createHeightfieldShape($1, $2, $3, $4, $5, $6)"],
    "description": "sim.createHeightfieldShape(int options, float shadingAngle, int xPointCount, int yPointCount, float xSize, float[] heights)"
  },
  "sim.createJoint": {
    "prefix": "sim.createJoint",
    "body": ["sim.createJoint($1, $2, $3)"],
    "description": "sim.createJoint(int jointType, int jointMode, int options, list sizes=None)"
  },
  "sim.createOctree": {
    "prefix": "sim.createOctree",
    "body": ["sim.createOctree($1, $2, $3)"],
    "description": "sim.createOctree(float voxelSize, int options, float pointSize)"
  },
  "sim.createPath": {
    "prefix": "sim.createPath",
    "body": ["sim.createPath($1, $2, $3)"],
    "description": "sim.createPath(float[] ctrlPts, int options=0, int subdiv=100, float smoothness=1.0, int orientationMode=0, list upVector={0, 0, 1})"
  },
  "sim.createPointCloud": {
    "prefix": "sim.createPointCloud",
    "body": ["sim.createPointCloud($1, $2, $3, $4)"],
    "description": "sim.createPointCloud(float maxVoxelSize, int maxPtCntPerVoxel, int options, float pointSize)"
  },
  "sim.createPrimitiveShape": {
    "prefix": "sim.createPrimitiveShape",
    "body": ["sim.createPrimitiveShape($1, $2)"],
    "description": "sim.createPrimitiveShape(int primitiveType, list sizes, int options=0)"
  },
  "sim.createProximitySensor": {
    "prefix": "sim.createProximitySensor",
    "body": ["sim.createProximitySensor($1, $2, $3, $4, $5)"],
    "description": "sim.createProximitySensor(int sensorType, int subType, int options, list intParams, list floatParams)"
  },
  "sim.createScript": {
    "prefix": "sim.createScript",
    "body": ["sim.createScript($1, $2)"],
    "description": "sim.createScript(int scriptType, str scriptString, int options=0, str lang='')"
  },
  "sim.createShape": {
    "prefix": "sim.createShape",
    "body": ["sim.createShape($1, $2, $3, $4, $5, $6, $7, $8)"],
    "description": "sim.createShape(int options, float shadingAngle, float[] vertices, int[] indices, float[] normals, float[] textureCoordinates, buffer texture, list textureResolution)"
  },
  "sim.createTexture": {
    "prefix": "sim.createTexture",
    "body": ["sim.createTexture($1, $2)"],
    "description": "sim.createTexture(str fileName, int options, list planeSizes=None, list scalingUV=None, list xy_g=None, int fixedResolution=0, list resolution=None)"
  },
  "sim.createVisionSensor": {
    "prefix": "sim.createVisionSensor",
    "body": ["sim.createVisionSensor($1, $2, $3)"],
    "description": "sim.createVisionSensor(int options, list intParams, list floatParams)"
  },
  "sim.destroyCollection": {
    "prefix": "sim.destroyCollection",
    "body": ["sim.destroyCollection($1)"],
    "description": "sim.destroyCollection(int collectionHandle)"
  },
  "sim.destroyGraphCurve": {
    "prefix": "sim.destroyGraphCurve",
    "body": ["sim.destroyGraphCurve($1, $2)"],
    "description": "sim.destroyGraphCurve(int graphHandle, int curveId)"
  },
  "sim.duplicateGraphCurveToStatic": {
    "prefix": "sim.duplicateGraphCurveToStatic",
    "body": ["sim.duplicateGraphCurveToStatic($1, $2)"],
    "description": "sim.duplicateGraphCurveToStatic(int graphHandle, int curveId, str curveName='')"
  },
  "sim.executeLuaCode": {
    "prefix": "sim.executeLuaCode",
    "body": ["sim.executeLuaCode($1)"],
    "description": "sim.executeLuaCode(str theCode)"
  },
  "sim.executeScriptString": {
    "prefix": "sim.executeScriptString",
    "body": ["sim.executeScriptString($1, $2)"],
    "description": "sim.executeScriptString(str strToExecute, int scriptHandle)"
  },
  "sim.exportMesh": {
    "prefix": "sim.exportMesh",
    "body": ["sim.exportMesh($1, $2, $3, $4, $5, $6)"],
    "description": "sim.exportMesh(int fileformat, str pathAndFilename, int options, float scalingFactor, float[1..*] vertices, int[1..*] indices)"
  },
  "sim.fastIdleLoop": {
    "prefix": "sim.fastIdleLoop",
    "body": ["sim.fastIdleLoop($1)"],
    "description": "sim.fastIdleLoop(bool enable)"
  },
  "sim.floatingViewAdd": {
    "prefix": "sim.floatingViewAdd",
    "body": ["sim.floatingViewAdd($1, $2, $3, $4, $5)"],
    "description": "sim.floatingViewAdd(float posX, float posY, float sizeX, float sizeY, int options)"
  },
  "sim.floatingViewRemove": {
    "prefix": "sim.floatingViewRemove",
    "body": ["sim.floatingViewRemove($1)"],
    "description": "sim.floatingViewRemove(int floatingViewHandle)"
  },
  "sim.generateShapeFromPath": {
    "prefix": "sim.generateShapeFromPath",
    "body": ["sim.generateShapeFromPath($1, $2, $3, $4)"],
    "description": "sim.generateShapeFromPath(float[] path, float[] section, int options=0, list upVector={0.0, 0.0, 1.0})"
  },
  "sim.generateTextShape": {
    "prefix": "sim.generateTextShape",
    "body": ["sim.generateTextShape($1, $2, $3)"],
    "description": "sim.generateTextShape(str txt, list color={1, 1, 1}, float height=0.1, bool centered=false, str alphabetLocation=None)"
  },
  "sim.generateTimeOptimalTrajectory": {
    "prefix": "sim.generateTimeOptimalTrajectory",
    "body": ["sim.generateTimeOptimalTrajectory($1, $2, $3, $4)"],
    "description": "sim.generateTimeOptimalTrajectory(float[] path, float[] pathLengths, float[] minMaxVel, float[] minMaxAccel, int trajPtSamples=1000, str boundaryCondition='not-a-knot', float timeout=5)"
  },
  "sim.getAlternateConfigs": {
    "prefix": "sim.getAlternateConfigs",
    "body": ["sim.getAlternateConfigs($1, $2)"],
    "description": "sim.getAlternateConfigs(int[] jointHandles, float[] inputConfig, int tipHandle=-1, float[] lowLimits=None, float[] ranges=None)"
  },
  "sim.getApiFunc": {
    "prefix": "sim.getApiFunc",
    "body": ["sim.getApiFunc($1, $2)"],
    "description": "sim.getApiFunc(int scriptHandle, str apiWord)"
  },
  "sim.getApiInfo": {
    "prefix": "sim.getApiInfo",
    "body": ["sim.getApiInfo($1, $2)"],
    "description": "sim.getApiInfo(int scriptHandle, str apiWord)"
  },
  "sim.getArrayParam": {
    "prefix": "sim.getArrayParam",
    "body": ["sim.getArrayParam($1)"],
    "description": "sim.getArrayParam(int parameter)"
  },
  "sim.getAutoYieldDelay": {
    "prefix": "sim.getAutoYieldDelay",
    "body": ["sim.getAutoYieldDelay()"],
    "description": "sim.getAutoYieldDelay()"
  },
  "sim.getBoolParam": {
    "prefix": "sim.getBoolParam",
    "body": ["sim.getBoolParam($1)"],
    "description": "sim.getBoolParam(int parameter)"
  },
  "sim.getBoolProperty": {
    "prefix": "sim.getBoolProperty",
    "body": ["sim.getBoolProperty($1, $2)"],
    "description": "sim.getBoolProperty(int target, str pName, dict options={})"
  },
  "sim.getBufferProperty": {
    "prefix": "sim.getBufferProperty",
    "body": ["sim.getBufferProperty($1, $2)"],
    "description": "sim.getBufferProperty(int target, str pName, dict options={})"
  },
  "sim.getBufferSignal": {
    "prefix": "sim.getBufferSignal",
    "body": ["sim.getBufferSignal($1)"],
    "description": "sim.getBufferSignal(str signalName)"
  },
  "sim.getClosestPosOnPath": {
    "prefix": "sim.getClosestPosOnPath",
    "body": ["sim.getClosestPosOnPath($1, $2, $3)"],
    "description": "sim.getClosestPosOnPath(float[] path, float[] pathLengths, list absPt)"
  },
  "sim.getCollectionObjects": {
    "prefix": "sim.getCollectionObjects",
    "body": ["sim.getCollectionObjects($1)"],
    "description": "sim.getCollectionObjects(int collectionHandle)"
  },
  "sim.getColorProperty": {
    "prefix": "sim.getColorProperty",
    "body": ["sim.getColorProperty($1, $2)"],
    "description": "sim.getColorProperty(int target, str pName, dict options={})"
  },
  "sim.getConfigDistance": {
    "prefix": "sim.getConfigDistance",
    "body": ["sim.getConfigDistance($1, $2)"],
    "description": "sim.getConfigDistance(float[] configA, float[] configB, float[] metric=None, int[] types=None)"
  },
  "sim.getContactInfo": {
    "prefix": "sim.getContactInfo",
    "body": ["sim.getContactInfo($1, $2, $3)"],
    "description": "sim.getContactInfo(int dynamicPass, int objectHandle, int index)"
  },
  "sim.getEngineBoolParam": {
    "prefix": "sim.getEngineBoolParam",
    "body": ["sim.getEngineBoolParam($1, $2)"],
    "description": "sim.getEngineBoolParam(int paramId, int objectHandle)"
  },
  "sim.getEngineFloatParam": {
    "prefix": "sim.getEngineFloatParam",
    "body": ["sim.getEngineFloatParam($1, $2)"],
    "description": "sim.getEngineFloatParam(int paramId, int objectHandle)"
  },
  "sim.getEngineInt32Param": {
    "prefix": "sim.getEngineInt32Param",
    "body": ["sim.getEngineInt32Param($1, $2)"],
    "description": "sim.getEngineInt32Param(int paramId, int objectHandle)"
  },
  "sim.getEulerAnglesFromMatrix": {
    "prefix": "sim.getEulerAnglesFromMatrix",
    "body": ["sim.getEulerAnglesFromMatrix($1)"],
    "description": "sim.getEulerAnglesFromMatrix(list matrix)"
  },
  "sim.getExplicitHandling": {
    "prefix": "sim.getExplicitHandling",
    "body": ["sim.getExplicitHandling($1)"],
    "description": "sim.getExplicitHandling(int objectHandle)"
  },
  "sim.getExtensionString": {
    "prefix": "sim.getExtensionString",
    "body": ["sim.getExtensionString($1, $2)"],
    "description": "sim.getExtensionString(int objectHandle, int index, str key=None)"
  },
  "sim.getFloatArrayProperty": {
    "prefix": "sim.getFloatArrayProperty",
    "body": ["sim.getFloatArrayProperty($1, $2)"],
    "description": "sim.getFloatArrayProperty(int target, str pName, dict options={})"
  },
  "sim.getFloatParam": {
    "prefix": "sim.getFloatParam",
    "body": ["sim.getFloatParam($1)"],
    "description": "sim.getFloatParam(int parameter)"
  },
  "sim.getFloatProperty": {
    "prefix": "sim.getFloatProperty",
    "body": ["sim.getFloatProperty($1, $2)"],
    "description": "sim.getFloatProperty(int target, str pName, dict options={})"
  },
  "sim.getFloatSignal": {
    "prefix": "sim.getFloatSignal",
    "body": ["sim.getFloatSignal($1)"],
    "description": "sim.getFloatSignal(str signalName)"
  },
  "sim.getGenesisEvents": {
    "prefix": "sim.getGenesisEvents",
    "body": ["sim.getGenesisEvents()"],
    "description": "sim.getGenesisEvents()"
  },
  "sim.getGraphCurve": {
    "prefix": "sim.getGraphCurve",
    "body": ["sim.getGraphCurve($1, $2, $3)"],
    "description": "sim.getGraphCurve(int graphHandle, int graphType, int curveIndex)"
  },
  "sim.getGraphInfo": {
    "prefix": "sim.getGraphInfo",
    "body": ["sim.getGraphInfo($1)"],
    "description": "sim.getGraphInfo(int graphHandle)"
  },
  "sim.getInt32Param": {
    "prefix": "sim.getInt32Param",
    "body": ["sim.getInt32Param($1)"],
    "description": "sim.getInt32Param(int parameter)"
  },
  "sim.getInt32Signal": {
    "prefix": "sim.getInt32Signal",
    "body": ["sim.getInt32Signal($1)"],
    "description": "sim.getInt32Signal(str signalName)"
  },
  "sim.getIntArray2Property": {
    "prefix": "sim.getIntArray2Property",
    "body": ["sim.getIntArray2Property($1, $2)"],
    "description": "sim.getIntArray2Property(int target, str pName, dict options={})"
  },
  "sim.getIntArrayProperty": {
    "prefix": "sim.getIntArrayProperty",
    "body": ["sim.getIntArrayProperty($1, $2)"],
    "description": "sim.getIntArrayProperty(int target, str pName, dict options={})"
  },
  "sim.getIntProperty": {
    "prefix": "sim.getIntProperty",
    "body": ["sim.getIntProperty($1, $2)"],
    "description": "sim.getIntProperty(int target, str pName, dict options={})"
  },
  "sim.getIsRealTimeSimulation": {
    "prefix": "sim.getIsRealTimeSimulation",
    "body": ["sim.getIsRealTimeSimulation()"],
    "description": "sim.getIsRealTimeSimulation()"
  },
  "sim.getJointDependency": {
    "prefix": "sim.getJointDependency",
    "body": ["sim.getJointDependency($1)"],
    "description": "sim.getJointDependency(int jointHandle)"
  },
  "sim.getJointForce": {
    "prefix": "sim.getJointForce",
    "body": ["sim.getJointForce($1)"],
    "description": "sim.getJointForce(int jointHandle)"
  },
  "sim.getJointInterval": {
    "prefix": "sim.getJointInterval",
    "body": ["sim.getJointInterval($1)"],
    "description": "sim.getJointInterval(int objectHandle)"
  },
  "sim.getJointMode": {
    "prefix": "sim.getJointMode",
    "body": ["sim.getJointMode($1)"],
    "description": "sim.getJointMode(int jointHandle)"
  },
  "sim.getJointPosition": {
    "prefix": "sim.getJointPosition",
    "body": ["sim.getJointPosition($1)"],
    "description": "sim.getJointPosition(int objectHandle)"
  },
  "sim.getJointTargetForce": {
    "prefix": "sim.getJointTargetForce",
    "body": ["sim.getJointTargetForce($1)"],
    "description": "sim.getJointTargetForce(int jointHandle)"
  },
  "sim.getJointTargetPosition": {
    "prefix": "sim.getJointTargetPosition",
    "body": ["sim.getJointTargetPosition($1)"],
    "description": "sim.getJointTargetPosition(int objectHandle)"
  },
  "sim.getJointTargetVelocity": {
    "prefix": "sim.getJointTargetVelocity",
    "body": ["sim.getJointTargetVelocity($1)"],
    "description": "sim.getJointTargetVelocity(int objectHandle)"
  },
  "sim.getJointType": {
    "prefix": "sim.getJointType",
    "body": ["sim.getJointType($1)"],
    "description": "sim.getJointType(int objectHandle)"
  },
  "sim.getJointVelocity": {
    "prefix": "sim.getJointVelocity",
    "body": ["sim.getJointVelocity($1)"],
    "description": "sim.getJointVelocity(int jointHandle)"
  },
  "sim.getLastInfo": {
    "prefix": "sim.getLastInfo",
    "body": ["sim.getLastInfo()"],
    "description": "sim.getLastInfo()"
  },
  "sim.getLightParameters": {
    "prefix": "sim.getLightParameters",
    "body": ["sim.getLightParameters($1)"],
    "description": "sim.getLightParameters(int lightHandle)"
  },
  "sim.getLinkDummy": {
    "prefix": "sim.getLinkDummy",
    "body": ["sim.getLinkDummy($1)"],
    "description": "sim.getLinkDummy(int dummyHandle)"
  },
  "sim.getLoadedPlugins": {
    "prefix": "sim.getLoadedPlugins",
    "body": ["sim.getLoadedPlugins()"],
    "description": "sim.getLoadedPlugins()"
  },
  "sim.getLongProperty": {
    "prefix": "sim.getLongProperty",
    "body": ["sim.getLongProperty($1, $2)"],
    "description": "sim.getLongProperty(int target, str pName, dict options={})"
  },
  "sim.getMatchingPersistentDataTags": {
    "prefix": "sim.getMatchingPersistentDataTags",
    "body": ["sim.getMatchingPersistentDataTags($1)"],
    "description": "sim.getMatchingPersistentDataTags(str pattern)"
  },
  "sim.getMatrixInverse": {
    "prefix": "sim.getMatrixInverse",
    "body": ["sim.getMatrixInverse($1)"],
    "description": "sim.getMatrixInverse(list matrix)"
  },
  "sim.getModelBB": {
    "prefix": "sim.getModelBB",
    "body": ["sim.getModelBB($1)"],
    "description": "sim.getModelBB(int handle)"
  },
  "sim.getModelProperty": {
    "prefix": "sim.getModelProperty",
    "body": ["sim.getModelProperty($1)"],
    "description": "sim.getModelProperty(int objectHandle)"
  },
  "sim.getNamedBoolParam": {
    "prefix": "sim.getNamedBoolParam",
    "body": ["sim.getNamedBoolParam($1)"],
    "description": "sim.getNamedBoolParam(str name)"
  },
  "sim.getNamedFloatParam": {
    "prefix": "sim.getNamedFloatParam",
    "body": ["sim.getNamedFloatParam($1)"],
    "description": "sim.getNamedFloatParam(str name)"
  },
  "sim.getNamedInt32Param": {
    "prefix": "sim.getNamedInt32Param",
    "body": ["sim.getNamedInt32Param($1)"],
    "description": "sim.getNamedInt32Param(str name)"
  },
  "sim.getNamedStringParam": {
    "prefix": "sim.getNamedStringParam",
    "body": ["sim.getNamedStringParam($1)"],
    "description": "sim.getNamedStringParam(str paramName)"
  },
  "sim.getNavigationMode": {
    "prefix": "sim.getNavigationMode",
    "body": ["sim.getNavigationMode()"],
    "description": "sim.getNavigationMode()"
  },
  "sim.getObject": {
    "prefix": "sim.getObject",
    "body": ["sim.getObject($1)"],
    "description": "sim.getObject(str path, dict options={})"
  },
  "sim.getObjectAlias": {
    "prefix": "sim.getObjectAlias",
    "body": ["sim.getObjectAlias($1)"],
    "description": "sim.getObjectAlias(int objectHandle, int options=-1)"
  },
  "sim.getObjectAliasRelative": {
    "prefix": "sim.getObjectAliasRelative",
    "body": ["sim.getObjectAliasRelative($1, $2)"],
    "description": "sim.getObjectAliasRelative(int handle, int baseHandle, int options=-1)"
  },
  "sim.getObjectChild": {
    "prefix": "sim.getObjectChild",
    "body": ["sim.getObjectChild($1, $2)"],
    "description": "sim.getObjectChild(int objectHandle, int index)"
  },
  "sim.getObjectChildPose": {
    "prefix": "sim.getObjectChildPose",
    "body": ["sim.getObjectChildPose($1)"],
    "description": "sim.getObjectChildPose(int objectHandle)"
  },
  "sim.getObjectColor": {
    "prefix": "sim.getObjectColor",
    "body": ["sim.getObjectColor($1, $2, $3)"],
    "description": "sim.getObjectColor(int objectHandle, int index, int colorComponent)"
  },
  "sim.getObjectFloatArrayParam": {
    "prefix": "sim.getObjectFloatArrayParam",
    "body": ["sim.getObjectFloatArrayParam($1, $2)"],
    "description": "sim.getObjectFloatArrayParam(int objectHandle, int parameterID)"
  },
  "sim.getObjectFloatParam": {
    "prefix": "sim.getObjectFloatParam",
    "body": ["sim.getObjectFloatParam($1, $2)"],
    "description": "sim.getObjectFloatParam(int objectHandle, int parameterID)"
  },
  "sim.getObjectFromUid": {
    "prefix": "sim.getObjectFromUid",
    "body": ["sim.getObjectFromUid($1)"],
    "description": "sim.getObjectFromUid(int uid, dict options={})"
  },
  "sim.getObjectHandle": {
    "prefix": "sim.getObjectHandle",
    "body": ["sim.getObjectHandle($1)"],
    "description": "sim.getObjectHandle(str path, dict options={})"
  },
  "sim.getObjectHierarchyOrder": {
    "prefix": "sim.getObjectHierarchyOrder",
    "body": ["sim.getObjectHierarchyOrder($1)"],
    "description": "sim.getObjectHierarchyOrder(int objectHandle)"
  },
  "sim.getObjectInt32Param": {
    "prefix": "sim.getObjectInt32Param",
    "body": ["sim.getObjectInt32Param($1, $2)"],
    "description": "sim.getObjectInt32Param(int objectHandle, int parameterID)"
  },
  "sim.getObjectMatrix": {
    "prefix": "sim.getObjectMatrix",
    "body": ["sim.getObjectMatrix($1)"],
    "description": "sim.getObjectMatrix(int objectHandle, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.getObjectOrientation": {
    "prefix": "sim.getObjectOrientation",
    "body": ["sim.getObjectOrientation($1)"],
    "description": "sim.getObjectOrientation(int objectHandle, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.getObjectParent": {
    "prefix": "sim.getObjectParent",
    "body": ["sim.getObjectParent($1)"],
    "description": "sim.getObjectParent(int objectHandle)"
  },
  "sim.getObjectPose": {
    "prefix": "sim.getObjectPose",
    "body": ["sim.getObjectPose($1)"],
    "description": "sim.getObjectPose(int objectHandle, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.getObjectPosition": {
    "prefix": "sim.getObjectPosition",
    "body": ["sim.getObjectPosition($1)"],
    "description": "sim.getObjectPosition(int objectHandle, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.getObjectProperty": {
    "prefix": "sim.getObjectProperty",
    "body": ["sim.getObjectProperty($1)"],
    "description": "sim.getObjectProperty(int objectHandle)"
  },
  "sim.getObjectQuaternion": {
    "prefix": "sim.getObjectQuaternion",
    "body": ["sim.getObjectQuaternion($1)"],
    "description": "sim.getObjectQuaternion(int objectHandle, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.getObjectSel": {
    "prefix": "sim.getObjectSel",
    "body": ["sim.getObjectSel()"],
    "description": "sim.getObjectSel()"
  },
  "sim.getObjectSizeFactor": {
    "prefix": "sim.getObjectSizeFactor",
    "body": ["sim.getObjectSizeFactor($1)"],
    "description": "sim.getObjectSizeFactor(int ObjectHandle)"
  },
  "sim.getObjectSpecialProperty": {
    "prefix": "sim.getObjectSpecialProperty",
    "body": ["sim.getObjectSpecialProperty($1)"],
    "description": "sim.getObjectSpecialProperty(int objectHandle)"
  },
  "sim.getObjectStringParam": {
    "prefix": "sim.getObjectStringParam",
    "body": ["sim.getObjectStringParam($1, $2)"],
    "description": "sim.getObjectStringParam(int objectHandle, int parameterID)"
  },
  "sim.getObjectType": {
    "prefix": "sim.getObjectType",
    "body": ["sim.getObjectType($1)"],
    "description": "sim.getObjectType(int objectHandle)"
  },
  "sim.getObjectUid": {
    "prefix": "sim.getObjectUid",
    "body": ["sim.getObjectUid($1)"],
    "description": "sim.getObjectUid(int objectHandle)"
  },
  "sim.getObjectVelocity": {
    "prefix": "sim.getObjectVelocity",
    "body": ["sim.getObjectVelocity($1)"],
    "description": "sim.getObjectVelocity(int objectHandle)"
  },
  "sim.getObjects": {
    "prefix": "sim.getObjects",
    "body": ["sim.getObjects($1, $2)"],
    "description": "sim.getObjects(int index, int objectType)"
  },
  "sim.getObjectsInTree": {
    "prefix": "sim.getObjectsInTree",
    "body": ["sim.getObjectsInTree($1)"],
    "description": "sim.getObjectsInTree(int treeBaseHandle, int objectType=sim.handle_all, int options=0)"
  },
  "sim.getObjectsWithTag": {
    "prefix": "sim.getObjectsWithTag",
    "body": ["sim.getObjectsWithTag($1)"],
    "description": "sim.getObjectsWithTag(str tagName, bool justModels=false)"
  },
  "sim.getOctreeVoxels": {
    "prefix": "sim.getOctreeVoxels",
    "body": ["sim.getOctreeVoxels($1)"],
    "description": "sim.getOctreeVoxels(int octreeHandle)"
  },
  "sim.getPage": {
    "prefix": "sim.getPage",
    "body": ["sim.getPage()"],
    "description": "sim.getPage()"
  },
  "sim.getPathInterpolatedConfig": {
    "prefix": "sim.getPathInterpolatedConfig",
    "body": ["sim.getPathInterpolatedConfig($1, $2, $3)"],
    "description": "sim.getPathInterpolatedConfig(float[] path, float[] pathLengths, float t, dict method={type='linear', strength=1.0, forceOpen=false}, int[] types=None)"
  },
  "sim.getPathLengths": {
    "prefix": "sim.getPathLengths",
    "body": ["sim.getPathLengths($1, $2)"],
    "description": "sim.getPathLengths(float[] path, int dof, func distCallback=None)"
  },
  "sim.getPluginInfo": {
    "prefix": "sim.getPluginInfo",
    "body": ["sim.getPluginInfo($1, $2)"],
    "description": "sim.getPluginInfo(str pluginName, int infoType)"
  },
  "sim.getPluginName": {
    "prefix": "sim.getPluginName",
    "body": ["sim.getPluginName($1)"],
    "description": "sim.getPluginName(int index)"
  },
  "sim.getPointCloudOptions": {
    "prefix": "sim.getPointCloudOptions",
    "body": ["sim.getPointCloudOptions($1)"],
    "description": "sim.getPointCloudOptions(int pointCloudHandle)"
  },
  "sim.getPointCloudPoints": {
    "prefix": "sim.getPointCloudPoints",
    "body": ["sim.getPointCloudPoints($1)"],
    "description": "sim.getPointCloudPoints(int pointCloudHandle)"
  },
  "sim.getPoseInverse": {
    "prefix": "sim.getPoseInverse",
    "body": ["sim.getPoseInverse($1)"],
    "description": "sim.getPoseInverse(list pose)"
  },
  "sim.getPoseProperty": {
    "prefix": "sim.getPoseProperty",
    "body": ["sim.getPoseProperty($1, $2)"],
    "description": "sim.getPoseProperty(int target, str pName, dict options={})"
  },
  "sim.getProperties": {
    "prefix": "sim.getProperties",
    "body": ["sim.getProperties($1)"],
    "description": "sim.getProperties(int target, dict opts={})"
  },
  "sim.getPropertiesInfos": {
    "prefix": "sim.getPropertiesInfos",
    "body": ["sim.getPropertiesInfos($1)"],
    "description": "sim.getPropertiesInfos(int target, dict opts={})"
  },
  "sim.getProperty": {
    "prefix": "sim.getProperty",
    "body": ["sim.getProperty($1, $2)"],
    "description": "sim.getProperty(int target, str pName, dict options={})"
  },
  "sim.getPropertyInfo": {
    "prefix": "sim.getPropertyInfo",
    "body": ["sim.getPropertyInfo($1, $2)"],
    "description": "sim.getPropertyInfo(int target, str pName, dict options={})"
  },
  "sim.getPropertyName": {
    "prefix": "sim.getPropertyName",
    "body": ["sim.getPropertyName($1, $2)"],
    "description": "sim.getPropertyName(int target, int index, dict options={})"
  },
  "sim.getPropertyTypeString": {
    "prefix": "sim.getPropertyTypeString",
    "body": ["sim.getPropertyTypeString($1)"],
    "description": "sim.getPropertyTypeString(int pType)"
  },
  "sim.getQuaternionInverse": {
    "prefix": "sim.getQuaternionInverse",
    "body": ["sim.getQuaternionInverse($1)"],
    "description": "sim.getQuaternionInverse(list quat)"
  },
  "sim.getQuaternionProperty": {
    "prefix": "sim.getQuaternionProperty",
    "body": ["sim.getQuaternionProperty($1, $2)"],
    "description": "sim.getQuaternionProperty(int target, str pName, dict options={})"
  },
  "sim.getRandom": {
    "prefix": "sim.getRandom",
    "body": ["sim.getRandom()"],
    "description": "sim.getRandom(int seed=None)"
  },
  "sim.getRealTimeSimulation": {
    "prefix": "sim.getRealTimeSimulation",
    "body": ["sim.getRealTimeSimulation()"],
    "description": "sim.getRealTimeSimulation()"
  },
  "sim.getReferencedHandle": {
    "prefix": "sim.getReferencedHandle",
    "body": ["sim.getReferencedHandle($1)"],
    "description": "sim.getReferencedHandle(int objectHandle, str tag='')"
  },
  "sim.getReferencedHandles": {
    "prefix": "sim.getReferencedHandles",
    "body": ["sim.getReferencedHandles($1)"],
    "description": "sim.getReferencedHandles(int objectHandle, str tag='')"
  },
  "sim.getReferencedHandlesTags": {
    "prefix": "sim.getReferencedHandlesTags",
    "body": ["sim.getReferencedHandlesTags($1)"],
    "description": "sim.getReferencedHandlesTags(int objectHandle)"
  },
  "sim.getRotationAxis": {
    "prefix": "sim.getRotationAxis",
    "body": ["sim.getRotationAxis($1, $2)"],
    "description": "sim.getRotationAxis(list matrixStart, list matrixGoal)"
  },
  "sim.getScaledImage": {
    "prefix": "sim.getScaledImage",
    "body": ["sim.getScaledImage($1, $2, $3, $4)"],
    "description": "sim.getScaledImage(buffer imageIn, list resolutionIn, list desiredResolutionOut, int options)"
  },
  "sim.getScript": {
    "prefix": "sim.getScript",
    "body": ["sim.getScript($1)"],
    "description": "sim.getScript(int scriptType, str scriptName='')"
  },
  "sim.getScriptFunctions": {
    "prefix": "sim.getScriptFunctions",
    "body": ["sim.getScriptFunctions($1)"],
    "description": "sim.getScriptFunctions(int scriptHandle)"
  },
  "sim.getSettingBool": {
    "prefix": "sim.getSettingBool",
    "body": ["sim.getSettingBool($1)"],
    "description": "sim.getSettingBool(str key)"
  },
  "sim.getSettingFloat": {
    "prefix": "sim.getSettingFloat",
    "body": ["sim.getSettingFloat($1)"],
    "description": "sim.getSettingFloat(str key)"
  },
  "sim.getSettingInt32": {
    "prefix": "sim.getSettingInt32",
    "body": ["sim.getSettingInt32($1)"],
    "description": "sim.getSettingInt32(str key)"
  },
  "sim.getSettingString": {
    "prefix": "sim.getSettingString",
    "body": ["sim.getSettingString($1)"],
    "description": "sim.getSettingString(str key)"
  },
  "sim.getShapeAppearance": {
    "prefix": "sim.getShapeAppearance",
    "body": ["sim.getShapeAppearance($1)"],
    "description": "sim.getShapeAppearance(int handle, dict opts={})"
  },
  "sim.getShapeBB": {
    "prefix": "sim.getShapeBB",
    "body": ["sim.getShapeBB($1)"],
    "description": "sim.getShapeBB(int shapeHandle)"
  },
  "sim.getShapeColor": {
    "prefix": "sim.getShapeColor",
    "body": ["sim.getShapeColor($1, $2, $3)"],
    "description": "sim.getShapeColor(int shapeHandle, str colorName, int colorComponent)"
  },
  "sim.getShapeGeomInfo": {
    "prefix": "sim.getShapeGeomInfo",
    "body": ["sim.getShapeGeomInfo($1)"],
    "description": "sim.getShapeGeomInfo(int shapeHandle)"
  },
  "sim.getShapeInertia": {
    "prefix": "sim.getShapeInertia",
    "body": ["sim.getShapeInertia($1)"],
    "description": "sim.getShapeInertia(int shapeHandle)"
  },
  "sim.getShapeMass": {
    "prefix": "sim.getShapeMass",
    "body": ["sim.getShapeMass($1)"],
    "description": "sim.getShapeMass(int shapeHandle)"
  },
  "sim.getShapeMesh": {
    "prefix": "sim.getShapeMesh",
    "body": ["sim.getShapeMesh($1)"],
    "description": "sim.getShapeMesh(int shapeHandle)"
  },
  "sim.getShapeTextureId": {
    "prefix": "sim.getShapeTextureId",
    "body": ["sim.getShapeTextureId($1)"],
    "description": "sim.getShapeTextureId(int shapeHandle)"
  },
  "sim.getShapeViz": {
    "prefix": "sim.getShapeViz",
    "body": ["sim.getShapeViz($1, $2)"],
    "description": "sim.getShapeViz(int shapeHandle, int itemIndex)"
  },
  "sim.getSignalName": {
    "prefix": "sim.getSignalName",
    "body": ["sim.getSignalName($1, $2)"],
    "description": "sim.getSignalName(int signalIndex, int signalType)"
  },
  "sim.getSimulationState": {
    "prefix": "sim.getSimulationState",
    "body": ["sim.getSimulationState()"],
    "description": "sim.getSimulationState()"
  },
  "sim.getSimulationStopping": {
    "prefix": "sim.getSimulationStopping",
    "body": ["sim.getSimulationStopping()"],
    "description": "sim.getSimulationStopping()"
  },
  "sim.getSimulationTime": {
    "prefix": "sim.getSimulationTime",
    "body": ["sim.getSimulationTime()"],
    "description": "sim.getSimulationTime()"
  },
  "sim.getSimulationTimeStep": {
    "prefix": "sim.getSimulationTimeStep",
    "body": ["sim.getSimulationTimeStep()"],
    "description": "sim.getSimulationTimeStep()"
  },
  "sim.getSimulatorMessage": {
    "prefix": "sim.getSimulatorMessage",
    "body": ["sim.getSimulatorMessage()"],
    "description": "sim.getSimulatorMessage()"
  },
  "sim.getStackTraceback": {
    "prefix": "sim.getStackTraceback",
    "body": ["sim.getStackTraceback()"],
    "description": "sim.getStackTraceback(int scriptHandle=sim.handle_self)"
  },
  "sim.getStringParam": {
    "prefix": "sim.getStringParam",
    "body": ["sim.getStringParam($1)"],
    "description": "sim.getStringParam(int parameter)"
  },
  "sim.getStringProperty": {
    "prefix": "sim.getStringProperty",
    "body": ["sim.getStringProperty($1, $2)"],
    "description": "sim.getStringProperty(int target, str pName, dict options={})"
  },
  "sim.getStringSignal": {
    "prefix": "sim.getStringSignal",
    "body": ["sim.getStringSignal($1)"],
    "description": "sim.getStringSignal(str signalName)"
  },
  "sim.getSystemTime": {
    "prefix": "sim.getSystemTime",
    "body": ["sim.getSystemTime()"],
    "description": "sim.getSystemTime()"
  },
  "sim.getTableProperty": {
    "prefix": "sim.getTableProperty",
    "body": ["sim.getTableProperty($1, $2)"],
    "description": "sim.getTableProperty(int target, str pName, dict options={})"
  },
  "sim.getTextureId": {
    "prefix": "sim.getTextureId",
    "body": ["sim.getTextureId($1)"],
    "description": "sim.getTextureId(str textureName)"
  },
  "sim.getThreadId": {
    "prefix": "sim.getThreadId",
    "body": ["sim.getThreadId()"],
    "description": "sim.getThreadId()"
  },
  "sim.getUserVariables": {
    "prefix": "sim.getUserVariables",
    "body": ["sim.getUserVariables()"],
    "description": "sim.getUserVariables()"
  },
  "sim.getVector2Property": {
    "prefix": "sim.getVector2Property",
    "body": ["sim.getVector2Property($1, $2)"],
    "description": "sim.getVector2Property(int target, str pName, dict options={})"
  },
  "sim.getVector3Property": {
    "prefix": "sim.getVector3Property",
    "body": ["sim.getVector3Property($1, $2)"],
    "description": "sim.getVector3Property(int target, str pName, dict options={})"
  },
  "sim.getVelocity": {
    "prefix": "sim.getVelocity",
    "body": ["sim.getVelocity($1)"],
    "description": "sim.getVelocity(int shapeHandle)"
  },
  "sim.getVisionSensorDepth": {
    "prefix": "sim.getVisionSensorDepth",
    "body": ["sim.getVisionSensorDepth($1, $2, $3)"],
    "description": "sim.getVisionSensorDepth(int sensorHandle, int options=0, list pos={0, 0}, list size={0, 0})"
  },
  "sim.getVisionSensorImg": {
    "prefix": "sim.getVisionSensorImg",
    "body": ["sim.getVisionSensorImg($1, $2, $3)"],
    "description": "sim.getVisionSensorImg(int sensorHandle, int options=0, float rgbaCutOff=0.0, list pos={0, 0}, list size={0, 0})"
  },
  "sim.getVisionSensorRes": {
    "prefix": "sim.getVisionSensorRes",
    "body": ["sim.getVisionSensorRes($1)"],
    "description": "sim.getVisionSensorRes(int sensorHandle)"
  },
  "sim.groupShapes": {
    "prefix": "sim.groupShapes",
    "body": ["sim.groupShapes($1)"],
    "description": "sim.groupShapes(int[] shapeHandles, bool merge=false)"
  },
  "sim.handleAddOnScripts": {
    "prefix": "sim.handleAddOnScripts",
    "body": ["sim.handleAddOnScripts($1)"],
    "description": "sim.handleAddOnScripts(int callType)"
  },
  "sim.handleDynamics": {
    "prefix": "sim.handleDynamics",
    "body": ["sim.handleDynamics($1)"],
    "description": "sim.handleDynamics(float deltaTime)"
  },
  "sim.handleEmbeddedScripts": {
    "prefix": "sim.handleEmbeddedScripts",
    "body": ["sim.handleEmbeddedScripts($1)"],
    "description": "sim.handleEmbeddedScripts(int callType)"
  },
  "sim.handleExtCalls": {
    "prefix": "sim.handleExtCalls",
    "body": ["sim.handleExtCalls()"],
    "description": "sim.handleExtCalls()"
  },
  "sim.handleGraph": {
    "prefix": "sim.handleGraph",
    "body": ["sim.handleGraph($1, $2)"],
    "description": "sim.handleGraph(int objectHandle, float simulationTime)"
  },
  "sim.handleJointMotion": {
    "prefix": "sim.handleJointMotion",
    "body": ["sim.handleJointMotion()"],
    "description": "sim.handleJointMotion()"
  },
  "sim.handleProximitySensor": {
    "prefix": "sim.handleProximitySensor",
    "body": ["sim.handleProximitySensor($1)"],
    "description": "sim.handleProximitySensor(int sensorHandle)"
  },
  "sim.handleSandboxScript": {
    "prefix": "sim.handleSandboxScript",
    "body": ["sim.handleSandboxScript($1)"],
    "description": "sim.handleSandboxScript(int callType)"
  },
  "sim.handleSensingStart": {
    "prefix": "sim.handleSensingStart",
    "body": ["sim.handleSensingStart()"],
    "description": "sim.handleSensingStart()"
  },
  "sim.handleSimulationScripts": {
    "prefix": "sim.handleSimulationScripts",
    "body": ["sim.handleSimulationScripts($1)"],
    "description": "sim.handleSimulationScripts(int callType)"
  },
  "sim.handleSimulationStart": {
    "prefix": "sim.handleSimulationStart",
    "body": ["sim.handleSimulationStart()"],
    "description": "sim.handleSimulationStart()"
  },
  "sim.handleVisionSensor": {
    "prefix": "sim.handleVisionSensor",
    "body": ["sim.handleVisionSensor($1)"],
    "description": "sim.handleVisionSensor(int sensorHandle)"
  },
  "sim.importMesh": {
    "prefix": "sim.importMesh",
    "body": ["sim.importMesh($1, $2, $3, $4, $5)"],
    "description": "sim.importMesh(int fileformat, str pathAndFilename, int options, float identicalVerticeTolerance, float scalingFactor)"
  },
  "sim.importShape": {
    "prefix": "sim.importShape",
    "body": ["sim.importShape($1, $2, $3, $4, $5)"],
    "description": "sim.importShape(int fileformat, str pathAndFilename, int options, float identicalVerticeTolerance, float scalingFactor)"
  },
  "sim.initScript": {
    "prefix": "sim.initScript",
    "body": ["sim.initScript($1)"],
    "description": "sim.initScript(int scriptHandle)"
  },
  "sim.insertObjectIntoOctree": {
    "prefix": "sim.insertObjectIntoOctree",
    "body": ["sim.insertObjectIntoOctree($1, $2, $3)"],
    "description": "sim.insertObjectIntoOctree(int octreeHandle, int objectHandle, int options, float[] color=None, int tag=0)"
  },
  "sim.insertObjectIntoPointCloud": {
    "prefix": "sim.insertObjectIntoPointCloud",
    "body": ["sim.insertObjectIntoPointCloud($1, $2, $3, $4)"],
    "description": "sim.insertObjectIntoPointCloud(int pointCloudHandle, int objectHandle, int options, float gridSize, float[] color=None, float duplicateTolerance=None)"
  },
  "sim.insertPointsIntoPointCloud": {
    "prefix": "sim.insertPointsIntoPointCloud",
    "body": ["sim.insertPointsIntoPointCloud($1, $2, $3)"],
    "description": "sim.insertPointsIntoPointCloud(int pointCloudHandle, int options, float[] points, float[] color=None, float duplicateTolerance=None)"
  },
  "sim.insertVoxelsIntoOctree": {
    "prefix": "sim.insertVoxelsIntoOctree",
    "body": ["sim.insertVoxelsIntoOctree($1, $2, $3)"],
    "description": "sim.insertVoxelsIntoOctree(int octreeHandle, int options, float[] points, float[] color=None, int[] tag=None)"
  },
  "sim.interpolateMatrices": {
    "prefix": "sim.interpolateMatrices",
    "body": ["sim.interpolateMatrices($1, $2, $3)"],
    "description": "sim.interpolateMatrices(list matrixIn1, list matrixIn2, float interpolFactor)"
  },
  "sim.interpolatePoses": {
    "prefix": "sim.interpolatePoses",
    "body": ["sim.interpolatePoses($1, $2, $3)"],
    "description": "sim.interpolatePoses(list poseIn1, list poseIn2, float interpolFactor)"
  },
  "sim.intersectPointsWithPointCloud": {
    "prefix": "sim.intersectPointsWithPointCloud",
    "body": ["sim.intersectPointsWithPointCloud($1, $2, $3, $4)"],
    "description": "sim.intersectPointsWithPointCloud(int pointCloudHandle, int options, float[] points, float tolerance)"
  },
  "sim.isDynamicallyEnabled": {
    "prefix": "sim.isDynamicallyEnabled",
    "body": ["sim.isDynamicallyEnabled($1)"],
    "description": "sim.isDynamicallyEnabled(int objectHandle)"
  },
  "sim.isHandle": {
    "prefix": "sim.isHandle",
    "body": ["sim.isHandle($1)"],
    "description": "sim.isHandle(int objectHandle)"
  },
  "sim.isPluginLoaded": {
    "prefix": "sim.isPluginLoaded",
    "body": ["sim.isPluginLoaded($1)"],
    "description": "sim.isPluginLoaded(str name)"
  },
  "sim.launchExecutable": {
    "prefix": "sim.launchExecutable",
    "body": ["sim.launchExecutable($1)"],
    "description": "sim.launchExecutable(str filename, str parameters='', int showStatus=1)"
  },
  "sim.loadImage": {
    "prefix": "sim.loadImage",
    "body": ["sim.loadImage($1, $2)"],
    "description": "sim.loadImage(int options, str filename)"
  },
  "sim.loadModel": {
    "prefix": "sim.loadModel",
    "body": ["sim.loadModel($1)"],
    "description": "sim.loadModel(str filename)"
  },
  "sim.loadPlugin": {
    "prefix": "sim.loadPlugin",
    "body": ["sim.loadPlugin($1)"],
    "description": "sim.loadPlugin(str name)"
  },
  "sim.loadScene": {
    "prefix": "sim.loadScene",
    "body": ["sim.loadScene($1)"],
    "description": "sim.loadScene(str filename)"
  },
  "sim.matrixToPose": {
    "prefix": "sim.matrixToPose",
    "body": ["sim.matrixToPose($1)"],
    "description": "sim.matrixToPose(list matrix)"
  },
  "sim.moduleEntry": {
    "prefix": "sim.moduleEntry",
    "body": ["sim.moduleEntry($1)"],
    "description": "sim.moduleEntry(int handle, str label=None, int state=-1)"
  },
  "sim.moveToConfig": {
    "prefix": "sim.moveToConfig",
    "body": ["sim.moveToConfig($1)"],
    "description": "sim.moveToConfig(dict params)"
  },
  "sim.moveToConfig_cleanup": {
    "prefix": "sim.moveToConfig_cleanup",
    "body": ["sim.moveToConfig_cleanup($1)"],
    "description": "sim.moveToConfig_cleanup(dict motionObject)"
  },
  "sim.moveToConfig_init": {
    "prefix": "sim.moveToConfig_init",
    "body": ["sim.moveToConfig_init($1)"],
    "description": "sim.moveToConfig_init(dict params)"
  },
  "sim.moveToConfig_step": {
    "prefix": "sim.moveToConfig_step",
    "body": ["sim.moveToConfig_step($1)"],
    "description": "sim.moveToConfig_step(dict motionObject)"
  },
  "sim.moveToPose": {
    "prefix": "sim.moveToPose",
    "body": ["sim.moveToPose($1)"],
    "description": "sim.moveToPose(dict params)"
  },
  "sim.moveToPose_cleanup": {
    "prefix": "sim.moveToPose_cleanup",
    "body": ["sim.moveToPose_cleanup($1)"],
    "description": "sim.moveToPose_cleanup(dict motionObject)"
  },
  "sim.moveToPose_init": {
    "prefix": "sim.moveToPose_init",
    "body": ["sim.moveToPose_init($1)"],
    "description": "sim.moveToPose_init(dict params)"
  },
  "sim.moveToPose_step": {
    "prefix": "sim.moveToPose_step",
    "body": ["sim.moveToPose_step($1)"],
    "description": "sim.moveToPose_step(dict motionObject)"
  },
  "sim.multiplyMatrices": {
    "prefix": "sim.multiplyMatrices",
    "body": ["sim.multiplyMatrices($1, $2)"],
    "description": "sim.multiplyMatrices(list matrixIn1, list matrixIn2)"
  },
  "sim.multiplyPoses": {
    "prefix": "sim.multiplyPoses",
    "body": ["sim.multiplyPoses($1, $2)"],
    "description": "sim.multiplyPoses(list poseIn1, list poseIn2)"
  },
  "sim.multiplyVector": {
    "prefix": "sim.multiplyVector",
    "body": ["sim.multiplyVector($1, $2)"],
    "description": "sim.multiplyVector(list matrix, float[] inVectors)"
  },
  "sim.packDoubleTable": {
    "prefix": "sim.packDoubleTable",
    "body": ["sim.packDoubleTable($1)"],
    "description": "sim.packDoubleTable(float[] doubleNumbers, int startDoubleIndex=0, int doubleCount=0)"
  },
  "sim.packFloatTable": {
    "prefix": "sim.packFloatTable",
    "body": ["sim.packFloatTable($1)"],
    "description": "sim.packFloatTable(float[] floatNumbers, int startFloatIndex=0, int floatCount=0)"
  },
  "sim.packInt32Table": {
    "prefix": "sim.packInt32Table",
    "body": ["sim.packInt32Table($1)"],
    "description": "sim.packInt32Table(int[] int32Numbers, int startInt32Index=0, int int32Count=0)"
  },
  "sim.packTable": {
    "prefix": "sim.packTable",
    "body": ["sim.packTable($1)"],
    "description": "sim.packTable(any[] aTable, int scheme=0)"
  },
  "sim.packUInt16Table": {
    "prefix": "sim.packUInt16Table",
    "body": ["sim.packUInt16Table($1)"],
    "description": "sim.packUInt16Table(int[] uint16Numbers, int startUint16Index=0, int uint16Count=0)"
  },
  "sim.packUInt32Table": {
    "prefix": "sim.packUInt32Table",
    "body": ["sim.packUInt32Table($1)"],
    "description": "sim.packUInt32Table(int[] uint32Numbers, int startUInt32Index=0, int uint32Count=0)"
  },
  "sim.packUInt8Table": {
    "prefix": "sim.packUInt8Table",
    "body": ["sim.packUInt8Table($1)"],
    "description": "sim.packUInt8Table(int[] uint8Numbers, int startUint8Index=0, int uint8count=0)"
  },
  "sim.pauseSimulation": {
    "prefix": "sim.pauseSimulation",
    "body": ["sim.pauseSimulation()"],
    "description": "sim.pauseSimulation()"
  },
  "sim.poseToMatrix": {
    "prefix": "sim.poseToMatrix",
    "body": ["sim.poseToMatrix($1)"],
    "description": "sim.poseToMatrix(list pose)"
  },
  "sim.pushUserEvent": {
    "prefix": "sim.pushUserEvent",
    "body": ["sim.pushUserEvent($1, $2, $3, $4)"],
    "description": "sim.pushUserEvent(str event, int handle, int uid, dict eventData, int options=0)"
  },
  "sim.quitSimulator": {
    "prefix": "sim.quitSimulator",
    "body": ["sim.quitSimulator()"],
    "description": "sim.quitSimulator()"
  },
  "sim.readCustomBufferData": {
    "prefix": "sim.readCustomBufferData",
    "body": ["sim.readCustomBufferData($1, $2)"],
    "description": "sim.readCustomBufferData(int objectHandle, str tagName)"
  },
  "sim.readCustomDataBlockEx": {
    "prefix": "sim.readCustomDataBlockEx",
    "body": ["sim.readCustomDataBlockEx($1, $2)"],
    "description": "sim.readCustomDataBlockEx(int handle, str tag, dict options={})"
  },
  "sim.readCustomDataTags": {
    "prefix": "sim.readCustomDataTags",
    "body": ["sim.readCustomDataTags($1)"],
    "description": "sim.readCustomDataTags(int objectHandle)"
  },
  "sim.readCustomStringData": {
    "prefix": "sim.readCustomStringData",
    "body": ["sim.readCustomStringData($1, $2)"],
    "description": "sim.readCustomStringData(int objectHandle, str tagName)"
  },
  "sim.readCustomTableData": {
    "prefix": "sim.readCustomTableData",
    "body": ["sim.readCustomTableData($1, $2)"],
    "description": "sim.readCustomTableData(int handle, str tagName, dict options={})"
  },
  "sim.readForceSensor": {
    "prefix": "sim.readForceSensor",
    "body": ["sim.readForceSensor($1)"],
    "description": "sim.readForceSensor(int objectHandle)"
  },
  "sim.readProximitySensor": {
    "prefix": "sim.readProximitySensor",
    "body": ["sim.readProximitySensor($1)"],
    "description": "sim.readProximitySensor(int sensorHandle)"
  },
  "sim.readTexture": {
    "prefix": "sim.readTexture",
    "body": ["sim.readTexture($1, $2)"],
    "description": "sim.readTexture(int textureId, int options, int posX=0, int posY=0, int sizeX=0, int sizeY=0)"
  },
  "sim.readVisionSensor": {
    "prefix": "sim.readVisionSensor",
    "body": ["sim.readVisionSensor($1)"],
    "description": "sim.readVisionSensor(int sensorHandle)"
  },
  "sim.refreshDialogs": {
    "prefix": "sim.refreshDialogs",
    "body": ["sim.refreshDialogs($1)"],
    "description": "sim.refreshDialogs(int refreshDegree)"
  },
  "sim.registerScriptFuncHook": {
    "prefix": "sim.registerScriptFuncHook",
    "body": ["sim.registerScriptFuncHook($1, $2, $3)"],
    "description": "sim.registerScriptFuncHook(str funcToHook, func userFunc, bool execBefore)"
  },
  "sim.releaseLock": {
    "prefix": "sim.releaseLock",
    "body": ["sim.releaseLock()"],
    "description": "sim.releaseLock()"
  },
  "sim.relocateShapeFrame": {
    "prefix": "sim.relocateShapeFrame",
    "body": ["sim.relocateShapeFrame($1, $2)"],
    "description": "sim.relocateShapeFrame(int shapeHandle, list pose)"
  },
  "sim.removeDrawingObject": {
    "prefix": "sim.removeDrawingObject",
    "body": ["sim.removeDrawingObject($1)"],
    "description": "sim.removeDrawingObject(int drawingObjectHandle)"
  },
  "sim.removeModel": {
    "prefix": "sim.removeModel",
    "body": ["sim.removeModel($1)"],
    "description": "sim.removeModel(int objectHandle, bool delayedRemoval=false)"
  },
  "sim.removeObjects": {
    "prefix": "sim.removeObjects",
    "body": ["sim.removeObjects($1)"],
    "description": "sim.removeObjects(int[1..*] objectHandles, bool delayedRemoval=false)"
  },
  "sim.removeParticleObject": {
    "prefix": "sim.removeParticleObject",
    "body": ["sim.removeParticleObject($1)"],
    "description": "sim.removeParticleObject(int particleObjectHandle)"
  },
  "sim.removePointsFromPointCloud": {
    "prefix": "sim.removePointsFromPointCloud",
    "body": ["sim.removePointsFromPointCloud($1, $2, $3, $4)"],
    "description": "sim.removePointsFromPointCloud(int pointCloudHandle, int options, float[] points, float tolerance)"
  },
  "sim.removeProperty": {
    "prefix": "sim.removeProperty",
    "body": ["sim.removeProperty($1, $2)"],
    "description": "sim.removeProperty(int target, str pName, dict options={})"
  },
  "sim.removeReferencedObjects": {
    "prefix": "sim.removeReferencedObjects",
    "body": ["sim.removeReferencedObjects($1)"],
    "description": "sim.removeReferencedObjects(int objectHandle, str tag='')"
  },
  "sim.removeVoxelsFromOctree": {
    "prefix": "sim.removeVoxelsFromOctree",
    "body": ["sim.removeVoxelsFromOctree($1, $2, $3)"],
    "description": "sim.removeVoxelsFromOctree(int octreeHandle, int options, float[] points)"
  },
  "sim.resamplePath": {
    "prefix": "sim.resamplePath",
    "body": ["sim.resamplePath($1, $2, $3)"],
    "description": "sim.resamplePath(float[] path, float[] pathLengths, int finalConfigCnt, dict method={type='linear', strength=1.0, forceOpen=false}, int[] types=None)"
  },
  "sim.resetDynamicObject": {
    "prefix": "sim.resetDynamicObject",
    "body": ["sim.resetDynamicObject($1)"],
    "description": "sim.resetDynamicObject(int objectHandle)"
  },
  "sim.resetGraph": {
    "prefix": "sim.resetGraph",
    "body": ["sim.resetGraph($1)"],
    "description": "sim.resetGraph(int objectHandle)"
  },
  "sim.resetProximitySensor": {
    "prefix": "sim.resetProximitySensor",
    "body": ["sim.resetProximitySensor($1)"],
    "description": "sim.resetProximitySensor(int objectHandle)"
  },
  "sim.resetVisionSensor": {
    "prefix": "sim.resetVisionSensor",
    "body": ["sim.resetVisionSensor($1)"],
    "description": "sim.resetVisionSensor(int sensorHandle)"
  },
  "sim.restoreEntityColor": {
    "prefix": "sim.restoreEntityColor",
    "body": ["sim.restoreEntityColor($1)"],
    "description": "sim.restoreEntityColor(dict[] originalColorData)"
  },
  "sim.rotateAroundAxis": {
    "prefix": "sim.rotateAroundAxis",
    "body": ["sim.rotateAroundAxis($1, $2, $3, $4)"],
    "description": "sim.rotateAroundAxis(list matrixIn, list axis, list axisPos, float angle)"
  },
  "sim.ruckigPos": {
    "prefix": "sim.ruckigPos",
    "body": ["sim.ruckigPos($1, $2, $3, $4, $5, $6, $7)"],
    "description": "sim.ruckigPos(int dofs, float baseCycleTime, int flags, float[] currentPosVelAccel, float[] maxVelAccelJerk, int[] selection, float[] targetPosVel)"
  },
  "sim.ruckigRemove": {
    "prefix": "sim.ruckigRemove",
    "body": ["sim.ruckigRemove($1)"],
    "description": "sim.ruckigRemove(int handle)"
  },
  "sim.ruckigStep": {
    "prefix": "sim.ruckigStep",
    "body": ["sim.ruckigStep($1, $2)"],
    "description": "sim.ruckigStep(int handle, float cycleTime)"
  },
  "sim.ruckigVel": {
    "prefix": "sim.ruckigVel",
    "body": ["sim.ruckigVel($1, $2, $3, $4, $5, $6, $7)"],
    "description": "sim.ruckigVel(int dofs, float baseCycleTime, int flags, float[] currentPosVelAccel, float[] maxAccelJerk, int[] selection, float[] targetVel)"
  },
  "sim.saveImage": {
    "prefix": "sim.saveImage",
    "body": ["sim.saveImage($1, $2, $3, $4, $5)"],
    "description": "sim.saveImage(buffer image, list resolution, int options, str filename, int quality)"
  },
  "sim.saveModel": {
    "prefix": "sim.saveModel",
    "body": ["sim.saveModel($1, $2)"],
    "description": "sim.saveModel(int modelBaseHandle, str filename)"
  },
  "sim.saveScene": {
    "prefix": "sim.saveScene",
    "body": ["sim.saveScene($1)"],
    "description": "sim.saveScene(str filename)"
  },
  "sim.scaleObject": {
    "prefix": "sim.scaleObject",
    "body": ["sim.scaleObject($1, $2, $3, $4)"],
    "description": "sim.scaleObject(int objectHandle, float xScale, float yScale, float zScale, int options=0)"
  },
  "sim.scaleObjects": {
    "prefix": "sim.scaleObjects",
    "body": ["sim.scaleObjects($1, $2, $3)"],
    "description": "sim.scaleObjects(int[1..*] objectHandles, float scalingFactor, bool scalePositionsToo)"
  },
  "sim.scheduleExecution": {
    "prefix": "sim.scheduleExecution",
    "body": ["sim.scheduleExecution($1, $2, $3)"],
    "description": "sim.scheduleExecution(func f, any[] args, float timePoint, bool simTime=false)"
  },
  "sim.serialCheck": {
    "prefix": "sim.serialCheck",
    "body": ["sim.serialCheck($1)"],
    "description": "sim.serialCheck(int portHandle)"
  },
  "sim.serialClose": {
    "prefix": "sim.serialClose",
    "body": ["sim.serialClose($1)"],
    "description": "sim.serialClose(int portHandle)"
  },
  "sim.serialOpen": {
    "prefix": "sim.serialOpen",
    "body": ["sim.serialOpen($1, $2)"],
    "description": "sim.serialOpen(str portString, int baudrate)"
  },
  "sim.serialRead": {
    "prefix": "sim.serialRead",
    "body": ["sim.serialRead($1, $2, $3)"],
    "description": "sim.serialRead(int portHandle, int dataLengthToRead, bool blockingOperation, buffer closingString='', float timeout=0)"
  },
  "sim.serialSend": {
    "prefix": "sim.serialSend",
    "body": ["sim.serialSend($1, $2)"],
    "description": "sim.serialSend(int portHandle, buffer data)"
  },
  "sim.setArrayParam": {
    "prefix": "sim.setArrayParam",
    "body": ["sim.setArrayParam($1, $2)"],
    "description": "sim.setArrayParam(int parameter, list arrayOfValues)"
  },
  "sim.setAutoYieldDelay": {
    "prefix": "sim.setAutoYieldDelay",
    "body": ["sim.setAutoYieldDelay($1)"],
    "description": "sim.setAutoYieldDelay(float dt)"
  },
  "sim.setBoolParam": {
    "prefix": "sim.setBoolParam",
    "body": ["sim.setBoolParam($1, $2)"],
    "description": "sim.setBoolParam(int parameter, bool boolState)"
  },
  "sim.setBoolProperty": {
    "prefix": "sim.setBoolProperty",
    "body": ["sim.setBoolProperty($1, $2, $3)"],
    "description": "sim.setBoolProperty(int target, str pName, bool pValue, dict options={})"
  },
  "sim.setBufferProperty": {
    "prefix": "sim.setBufferProperty",
    "body": ["sim.setBufferProperty($1, $2, $3)"],
    "description": "sim.setBufferProperty(int target, str pName, buffer pValue, dict options={})"
  },
  "sim.setBufferSignal": {
    "prefix": "sim.setBufferSignal",
    "body": ["sim.setBufferSignal($1, $2)"],
    "description": "sim.setBufferSignal(str signalName, buffer signalValue)"
  },
  "sim.setColorProperty": {
    "prefix": "sim.setColorProperty",
    "body": ["sim.setColorProperty($1, $2, $3)"],
    "description": "sim.setColorProperty(int target, str pName, list pValue, dict options={})"
  },
  "sim.setEngineBoolParam": {
    "prefix": "sim.setEngineBoolParam",
    "body": ["sim.setEngineBoolParam($1, $2, $3)"],
    "description": "sim.setEngineBoolParam(int paramId, int objectHandle, bool boolParam)"
  },
  "sim.setEngineFloatParam": {
    "prefix": "sim.setEngineFloatParam",
    "body": ["sim.setEngineFloatParam($1, $2, $3)"],
    "description": "sim.setEngineFloatParam(int paramId, int objectHandle, float floatParam)"
  },
  "sim.setEngineInt32Param": {
    "prefix": "sim.setEngineInt32Param",
    "body": ["sim.setEngineInt32Param($1, $2, $3)"],
    "description": "sim.setEngineInt32Param(int paramId, int objectHandle, int int32Param)"
  },
  "sim.setEventFilters": {
    "prefix": "sim.setEventFilters",
    "body": ["sim.setEventFilters()"],
    "description": "sim.setEventFilters(dict filters={})"
  },
  "sim.setExplicitHandling": {
    "prefix": "sim.setExplicitHandling",
    "body": ["sim.setExplicitHandling($1, $2)"],
    "description": "sim.setExplicitHandling(int objectHandle, int explicitHandlingFlags)"
  },
  "sim.setFloatArrayProperty": {
    "prefix": "sim.setFloatArrayProperty",
    "body": ["sim.setFloatArrayProperty($1, $2, $3)"],
    "description": "sim.setFloatArrayProperty(int target, str pName, float[] pValue, dict options={})"
  },
  "sim.setFloatParam": {
    "prefix": "sim.setFloatParam",
    "body": ["sim.setFloatParam($1, $2)"],
    "description": "sim.setFloatParam(int parameter, float floatState)"
  },
  "sim.setFloatProperty": {
    "prefix": "sim.setFloatProperty",
    "body": ["sim.setFloatProperty($1, $2, $3)"],
    "description": "sim.setFloatProperty(int target, str pName, float pValue, dict options={})"
  },
  "sim.setFloatSignal": {
    "prefix": "sim.setFloatSignal",
    "body": ["sim.setFloatSignal($1, $2)"],
    "description": "sim.setFloatSignal(str signalName, float signalValue)"
  },
  "sim.setGraphStreamTransformation": {
    "prefix": "sim.setGraphStreamTransformation",
    "body": ["sim.setGraphStreamTransformation($1, $2, $3)"],
    "description": "sim.setGraphStreamTransformation(int graphHandle, int streamId, int trType, float mult=1.0, float off=0.0, int movAvgPeriod=1)"
  },
  "sim.setGraphStreamValue": {
    "prefix": "sim.setGraphStreamValue",
    "body": ["sim.setGraphStreamValue($1, $2, $3)"],
    "description": "sim.setGraphStreamValue(int graphHandle, int streamId, float value)"
  },
  "sim.setInt32Param": {
    "prefix": "sim.setInt32Param",
    "body": ["sim.setInt32Param($1, $2)"],
    "description": "sim.setInt32Param(int parameter, int intState)"
  },
  "sim.setInt32Signal": {
    "prefix": "sim.setInt32Signal",
    "body": ["sim.setInt32Signal($1, $2)"],
    "description": "sim.setInt32Signal(str signalName, int signalValue)"
  },
  "sim.setIntArray2Property": {
    "prefix": "sim.setIntArray2Property",
    "body": ["sim.setIntArray2Property($1, $2, $3)"],
    "description": "sim.setIntArray2Property(int target, str pName, list pValue, dict options={})"
  },
  "sim.setIntArrayProperty": {
    "prefix": "sim.setIntArrayProperty",
    "body": ["sim.setIntArrayProperty($1, $2, $3)"],
    "description": "sim.setIntArrayProperty(int target, str pName, int[] pValue, dict options={})"
  },
  "sim.setIntProperty": {
    "prefix": "sim.setIntProperty",
    "body": ["sim.setIntProperty($1, $2, $3)"],
    "description": "sim.setIntProperty(int target, str pName, int pValue, dict options={})"
  },
  "sim.setJointDependency": {
    "prefix": "sim.setJointDependency",
    "body": ["sim.setJointDependency($1, $2, $3, $4)"],
    "description": "sim.setJointDependency(int jointHandle, int masterJointHandle, float offset, float multCoeff)"
  },
  "sim.setJointInterval": {
    "prefix": "sim.setJointInterval",
    "body": ["sim.setJointInterval($1, $2, $3)"],
    "description": "sim.setJointInterval(int objectHandle, bool cyclic, list interval)"
  },
  "sim.setJointMode": {
    "prefix": "sim.setJointMode",
    "body": ["sim.setJointMode($1, $2)"],
    "description": "sim.setJointMode(int jointHandle, int jointMode)"
  },
  "sim.setJointPosition": {
    "prefix": "sim.setJointPosition",
    "body": ["sim.setJointPosition($1, $2)"],
    "description": "sim.setJointPosition(int objectHandle, float position)"
  },
  "sim.setJointTargetForce": {
    "prefix": "sim.setJointTargetForce",
    "body": ["sim.setJointTargetForce($1, $2)"],
    "description": "sim.setJointTargetForce(int objectHandle, float forceOrTorque, bool signedValue=true)"
  },
  "sim.setJointTargetPosition": {
    "prefix": "sim.setJointTargetPosition",
    "body": ["sim.setJointTargetPosition($1, $2)"],
    "description": "sim.setJointTargetPosition(int objectHandle, float targetPosition, float[] motionParams={})"
  },
  "sim.setJointTargetVelocity": {
    "prefix": "sim.setJointTargetVelocity",
    "body": ["sim.setJointTargetVelocity($1, $2)"],
    "description": "sim.setJointTargetVelocity(int objectHandle, float targetVelocity, float[] motionParams={})"
  },
  "sim.setLightParameters": {
    "prefix": "sim.setLightParameters",
    "body": ["sim.setLightParameters($1, $2, $3, $4, $5)"],
    "description": "sim.setLightParameters(int lightHandle, int state, list reserved, list diffusePart, list specularPart)"
  },
  "sim.setLinkDummy": {
    "prefix": "sim.setLinkDummy",
    "body": ["sim.setLinkDummy($1, $2)"],
    "description": "sim.setLinkDummy(int dummyHandle, int linkDummyHandle)"
  },
  "sim.setLongProperty": {
    "prefix": "sim.setLongProperty",
    "body": ["sim.setLongProperty($1, $2, $3)"],
    "description": "sim.setLongProperty(int target, str pName, int pValue, dict options={})"
  },
  "sim.setModelProperty": {
    "prefix": "sim.setModelProperty",
    "body": ["sim.setModelProperty($1, $2)"],
    "description": "sim.setModelProperty(int objectHandle, int property)"
  },
  "sim.setNamedBoolParam": {
    "prefix": "sim.setNamedBoolParam",
    "body": ["sim.setNamedBoolParam($1, $2)"],
    "description": "sim.setNamedBoolParam(str name, bool value)"
  },
  "sim.setNamedFloatParam": {
    "prefix": "sim.setNamedFloatParam",
    "body": ["sim.setNamedFloatParam($1, $2)"],
    "description": "sim.setNamedFloatParam(str name, float value)"
  },
  "sim.setNamedInt32Param": {
    "prefix": "sim.setNamedInt32Param",
    "body": ["sim.setNamedInt32Param($1, $2)"],
    "description": "sim.setNamedInt32Param(str name, int value)"
  },
  "sim.setNamedStringParam": {
    "prefix": "sim.setNamedStringParam",
    "body": ["sim.setNamedStringParam($1, $2)"],
    "description": "sim.setNamedStringParam(str paramName, buffer strParam)"
  },
  "sim.setNavigationMode": {
    "prefix": "sim.setNavigationMode",
    "body": ["sim.setNavigationMode($1)"],
    "description": "sim.setNavigationMode(int navigationMode)"
  },
  "sim.setObjectAlias": {
    "prefix": "sim.setObjectAlias",
    "body": ["sim.setObjectAlias($1, $2)"],
    "description": "sim.setObjectAlias(int objectHandle, str objectAlias)"
  },
  "sim.setObjectChildPose": {
    "prefix": "sim.setObjectChildPose",
    "body": ["sim.setObjectChildPose($1, $2)"],
    "description": "sim.setObjectChildPose(int objectHandle, list pose)"
  },
  "sim.setObjectColor": {
    "prefix": "sim.setObjectColor",
    "body": ["sim.setObjectColor($1, $2, $3, $4)"],
    "description": "sim.setObjectColor(int objectHandle, int index, int colorComponent, list rgbData)"
  },
  "sim.setObjectFloatArrayParam": {
    "prefix": "sim.setObjectFloatArrayParam",
    "body": ["sim.setObjectFloatArrayParam($1, $2, $3)"],
    "description": "sim.setObjectFloatArrayParam(int objectHandle, int parameterID, float[] params)"
  },
  "sim.setObjectFloatParam": {
    "prefix": "sim.setObjectFloatParam",
    "body": ["sim.setObjectFloatParam($1, $2, $3)"],
    "description": "sim.setObjectFloatParam(int objectHandle, int parameterID, float parameter)"
  },
  "sim.setObjectHierarchyOrder": {
    "prefix": "sim.setObjectHierarchyOrder",
    "body": ["sim.setObjectHierarchyOrder($1, $2)"],
    "description": "sim.setObjectHierarchyOrder(int objectHandle, int order)"
  },
  "sim.setObjectInt32Param": {
    "prefix": "sim.setObjectInt32Param",
    "body": ["sim.setObjectInt32Param($1, $2, $3)"],
    "description": "sim.setObjectInt32Param(int objectHandle, int parameterID, int parameter)"
  },
  "sim.setObjectMatrix": {
    "prefix": "sim.setObjectMatrix",
    "body": ["sim.setObjectMatrix($1, $2)"],
    "description": "sim.setObjectMatrix(int objectHandle, list matrix, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.setObjectOrientation": {
    "prefix": "sim.setObjectOrientation",
    "body": ["sim.setObjectOrientation($1, $2)"],
    "description": "sim.setObjectOrientation(int objectHandle, list eulerAngles, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.setObjectParent": {
    "prefix": "sim.setObjectParent",
    "body": ["sim.setObjectParent($1, $2)"],
    "description": "sim.setObjectParent(int objectHandle, int parentObjectHandle, bool keepInPlace=true)"
  },
  "sim.setObjectPose": {
    "prefix": "sim.setObjectPose",
    "body": ["sim.setObjectPose($1, $2)"],
    "description": "sim.setObjectPose(int objectHandle, list pose, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.setObjectPosition": {
    "prefix": "sim.setObjectPosition",
    "body": ["sim.setObjectPosition($1, $2)"],
    "description": "sim.setObjectPosition(int objectHandle, list position, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.setObjectProperty": {
    "prefix": "sim.setObjectProperty",
    "body": ["sim.setObjectProperty($1, $2)"],
    "description": "sim.setObjectProperty(int objectHandle, int property)"
  },
  "sim.setObjectQuaternion": {
    "prefix": "sim.setObjectQuaternion",
    "body": ["sim.setObjectQuaternion($1, $2)"],
    "description": "sim.setObjectQuaternion(int objectHandle, list quaternion, int relativeToObjectHandle=sim.handle_world)"
  },
  "sim.setObjectSel": {
    "prefix": "sim.setObjectSel",
    "body": ["sim.setObjectSel($1)"],
    "description": "sim.setObjectSel(int[] objectHandles)"
  },
  "sim.setObjectSpecialProperty": {
    "prefix": "sim.setObjectSpecialProperty",
    "body": ["sim.setObjectSpecialProperty($1, $2)"],
    "description": "sim.setObjectSpecialProperty(int objectHandle, int property)"
  },
  "sim.setObjectStringParam": {
    "prefix": "sim.setObjectStringParam",
    "body": ["sim.setObjectStringParam($1, $2, $3)"],
    "description": "sim.setObjectStringParam(int objectHandle, int parameterID, buffer parameter)"
  },
  "sim.setPage": {
    "prefix": "sim.setPage",
    "body": ["sim.setPage($1)"],
    "description": "sim.setPage(int pageIndex)"
  },
  "sim.setPluginInfo": {
    "prefix": "sim.setPluginInfo",
    "body": ["sim.setPluginInfo($1, $2, $3)"],
    "description": "sim.setPluginInfo(str pluginName, int infoType, str info)"
  },
  "sim.setPointCloudOptions": {
    "prefix": "sim.setPointCloudOptions",
    "body": ["sim.setPointCloudOptions($1, $2, $3, $4, $5)"],
    "description": "sim.setPointCloudOptions(int pointCloudHandle, float maxVoxelSize, int maxPtCntPerVoxel, int options, float pointSize)"
  },
  "sim.setPoseProperty": {
    "prefix": "sim.setPoseProperty",
    "body": ["sim.setPoseProperty($1, $2, $3)"],
    "description": "sim.setPoseProperty(int target, str pName, list pValue, dict options={})"
  },
  "sim.setProperties": {
    "prefix": "sim.setProperties",
    "body": ["sim.setProperties($1, $2)"],
    "description": "sim.setProperties(int target, dict props)"
  },
  "sim.setProperty": {
    "prefix": "sim.setProperty",
    "body": ["sim.setProperty($1, $2, $3)"],
    "description": "sim.setProperty(int target, str pName, any pValue, int pType=None)"
  },
  "sim.setQuaternionProperty": {
    "prefix": "sim.setQuaternionProperty",
    "body": ["sim.setQuaternionProperty($1, $2, $3)"],
    "description": "sim.setQuaternionProperty(int target, str pName, list pValue, dict options={})"
  },
  "sim.setReferencedHandles": {
    "prefix": "sim.setReferencedHandles",
    "body": ["sim.setReferencedHandles($1, $2)"],
    "description": "sim.setReferencedHandles(int objectHandle, int[] referencedHandles, str tag='')"
  },
  "sim.setShapeAppearance": {
    "prefix": "sim.setShapeAppearance",
    "body": ["sim.setShapeAppearance($1, $2)"],
    "description": "sim.setShapeAppearance(int handle, dict savedData, dict opts={})"
  },
  "sim.setShapeBB": {
    "prefix": "sim.setShapeBB",
    "body": ["sim.setShapeBB($1, $2)"],
    "description": "sim.setShapeBB(int shapeHandle, list size)"
  },
  "sim.setShapeColor": {
    "prefix": "sim.setShapeColor",
    "body": ["sim.setShapeColor($1, $2, $3, $4)"],
    "description": "sim.setShapeColor(int shapeHandle, str colorName, int colorComponent, list rgbData)"
  },
  "sim.setShapeInertia": {
    "prefix": "sim.setShapeInertia",
    "body": ["sim.setShapeInertia($1, $2, $3)"],
    "description": "sim.setShapeInertia(int shapeHandle, list inertiaMatrix, list comMatrix)"
  },
  "sim.setShapeMass": {
    "prefix": "sim.setShapeMass",
    "body": ["sim.setShapeMass($1, $2)"],
    "description": "sim.setShapeMass(int shapeHandle, float mass)"
  },
  "sim.setShapeMaterial": {
    "prefix": "sim.setShapeMaterial",
    "body": ["sim.setShapeMaterial($1, $2)"],
    "description": "sim.setShapeMaterial(int shapeHandle, int materialIdOrShapeHandle)"
  },
  "sim.setShapeTexture": {
    "prefix": "sim.setShapeTexture",
    "body": ["sim.setShapeTexture($1, $2, $3, $4, $5)"],
    "description": "sim.setShapeTexture(int shapeHandle, int textureId, int dictpingMode, int options, list uvScaling, list position=None, list orientation=None)"
  },
  "sim.setStepping": {
    "prefix": "sim.setStepping",
    "body": ["sim.setStepping($1)"],
    "description": "sim.setStepping(bool enabled)"
  },
  "sim.setStringParam": {
    "prefix": "sim.setStringParam",
    "body": ["sim.setStringParam($1, $2)"],
    "description": "sim.setStringParam(int parameter, str strState)"
  },
  "sim.setStringProperty": {
    "prefix": "sim.setStringProperty",
    "body": ["sim.setStringProperty($1, $2, $3)"],
    "description": "sim.setStringProperty(int target, str pName, str pValue, dict options={})"
  },
  "sim.setStringSignal": {
    "prefix": "sim.setStringSignal",
    "body": ["sim.setStringSignal($1, $2)"],
    "description": "sim.setStringSignal(str signalName, str signalValue)"
  },
  "sim.setTableProperty": {
    "prefix": "sim.setTableProperty",
    "body": ["sim.setTableProperty($1, $2, $3)"],
    "description": "sim.setTableProperty(int target, str pName, dict pValue, dict options={})"
  },
  "sim.setVector2Property": {
    "prefix": "sim.setVector2Property",
    "body": ["sim.setVector2Property($1, $2, $3)"],
    "description": "sim.setVector2Property(int target, str pName, list pValue, dict options={})"
  },
  "sim.setVector3Property": {
    "prefix": "sim.setVector3Property",
    "body": ["sim.setVector3Property($1, $2, $3)"],
    "description": "sim.setVector3Property(int target, str pName, list pValue, dict options={})"
  },
  "sim.setVisionSensorImg": {
    "prefix": "sim.setVisionSensorImg",
    "body": ["sim.setVisionSensorImg($1, $2, $3, $4)"],
    "description": "sim.setVisionSensorImg(int sensorHandle, buffer image, int options=0, list pos={0, 0}, list size={0, 0})"
  },
  "sim.startSimulation": {
    "prefix": "sim.startSimulation",
    "body": ["sim.startSimulation()"],
    "description": "sim.startSimulation()"
  },
  "sim.step": {
    "prefix": "sim.step",
    "body": ["sim.step()"],
    "description": "sim.step()"
  },
  "sim.stopSimulation": {
    "prefix": "sim.stopSimulation",
    "body": ["sim.stopSimulation()"],
    "description": "sim.stopSimulation(bool wait=false)"
  },
  "sim.subtractObjectFromOctree": {
    "prefix": "sim.subtractObjectFromOctree",
    "body": ["sim.subtractObjectFromOctree($1, $2, $3)"],
    "description": "sim.subtractObjectFromOctree(int octreeHandle, int objectHandle, int options)"
  },
  "sim.subtractObjectFromPointCloud": {
    "prefix": "sim.subtractObjectFromPointCloud",
    "body": ["sim.subtractObjectFromPointCloud($1, $2, $3, $4)"],
    "description": "sim.subtractObjectFromPointCloud(int pointCloudHandle, int objectHandle, int options, float tolerance)"
  },
  "sim.systemSemaphore": {
    "prefix": "sim.systemSemaphore",
    "body": ["sim.systemSemaphore($1, $2)"],
    "description": "sim.systemSemaphore(str key, bool acquire)"
  },
  "sim.testCB": {
    "prefix": "sim.testCB",
    "body": ["sim.testCB($1, $2, $3)"],
    "description": "sim.testCB(int a, func cb, int b)"
  },
  "sim.textEditorClose": {
    "prefix": "sim.textEditorClose",
    "body": ["sim.textEditorClose($1)"],
    "description": "sim.textEditorClose(int handle)"
  },
  "sim.textEditorGetInfo": {
    "prefix": "sim.textEditorGetInfo",
    "body": ["sim.textEditorGetInfo($1)"],
    "description": "sim.textEditorGetInfo(int handle)"
  },
  "sim.textEditorOpen": {
    "prefix": "sim.textEditorOpen",
    "body": ["sim.textEditorOpen($1, $2)"],
    "description": "sim.textEditorOpen(str initText, str properties)"
  },
  "sim.textEditorShow": {
    "prefix": "sim.textEditorShow",
    "body": ["sim.textEditorShow($1, $2)"],
    "description": "sim.textEditorShow(int handle, bool showState)"
  },
  "sim.throttle": {
    "prefix": "sim.throttle",
    "body": ["sim.throttle($1, $2, $3)"],
    "description": "sim.throttle(float period, func f, ...)"
  },
  "sim.transformBuffer": {
    "prefix": "sim.transformBuffer",
    "body": ["sim.transformBuffer($1, $2, $3, $4, $5)"],
    "description": "sim.transformBuffer(buffer inBuffer, int inFormat, float multiplier, float offset, int outFormat)"
  },
  "sim.transformImage": {
    "prefix": "sim.transformImage",
    "body": ["sim.transformImage($1, $2, $3)"],
    "description": "sim.transformImage(buffer image, list resolution, int options)"
  },
  "sim.ungroupShape": {
    "prefix": "sim.ungroupShape",
    "body": ["sim.ungroupShape($1)"],
    "description": "sim.ungroupShape(int shapeHandle)"
  },
  "sim.unpackDoubleTable": {
    "prefix": "sim.unpackDoubleTable",
    "body": ["sim.unpackDoubleTable($1)"],
    "description": "sim.unpackDoubleTable(buffer data, int startDoubleIndex=0, int doubleCount=0, int additionalByteOffset=0)"
  },
  "sim.unpackFloatTable": {
    "prefix": "sim.unpackFloatTable",
    "body": ["sim.unpackFloatTable($1)"],
    "description": "sim.unpackFloatTable(buffer data, int startFloatIndex=0, int floatCount=0, int additionalByteOffset=0)"
  },
  "sim.unpackInt32Table": {
    "prefix": "sim.unpackInt32Table",
    "body": ["sim.unpackInt32Table($1)"],
    "description": "sim.unpackInt32Table(buffer data, int startInt32Index=0, int int32Count=0, int additionalByteOffset=0)"
  },
  "sim.unpackTable": {
    "prefix": "sim.unpackTable",
    "body": ["sim.unpackTable($1)"],
    "description": "sim.unpackTable(buffer buffer)"
  },
  "sim.unpackUInt16Table": {
    "prefix": "sim.unpackUInt16Table",
    "body": ["sim.unpackUInt16Table($1)"],
    "description": "sim.unpackUInt16Table(buffer data, int startUint16Index=0, int uint16Count=0, int additionalByteOffset=0)"
  },
  "sim.unpackUInt32Table": {
    "prefix": "sim.unpackUInt32Table",
    "body": ["sim.unpackUInt32Table($1)"],
    "description": "sim.unpackUInt32Table(buffer data, int startUint32Index=0, int uint32Count=0, int additionalByteOffset=0)"
  },
  "sim.unpackUInt8Table": {
    "prefix": "sim.unpackUInt8Table",
    "body": ["sim.unpackUInt8Table($1)"],
    "description": "sim.unpackUInt8Table(buffer data, int startUint8Index=0, int uint8count=0)"
  },
  "sim.visitTree": {
    "prefix": "sim.visitTree",
    "body": ["sim.visitTree($1, $2)"],
    "description": "sim.visitTree(int rootHandle, func visitorFunc, dict options={})"
  },
  "sim.wait": {
    "prefix": "sim.wait",
    "body": ["sim.wait($1)"],
    "description": "sim.wait(float dt, bool simulationTime=true)"
  },
  "sim.waitForSignal": {
    "prefix": "sim.waitForSignal",
    "body": ["sim.waitForSignal($1, $2)"],
    "description": "sim.waitForSignal(int target, str sigName)"
  },
  "sim.writeCustomBufferData": {
    "prefix": "sim.writeCustomBufferData",
    "body": ["sim.writeCustomBufferData($1, $2, $3)"],
    "description": "sim.writeCustomBufferData(int objectHandle, str tagName, buffer data)"
  },
  "sim.writeCustomDataBlockEx": {
    "prefix": "sim.writeCustomDataBlockEx",
    "body": ["sim.writeCustomDataBlockEx($1, $2, $3)"],
    "description": "sim.writeCustomDataBlockEx(int handle, str tag, buffer data, dict options={})"
  },
  "sim.writeCustomStringData": {
    "prefix": "sim.writeCustomStringData",
    "body": ["sim.writeCustomStringData($1, $2, $3)"],
    "description": "sim.writeCustomStringData(int objectHandle, str tagName, str data)"
  },
  "sim.writeCustomTableData": {
    "prefix": "sim.writeCustomTableData",
    "body": ["sim.writeCustomTableData($1, $2, $3)"],
    "description": "sim.writeCustomTableData(int handle, str tagName, dict theTable, dict options={})"
  },
  "sim.writeTexture": {
    "prefix": "sim.writeTexture",
    "body": ["sim.writeTexture($1, $2, $3)"],
    "description": "sim.writeTexture(int textureId, int options, buffer textureData, int posX=0, int posY=0, int sizeX=0, int sizeY=0, float interpol=0.0)"
  },
  "sim.yawPitchRollToAlphaBetaGamma": {
    "prefix": "sim.yawPitchRollToAlphaBetaGamma",
    "body": ["sim.yawPitchRollToAlphaBetaGamma($1, $2, $3)"],
    "description": "sim.yawPitchRollToAlphaBetaGamma(float yawAngle, float pitchAngle, float rollAngle)"
  },
  "sim.yield": {
    "prefix": "sim.yield",
    "body": ["sim.yield()"],
    "description": "sim.yield()"
  },
  "simAssimp.exportMeshes": {
    "prefix": "simAssimp.exportMeshes",
    "body": ["simAssimp.exportMeshes($1, $2, $3, $4)"],
    "description": "simAssimp.exportMeshes(dict allVertices, dict allIndices, str filename, str formatId, float scaling=1.0, int upVector=simassimp_upvect_z, int options=0)"
  },
  "simAssimp.exportShapes": {
    "prefix": "simAssimp.exportShapes",
    "body": ["simAssimp.exportShapes($1, $2, $3)"],
    "description": "simAssimp.exportShapes(int[] shapeHandles, str filename, str formatId, float scaling=1.0, int upVector=simassimp_upvect_z, int options=0)"
  },
  "simAssimp.exportShapesDlg": {
    "prefix": "simAssimp.exportShapesDlg",
    "body": ["simAssimp.exportShapesDlg($1, $2)"],
    "description": "simAssimp.exportShapesDlg(str filename, int[] shapeHandles)"
  },
  "simAssimp.getExportFormat": {
    "prefix": "simAssimp.getExportFormat",
    "body": ["simAssimp.getExportFormat($1)"],
    "description": "simAssimp.getExportFormat(int index)"
  },
  "simAssimp.getImportFormat": {
    "prefix": "simAssimp.getImportFormat",
    "body": ["simAssimp.getImportFormat($1)"],
    "description": "simAssimp.getImportFormat(int index)"
  },
  "simAssimp.importMeshes": {
    "prefix": "simAssimp.importMeshes",
    "body": ["simAssimp.importMeshes($1)"],
    "description": "simAssimp.importMeshes(str filenames, float scaling=0.0, int upVector=simassimp_upvect_auto, int options=0)"
  },
  "simAssimp.importShapes": {
    "prefix": "simAssimp.importShapes",
    "body": ["simAssimp.importShapes($1)"],
    "description": "simAssimp.importShapes(str filenames, int maxTextureSize=512, float scaling=0.0, int upVector=simassimp_upvect_auto, int options=0)"
  },
  "simAssimp.importShapesDlg": {
    "prefix": "simAssimp.importShapesDlg",
    "body": ["simAssimp.importShapesDlg($1)"],
    "description": "simAssimp.importShapesDlg(str filename)"
  },
  "simBWF.query": {
    "prefix": "simBWF.query",
    "body": ["simBWF.query($1, $2)"],
    "description": "simBWF.query(str command, dict data)"
  },
  "simBubble.create": {
    "prefix": "simBubble.create",
    "body": ["simBubble.create($1, $2, $3)"],
    "description": "simBubble.create(list motorJointHandles, int sensorHandle, list backRelativeVelocities)"
  },
  "simBubble.destroy": {
    "prefix": "simBubble.destroy",
    "body": ["simBubble.destroy($1)"],
    "description": "simBubble.destroy(int bubbleRobHandle)"
  },
  "simBubble.start": {
    "prefix": "simBubble.start",
    "body": ["simBubble.start($1)"],
    "description": "simBubble.start(int bubbleRobHandle)"
  },
  "simBubble.stop": {
    "prefix": "simBubble.stop",
    "body": ["simBubble.stop($1)"],
    "description": "simBubble.stop(int bubbleRobHandle)"
  },
  "simCHAI3D.addConstraintPlane": {
    "prefix": "simCHAI3D.addConstraintPlane",
    "body": ["simCHAI3D.addConstraintPlane($1, $2, $3, $4, $5, $6)"],
    "description": "simCHAI3D.addConstraintPlane(int deviceIndex, list position, list normal, float Kp, float Kv, float Fmax)"
  },
  "simCHAI3D.addConstraintPoint": {
    "prefix": "simCHAI3D.addConstraintPoint",
    "body": ["simCHAI3D.addConstraintPoint($1, $2, $3, $4, $5)"],
    "description": "simCHAI3D.addConstraintPoint(int deviceIndex, list position, float Kp, float Kv, float Fmax)"
  },
  "simCHAI3D.addConstraintSegment": {
    "prefix": "simCHAI3D.addConstraintSegment",
    "body": ["simCHAI3D.addConstraintSegment($1, $2, $3, $4, $5, $6)"],
    "description": "simCHAI3D.addConstraintSegment(int deviceIndex, list point, list segment, float Kp, float Kv, float Fmax)"
  },
  "simCHAI3D.addShape": {
    "prefix": "simCHAI3D.addShape",
    "body": ["simCHAI3D.addShape($1, $2, $3, $4, $5)"],
    "description": "simCHAI3D.addShape(float[] vertices, int[] indices, list position, list orientation, float stiffnessFactor)"
  },
  "simCHAI3D.readButtons": {
    "prefix": "simCHAI3D.readButtons",
    "body": ["simCHAI3D.readButtons($1)"],
    "description": "simCHAI3D.readButtons(int deviceIndex)"
  },
  "simCHAI3D.readForce": {
    "prefix": "simCHAI3D.readForce",
    "body": ["simCHAI3D.readForce($1)"],
    "description": "simCHAI3D.readForce(int deviceIndex)"
  },
  "simCHAI3D.readPosition": {
    "prefix": "simCHAI3D.readPosition",
    "body": ["simCHAI3D.readPosition($1)"],
    "description": "simCHAI3D.readPosition(int deviceIndex)"
  },
  "simCHAI3D.removeObject": {
    "prefix": "simCHAI3D.removeObject",
    "body": ["simCHAI3D.removeObject($1)"],
    "description": "simCHAI3D.removeObject(int objectID)"
  },
  "simCHAI3D.reset": {
    "prefix": "simCHAI3D.reset",
    "body": ["simCHAI3D.reset()"],
    "description": "simCHAI3D.reset()"
  },
  "simCHAI3D.start": {
    "prefix": "simCHAI3D.start",
    "body": ["simCHAI3D.start($1, $2, $3)"],
    "description": "simCHAI3D.start(int deviceIndex, float toolRadius, float workspaceRadius)"
  },
  "simCHAI3D.updateConstraint": {
    "prefix": "simCHAI3D.updateConstraint",
    "body": ["simCHAI3D.updateConstraint($1, $2, $3, $4, $5, $6)"],
    "description": "simCHAI3D.updateConstraint(int objectID, list positionA, list positionB, float Kp, float Kv, float Fmax)"
  },
  "simCHAI3D.updateShape": {
    "prefix": "simCHAI3D.updateShape",
    "body": ["simCHAI3D.updateShape($1, $2, $3, $4)"],
    "description": "simCHAI3D.updateShape(int objectID, list position, list orientation, float stiffnessFactor)"
  },
  "simCam.grab": {
    "prefix": "simCam.grab",
    "body": ["simCam.grab($1, $2)"],
    "description": "simCam.grab(int deviceIndex, int visionSensorHandle)"
  },
  "simCam.info": {
    "prefix": "simCam.info",
    "body": ["simCam.info($1)"],
    "description": "simCam.info(int deviceIndex)"
  },
  "simCam.start": {
    "prefix": "simCam.start",
    "body": ["simCam.start($1, $2, $3)"],
    "description": "simCam.start(int deviceIndex, int resX, int resY)"
  },
  "simCam.stop": {
    "prefix": "simCam.stop",
    "body": ["simCam.stop($1)"],
    "description": "simCam.stop(int deviceIndex)"
  },
  "simCmd.clearHistory": {
    "prefix": "simCmd.clearHistory",
    "body": ["simCmd.clearHistory()"],
    "description": "simCmd.clearHistory()"
  },
  "simCmd.setSelectedScript": {
    "prefix": "simCmd.setSelectedScript",
    "body": ["simCmd.setSelectedScript($1)"],
    "description": "simCmd.setSelectedScript(int scriptHandle, str lang=\"\")"
  },
  "simCmd.setVisible": {
    "prefix": "simCmd.setVisible",
    "body": ["simCmd.setVisible($1)"],
    "description": "simCmd.setVisible(bool b)"
  },
  "simConvex.hacd": {
    "prefix": "simConvex.hacd",
    "body": ["simConvex.hacd($1)"],
    "description": "simConvex.hacd(int shapeHandle, dict params = None)"
  },
  "simConvex.hull": {
    "prefix": "simConvex.hull",
    "body": ["simConvex.hull($1)"],
    "description": "simConvex.hull(int[] objectHandles, float growth = 0.0)"
  },
  "simConvex.qhull": {
    "prefix": "simConvex.qhull",
    "body": ["simConvex.qhull($1)"],
    "description": "simConvex.qhull(float[] points, float growth = 0.0)"
  },
  "simConvex.vhacd": {
    "prefix": "simConvex.vhacd",
    "body": ["simConvex.vhacd($1)"],
    "description": "simConvex.vhacd(int shapeHandle, dict params = None)"
  },
  "simEigen.Matrix": {
    "prefix": "simEigen.Matrix",
    "body": ["simEigen.Matrix($1, $2, $3)"],
    "description": "simEigen.Matrix(int rows, int cols, float[] data)"
  },
  "simEigen.Matrix:abs": {
    "prefix": "simEigen.Matrix:abs",
    "body": ["simEigen.Matrix:abs()"],
    "description": "simEigen.Matrix:abs()"
  },
  "simEigen.Matrix:acos": {
    "prefix": "simEigen.Matrix:acos",
    "body": ["simEigen.Matrix:acos()"],
    "description": "simEigen.Matrix:acos()"
  },
  "simEigen.Matrix:add": {
    "prefix": "simEigen.Matrix:add",
    "body": ["simEigen.Matrix:add($1)"],
    "description": "simEigen.Matrix:add(dict m2)"
  },
  "simEigen.Matrix:asin": {
    "prefix": "simEigen.Matrix:asin",
    "body": ["simEigen.Matrix:asin()"],
    "description": "simEigen.Matrix:asin()"
  },
  "simEigen.Matrix:atan": {
    "prefix": "simEigen.Matrix:atan",
    "body": ["simEigen.Matrix:atan()"],
    "description": "simEigen.Matrix:atan()"
  },
  "simEigen.Matrix:block": {
    "prefix": "simEigen.Matrix:block",
    "body": ["simEigen.Matrix:block($1, $2, $3, $4)"],
    "description": "simEigen.Matrix:block(int i, int j, int p, int q)"
  },
  "simEigen.Matrix:blockassign": {
    "prefix": "simEigen.Matrix:blockassign",
    "body": ["simEigen.Matrix:blockassign($1, $2, $3, $4, $5)"],
    "description": "simEigen.Matrix:blockassign(dict m, int i, int j, int p, int q)"
  },
  "simEigen.Matrix:ceil": {
    "prefix": "simEigen.Matrix:ceil",
    "body": ["simEigen.Matrix:ceil()"],
    "description": "simEigen.Matrix:ceil()"
  },
  "simEigen.Matrix:col": {
    "prefix": "simEigen.Matrix:col",
    "body": ["simEigen.Matrix:col($1)"],
    "description": "simEigen.Matrix:col(int j)"
  },
  "simEigen.Matrix:coldata": {
    "prefix": "simEigen.Matrix:coldata",
    "body": ["simEigen.Matrix:coldata($1)"],
    "description": "simEigen.Matrix:coldata(int j)"
  },
  "simEigen.Matrix:cols": {
    "prefix": "simEigen.Matrix:cols",
    "body": ["simEigen.Matrix:cols()"],
    "description": "simEigen.Matrix:cols()"
  },
  "simEigen.Matrix:copy": {
    "prefix": "simEigen.Matrix:copy",
    "body": ["simEigen.Matrix:copy()"],
    "description": "simEigen.Matrix:copy()"
  },
  "simEigen.Matrix:cos": {
    "prefix": "simEigen.Matrix:cos",
    "body": ["simEigen.Matrix:cos()"],
    "description": "simEigen.Matrix:cos()"
  },
  "simEigen.Matrix:count": {
    "prefix": "simEigen.Matrix:count",
    "body": ["simEigen.Matrix:count()"],
    "description": "simEigen.Matrix:count()"
  },
  "simEigen.Matrix:cross": {
    "prefix": "simEigen.Matrix:cross",
    "body": ["simEigen.Matrix:cross($1)"],
    "description": "simEigen.Matrix:cross(dict v2)"
  },
  "simEigen.Matrix:data": {
    "prefix": "simEigen.Matrix:data",
    "body": ["simEigen.Matrix:data()"],
    "description": "simEigen.Matrix:data()"
  },
  "simEigen.Matrix:deg": {
    "prefix": "simEigen.Matrix:deg",
    "body": ["simEigen.Matrix:deg()"],
    "description": "simEigen.Matrix:deg()"
  },
  "simEigen.Matrix:det": {
    "prefix": "simEigen.Matrix:det",
    "body": ["simEigen.Matrix:det()"],
    "description": "simEigen.Matrix:det()"
  },
  "simEigen.Matrix:div": {
    "prefix": "simEigen.Matrix:div",
    "body": ["simEigen.Matrix:div($1)"],
    "description": "simEigen.Matrix:div(dict m2)"
  },
  "simEigen.Matrix:dot": {
    "prefix": "simEigen.Matrix:dot",
    "body": ["simEigen.Matrix:dot($1)"],
    "description": "simEigen.Matrix:dot(dict v2)"
  },
  "simEigen.Matrix:exp": {
    "prefix": "simEigen.Matrix:exp",
    "body": ["simEigen.Matrix:exp()"],
    "description": "simEigen.Matrix:exp()"
  },
  "simEigen.Matrix:eye": {
    "prefix": "simEigen.Matrix:eye",
    "body": ["simEigen.Matrix:eye($1)"],
    "description": "simEigen.Matrix:eye(int n)"
  },
  "simEigen.Matrix:floor": {
    "prefix": "simEigen.Matrix:floor",
    "body": ["simEigen.Matrix:floor()"],
    "description": "simEigen.Matrix:floor()"
  },
  "simEigen.Matrix:horzcat": {
    "prefix": "simEigen.Matrix:horzcat",
    "body": ["simEigen.Matrix:horzcat($1)"],
    "description": "simEigen.Matrix:horzcat(dict m2)"
  },
  "simEigen.Matrix:iabs": {
    "prefix": "simEigen.Matrix:iabs",
    "body": ["simEigen.Matrix:iabs()"],
    "description": "simEigen.Matrix:iabs()"
  },
  "simEigen.Matrix:iacos": {
    "prefix": "simEigen.Matrix:iacos",
    "body": ["simEigen.Matrix:iacos()"],
    "description": "simEigen.Matrix:iacos()"
  },
  "simEigen.Matrix:iadd": {
    "prefix": "simEigen.Matrix:iadd",
    "body": ["simEigen.Matrix:iadd($1)"],
    "description": "simEigen.Matrix:iadd(dict m)"
  },
  "simEigen.Matrix:iasin": {
    "prefix": "simEigen.Matrix:iasin",
    "body": ["simEigen.Matrix:iasin()"],
    "description": "simEigen.Matrix:iasin()"
  },
  "simEigen.Matrix:iatan": {
    "prefix": "simEigen.Matrix:iatan",
    "body": ["simEigen.Matrix:iatan()"],
    "description": "simEigen.Matrix:iatan()"
  },
  "simEigen.Matrix:iceil": {
    "prefix": "simEigen.Matrix:iceil",
    "body": ["simEigen.Matrix:iceil()"],
    "description": "simEigen.Matrix:iceil()"
  },
  "simEigen.Matrix:icos": {
    "prefix": "simEigen.Matrix:icos",
    "body": ["simEigen.Matrix:icos()"],
    "description": "simEigen.Matrix:icos()"
  },
  "simEigen.Matrix:ideg": {
    "prefix": "simEigen.Matrix:ideg",
    "body": ["simEigen.Matrix:ideg()"],
    "description": "simEigen.Matrix:ideg()"
  },
  "simEigen.Matrix:idiv": {
    "prefix": "simEigen.Matrix:idiv",
    "body": ["simEigen.Matrix:idiv($1)"],
    "description": "simEigen.Matrix:idiv(dict m)"
  },
  "simEigen.Matrix:iexp": {
    "prefix": "simEigen.Matrix:iexp",
    "body": ["simEigen.Matrix:iexp()"],
    "description": "simEigen.Matrix:iexp()"
  },
  "simEigen.Matrix:ifloor": {
    "prefix": "simEigen.Matrix:ifloor",
    "body": ["simEigen.Matrix:ifloor()"],
    "description": "simEigen.Matrix:ifloor()"
  },
  "simEigen.Matrix:iintdiv": {
    "prefix": "simEigen.Matrix:iintdiv",
    "body": ["simEigen.Matrix:iintdiv($1)"],
    "description": "simEigen.Matrix:iintdiv(dict m)"
  },
  "simEigen.Matrix:ilog": {
    "prefix": "simEigen.Matrix:ilog",
    "body": ["simEigen.Matrix:ilog()"],
    "description": "simEigen.Matrix:ilog()"
  },
  "simEigen.Matrix:ilog10": {
    "prefix": "simEigen.Matrix:ilog10",
    "body": ["simEigen.Matrix:ilog10()"],
    "description": "simEigen.Matrix:ilog10()"
  },
  "simEigen.Matrix:ilog2": {
    "prefix": "simEigen.Matrix:ilog2",
    "body": ["simEigen.Matrix:ilog2()"],
    "description": "simEigen.Matrix:ilog2()"
  },
  "simEigen.Matrix:imax": {
    "prefix": "simEigen.Matrix:imax",
    "body": ["simEigen.Matrix:imax($1)"],
    "description": "simEigen.Matrix:imax(dict m)"
  },
  "simEigen.Matrix:imin": {
    "prefix": "simEigen.Matrix:imin",
    "body": ["simEigen.Matrix:imin($1)"],
    "description": "simEigen.Matrix:imin(dict m)"
  },
  "simEigen.Matrix:imod": {
    "prefix": "simEigen.Matrix:imod",
    "body": ["simEigen.Matrix:imod($1)"],
    "description": "simEigen.Matrix:imod(dict m)"
  },
  "simEigen.Matrix:imul": {
    "prefix": "simEigen.Matrix:imul",
    "body": ["simEigen.Matrix:imul($1)"],
    "description": "simEigen.Matrix:imul(dict m)"
  },
  "simEigen.Matrix:intdiv": {
    "prefix": "simEigen.Matrix:intdiv",
    "body": ["simEigen.Matrix:intdiv($1)"],
    "description": "simEigen.Matrix:intdiv(dict m2)"
  },
  "simEigen.Matrix:inversetransform": {
    "prefix": "simEigen.Matrix:inversetransform",
    "body": ["simEigen.Matrix:inversetransform()"],
    "description": "simEigen.Matrix:inversetransform()"
  },
  "simEigen.Matrix:irad": {
    "prefix": "simEigen.Matrix:irad",
    "body": ["simEigen.Matrix:irad()"],
    "description": "simEigen.Matrix:irad()"
  },
  "simEigen.Matrix:isin": {
    "prefix": "simEigen.Matrix:isin",
    "body": ["simEigen.Matrix:isin()"],
    "description": "simEigen.Matrix:isin()"
  },
  "simEigen.Matrix:ismatrix": {
    "prefix": "simEigen.Matrix:ismatrix",
    "body": ["simEigen.Matrix:ismatrix($1)"],
    "description": "simEigen.Matrix:ismatrix(any m)"
  },
  "simEigen.Matrix:isorthogonal": {
    "prefix": "simEigen.Matrix:isorthogonal",
    "body": ["simEigen.Matrix:isorthogonal()"],
    "description": "simEigen.Matrix:isorthogonal(float tol=1e-6)"
  },
  "simEigen.Matrix:isqrt": {
    "prefix": "simEigen.Matrix:isqrt",
    "body": ["simEigen.Matrix:isqrt()"],
    "description": "simEigen.Matrix:isqrt()"
  },
  "simEigen.Matrix:isub": {
    "prefix": "simEigen.Matrix:isub",
    "body": ["simEigen.Matrix:isub($1)"],
    "description": "simEigen.Matrix:isub(dict m)"
  },
  "simEigen.Matrix:isvector": {
    "prefix": "simEigen.Matrix:isvector",
    "body": ["simEigen.Matrix:isvector($1)"],
    "description": "simEigen.Matrix:isvector(any m)"
  },
  "simEigen.Matrix:itan": {
    "prefix": "simEigen.Matrix:itan",
    "body": ["simEigen.Matrix:itan()"],
    "description": "simEigen.Matrix:itan()"
  },
  "simEigen.Matrix:item": {
    "prefix": "simEigen.Matrix:item",
    "body": ["simEigen.Matrix:item($1, $2)"],
    "description": "simEigen.Matrix:item(int i, int j)"
  },
  "simEigen.Matrix:itimes": {
    "prefix": "simEigen.Matrix:itimes",
    "body": ["simEigen.Matrix:itimes($1)"],
    "description": "simEigen.Matrix:itimes(dict m)"
  },
  "simEigen.Matrix:kron": {
    "prefix": "simEigen.Matrix:kron",
    "body": ["simEigen.Matrix:kron($1)"],
    "description": "simEigen.Matrix:kron(dict m2)"
  },
  "simEigen.Matrix:linspace": {
    "prefix": "simEigen.Matrix:linspace",
    "body": ["simEigen.Matrix:linspace($1, $2, $3)"],
    "description": "simEigen.Matrix:linspace(float low, float high, int count)"
  },
  "simEigen.Matrix:log": {
    "prefix": "simEigen.Matrix:log",
    "body": ["simEigen.Matrix:log()"],
    "description": "simEigen.Matrix:log()"
  },
  "simEigen.Matrix:log10": {
    "prefix": "simEigen.Matrix:log10",
    "body": ["simEigen.Matrix:log10()"],
    "description": "simEigen.Matrix:log10()"
  },
  "simEigen.Matrix:log2": {
    "prefix": "simEigen.Matrix:log2",
    "body": ["simEigen.Matrix:log2()"],
    "description": "simEigen.Matrix:log2()"
  },
  "simEigen.Matrix:max": {
    "prefix": "simEigen.Matrix:max",
    "body": ["simEigen.Matrix:max($1)"],
    "description": "simEigen.Matrix:max(dict m2)"
  },
  "simEigen.Matrix:maxcoeff": {
    "prefix": "simEigen.Matrix:maxcoeff",
    "body": ["simEigen.Matrix:maxcoeff()"],
    "description": "simEigen.Matrix:maxcoeff()"
  },
  "simEigen.Matrix:min": {
    "prefix": "simEigen.Matrix:min",
    "body": ["simEigen.Matrix:min($1)"],
    "description": "simEigen.Matrix:min(dict m2)"
  },
  "simEigen.Matrix:mod": {
    "prefix": "simEigen.Matrix:mod",
    "body": ["simEigen.Matrix:mod($1)"],
    "description": "simEigen.Matrix:mod(dict m2)"
  },
  "simEigen.Matrix:mul": {
    "prefix": "simEigen.Matrix:mul",
    "body": ["simEigen.Matrix:mul()"],
    "description": "simEigen.Matrix:mul()"
  },
  "simEigen.Matrix:norm": {
    "prefix": "simEigen.Matrix:norm",
    "body": ["simEigen.Matrix:norm()"],
    "description": "simEigen.Matrix:norm()"
  },
  "simEigen.Matrix:normalize": {
    "prefix": "simEigen.Matrix:normalize",
    "body": ["simEigen.Matrix:normalize()"],
    "description": "simEigen.Matrix:normalize()"
  },
  "simEigen.Matrix:normalized": {
    "prefix": "simEigen.Matrix:normalized",
    "body": ["simEigen.Matrix:normalized()"],
    "description": "simEigen.Matrix:normalized()"
  },
  "simEigen.Matrix:pinv": {
    "prefix": "simEigen.Matrix:pinv",
    "body": ["simEigen.Matrix:pinv($1, $2)"],
    "description": "simEigen.Matrix:pinv(dict b, float damping)"
  },
  "simEigen.Matrix:print": {
    "prefix": "simEigen.Matrix:print",
    "body": ["simEigen.Matrix:print()"],
    "description": "simEigen.Matrix:print()"
  },
  "simEigen.Matrix:prod": {
    "prefix": "simEigen.Matrix:prod",
    "body": ["simEigen.Matrix:prod()"],
    "description": "simEigen.Matrix:prod()"
  },
  "simEigen.Matrix:rad": {
    "prefix": "simEigen.Matrix:rad",
    "body": ["simEigen.Matrix:rad()"],
    "description": "simEigen.Matrix:rad()"
  },
  "simEigen.Matrix:reshaped": {
    "prefix": "simEigen.Matrix:reshaped",
    "body": ["simEigen.Matrix:reshaped($1, $2)"],
    "description": "simEigen.Matrix:reshaped(int rows, int cols)"
  },
  "simEigen.Matrix:row": {
    "prefix": "simEigen.Matrix:row",
    "body": ["simEigen.Matrix:row($1)"],
    "description": "simEigen.Matrix:row(int i)"
  },
  "simEigen.Matrix:rowdata": {
    "prefix": "simEigen.Matrix:rowdata",
    "body": ["simEigen.Matrix:rowdata($1)"],
    "description": "simEigen.Matrix:rowdata(int i)"
  },
  "simEigen.Matrix:rows": {
    "prefix": "simEigen.Matrix:rows",
    "body": ["simEigen.Matrix:rows()"],
    "description": "simEigen.Matrix:rows()"
  },
  "simEigen.Matrix:setcol": {
    "prefix": "simEigen.Matrix:setcol",
    "body": ["simEigen.Matrix:setcol($1, $2)"],
    "description": "simEigen.Matrix:setcol(int j, dict col)"
  },
  "simEigen.Matrix:setcoldata": {
    "prefix": "simEigen.Matrix:setcoldata",
    "body": ["simEigen.Matrix:setcoldata($1, $2)"],
    "description": "simEigen.Matrix:setcoldata(int j, float[] data)"
  },
  "simEigen.Matrix:setdata": {
    "prefix": "simEigen.Matrix:setdata",
    "body": ["simEigen.Matrix:setdata($1)"],
    "description": "simEigen.Matrix:setdata(float[] data)"
  },
  "simEigen.Matrix:setitem": {
    "prefix": "simEigen.Matrix:setitem",
    "body": ["simEigen.Matrix:setitem($1, $2, $3)"],
    "description": "simEigen.Matrix:setitem(int i, int j, float[] data)"
  },
  "simEigen.Matrix:setrow": {
    "prefix": "simEigen.Matrix:setrow",
    "body": ["simEigen.Matrix:setrow($1, $2)"],
    "description": "simEigen.Matrix:setrow(int i, dict row)"
  },
  "simEigen.Matrix:setrowdata": {
    "prefix": "simEigen.Matrix:setrowdata",
    "body": ["simEigen.Matrix:setrowdata($1, $2)"],
    "description": "simEigen.Matrix:setrowdata(int i, float[] data)"
  },
  "simEigen.Matrix:sin": {
    "prefix": "simEigen.Matrix:sin",
    "body": ["simEigen.Matrix:sin()"],
    "description": "simEigen.Matrix:sin()"
  },
  "simEigen.Matrix:sqrt": {
    "prefix": "simEigen.Matrix:sqrt",
    "body": ["simEigen.Matrix:sqrt()"],
    "description": "simEigen.Matrix:sqrt()"
  },
  "simEigen.Matrix:sub": {
    "prefix": "simEigen.Matrix:sub",
    "body": ["simEigen.Matrix:sub($1)"],
    "description": "simEigen.Matrix:sub(dict m2)"
  },
  "simEigen.Matrix:svd": {
    "prefix": "simEigen.Matrix:svd",
    "body": ["simEigen.Matrix:svd()"],
    "description": "simEigen.Matrix:svd(bool computeThinU=false, bool computeThinV=false, dict b=None)"
  },
  "simEigen.Matrix:tan": {
    "prefix": "simEigen.Matrix:tan",
    "body": ["simEigen.Matrix:tan()"],
    "description": "simEigen.Matrix:tan()"
  },
  "simEigen.Matrix:times": {
    "prefix": "simEigen.Matrix:times",
    "body": ["simEigen.Matrix:times($1)"],
    "description": "simEigen.Matrix:times(dict m2)"
  },
  "simEigen.Matrix:trace": {
    "prefix": "simEigen.Matrix:trace",
    "body": ["simEigen.Matrix:trace()"],
    "description": "simEigen.Matrix:trace()"
  },
  "simEigen.Matrix:transform": {
    "prefix": "simEigen.Matrix:transform",
    "body": ["simEigen.Matrix:transform($1)"],
    "description": "simEigen.Matrix:transform(dict v)"
  },
  "simEigen.Matrix:transpose": {
    "prefix": "simEigen.Matrix:transpose",
    "body": ["simEigen.Matrix:transpose()"],
    "description": "simEigen.Matrix:transpose()"
  },
  "simEigen.Matrix:transposed": {
    "prefix": "simEigen.Matrix:transposed",
    "body": ["simEigen.Matrix:transposed()"],
    "description": "simEigen.Matrix:transposed()"
  },
  "simEigen.Matrix:vertcat": {
    "prefix": "simEigen.Matrix:vertcat",
    "body": ["simEigen.Matrix:vertcat($1)"],
    "description": "simEigen.Matrix:vertcat(dict m2)"
  },
  "simEigen.Pose": {
    "prefix": "simEigen.Pose",
    "body": ["simEigen.Pose($1, $2)"],
    "description": "simEigen.Pose(dict t, dict q)"
  },
  "simEigen.Pose:data": {
    "prefix": "simEigen.Pose:data",
    "body": ["simEigen.Pose:data()"],
    "description": "simEigen.Pose:data()"
  },
  "simEigen.Pose:fromtransform": {
    "prefix": "simEigen.Pose:fromtransform",
    "body": ["simEigen.Pose:fromtransform($1)"],
    "description": "simEigen.Pose:fromtransform(dict m)"
  },
  "simEigen.Pose:inv": {
    "prefix": "simEigen.Pose:inv",
    "body": ["simEigen.Pose:inv()"],
    "description": "simEigen.Pose:inv()"
  },
  "simEigen.Pose:ispose": {
    "prefix": "simEigen.Pose:ispose",
    "body": ["simEigen.Pose:ispose($1)"],
    "description": "simEigen.Pose:ispose(any m)"
  },
  "simEigen.Pose:mul": {
    "prefix": "simEigen.Pose:mul",
    "body": ["simEigen.Pose:mul($1)"],
    "description": "simEigen.Pose:mul(dict o)"
  },
  "simEigen.Pose:totransform": {
    "prefix": "simEigen.Pose:totransform",
    "body": ["simEigen.Pose:totransform()"],
    "description": "simEigen.Pose:totransform()"
  },
  "simEigen.Quaternion": {
    "prefix": "simEigen.Quaternion",
    "body": ["simEigen.Quaternion()"],
    "description": "simEigen.Quaternion(float[] data={})"
  },
  "simEigen.Quaternion:data": {
    "prefix": "simEigen.Quaternion:data",
    "body": ["simEigen.Quaternion:data()"],
    "description": "simEigen.Quaternion:data()"
  },
  "simEigen.Quaternion:fromaxisangle": {
    "prefix": "simEigen.Quaternion:fromaxisangle",
    "body": ["simEigen.Quaternion:fromaxisangle($1, $2)"],
    "description": "simEigen.Quaternion:fromaxisangle(dict axis, float angle)"
  },
  "simEigen.Quaternion:fromeuler": {
    "prefix": "simEigen.Quaternion:fromeuler",
    "body": ["simEigen.Quaternion:fromeuler($1)"],
    "description": "simEigen.Quaternion:fromeuler(dict euler)"
  },
  "simEigen.Quaternion:fromrotation": {
    "prefix": "simEigen.Quaternion:fromrotation",
    "body": ["simEigen.Quaternion:fromrotation($1)"],
    "description": "simEigen.Quaternion:fromrotation(dict r)"
  },
  "simEigen.Quaternion:imul": {
    "prefix": "simEigen.Quaternion:imul",
    "body": ["simEigen.Quaternion:imul($1)"],
    "description": "simEigen.Quaternion:imul(dict o)"
  },
  "simEigen.Quaternion:inv": {
    "prefix": "simEigen.Quaternion:inv",
    "body": ["simEigen.Quaternion:inv()"],
    "description": "simEigen.Quaternion:inv()"
  },
  "simEigen.Quaternion:isquaternion": {
    "prefix": "simEigen.Quaternion:isquaternion",
    "body": ["simEigen.Quaternion:isquaternion($1)"],
    "description": "simEigen.Quaternion:isquaternion(any m)"
  },
  "simEigen.Quaternion:mul": {
    "prefix": "simEigen.Quaternion:mul",
    "body": ["simEigen.Quaternion:mul($1)"],
    "description": "simEigen.Quaternion:mul(dict o)"
  },
  "simEigen.Quaternion:slerp": {
    "prefix": "simEigen.Quaternion:slerp",
    "body": ["simEigen.Quaternion:slerp($1, $2)"],
    "description": "simEigen.Quaternion:slerp(float t, dict q2)"
  },
  "simEigen.Quaternion:toaxisangle": {
    "prefix": "simEigen.Quaternion:toaxisangle",
    "body": ["simEigen.Quaternion:toaxisangle()"],
    "description": "simEigen.Quaternion:toaxisangle()"
  },
  "simEigen.Quaternion:toeuler": {
    "prefix": "simEigen.Quaternion:toeuler",
    "body": ["simEigen.Quaternion:toeuler()"],
    "description": "simEigen.Quaternion:toeuler()"
  },
  "simEigen.Quaternion:torotation": {
    "prefix": "simEigen.Quaternion:torotation",
    "body": ["simEigen.Quaternion:torotation()"],
    "description": "simEigen.Quaternion:torotation()"
  },
  "simEigen.Vector": {
    "prefix": "simEigen.Vector",
    "body": ["simEigen.Vector($1, $2)"],
    "description": "simEigen.Vector(int size, float[] data)"
  },
  "simEigen.mtxBlock": {
    "prefix": "simEigen.mtxBlock",
    "body": ["simEigen.mtxBlock($1)"],
    "description": "simEigen.mtxBlock(str handle, int i=0, int j=0, int p=-1, int q=-1)"
  },
  "simEigen.mtxBlockAssign": {
    "prefix": "simEigen.mtxBlockAssign",
    "body": ["simEigen.mtxBlockAssign($1, $2)"],
    "description": "simEigen.mtxBlockAssign(str handle, str handle2, int i=0, int j=0, int p=-1, int q=-1)"
  },
  "simEigen.mtxCopy": {
    "prefix": "simEigen.mtxCopy",
    "body": ["simEigen.mtxCopy($1)"],
    "description": "simEigen.mtxCopy(str handle)"
  },
  "simEigen.mtxCross": {
    "prefix": "simEigen.mtxCross",
    "body": ["simEigen.mtxCross($1, $2)"],
    "description": "simEigen.mtxCross(str handle, str handle2)"
  },
  "simEigen.mtxDestroy": {
    "prefix": "simEigen.mtxDestroy",
    "body": ["simEigen.mtxDestroy($1)"],
    "description": "simEigen.mtxDestroy(str handle)"
  },
  "simEigen.mtxDeterminant": {
    "prefix": "simEigen.mtxDeterminant",
    "body": ["simEigen.mtxDeterminant($1)"],
    "description": "simEigen.mtxDeterminant(str handle)"
  },
  "simEigen.mtxDot": {
    "prefix": "simEigen.mtxDot",
    "body": ["simEigen.mtxDot($1, $2)"],
    "description": "simEigen.mtxDot(str handle, str handle2)"
  },
  "simEigen.mtxGetColData": {
    "prefix": "simEigen.mtxGetColData",
    "body": ["simEigen.mtxGetColData($1, $2)"],
    "description": "simEigen.mtxGetColData(str handle, int j)"
  },
  "simEigen.mtxGetData": {
    "prefix": "simEigen.mtxGetData",
    "body": ["simEigen.mtxGetData($1)"],
    "description": "simEigen.mtxGetData(str handle)"
  },
  "simEigen.mtxGetItem": {
    "prefix": "simEigen.mtxGetItem",
    "body": ["simEigen.mtxGetItem($1, $2, $3)"],
    "description": "simEigen.mtxGetItem(str handle, int i, int j)"
  },
  "simEigen.mtxGetRowData": {
    "prefix": "simEigen.mtxGetRowData",
    "body": ["simEigen.mtxGetRowData($1, $2)"],
    "description": "simEigen.mtxGetRowData(str handle, int i)"
  },
  "simEigen.mtxGetSize": {
    "prefix": "simEigen.mtxGetSize",
    "body": ["simEigen.mtxGetSize($1)"],
    "description": "simEigen.mtxGetSize(str handle)"
  },
  "simEigen.mtxHorzCat": {
    "prefix": "simEigen.mtxHorzCat",
    "body": ["simEigen.mtxHorzCat($1)"],
    "description": "simEigen.mtxHorzCat(str[] handles)"
  },
  "simEigen.mtxIMul": {
    "prefix": "simEigen.mtxIMul",
    "body": ["simEigen.mtxIMul($1, $2)"],
    "description": "simEigen.mtxIMul(str handle, str handle2)"
  },
  "simEigen.mtxKron": {
    "prefix": "simEigen.mtxKron",
    "body": ["simEigen.mtxKron($1, $2)"],
    "description": "simEigen.mtxKron(str handle, str handle2)"
  },
  "simEigen.mtxLinSpaced": {
    "prefix": "simEigen.mtxLinSpaced",
    "body": ["simEigen.mtxLinSpaced($1)"],
    "description": "simEigen.mtxLinSpaced(int count, float low=1, float high=None)"
  },
  "simEigen.mtxMaxCoeff": {
    "prefix": "simEigen.mtxMaxCoeff",
    "body": ["simEigen.mtxMaxCoeff($1)"],
    "description": "simEigen.mtxMaxCoeff(str handle)"
  },
  "simEigen.mtxMean": {
    "prefix": "simEigen.mtxMean",
    "body": ["simEigen.mtxMean($1)"],
    "description": "simEigen.mtxMean(str handle)"
  },
  "simEigen.mtxMinCoeff": {
    "prefix": "simEigen.mtxMinCoeff",
    "body": ["simEigen.mtxMinCoeff($1)"],
    "description": "simEigen.mtxMinCoeff(str handle)"
  },
  "simEigen.mtxMul": {
    "prefix": "simEigen.mtxMul",
    "body": ["simEigen.mtxMul($1, $2)"],
    "description": "simEigen.mtxMul(str handle, str handle2)"
  },
  "simEigen.mtxNew": {
    "prefix": "simEigen.mtxNew",
    "body": ["simEigen.mtxNew($1, $2)"],
    "description": "simEigen.mtxNew(int rows, int cols, float[] initialData={})"
  },
  "simEigen.mtxNorm": {
    "prefix": "simEigen.mtxNorm",
    "body": ["simEigen.mtxNorm($1)"],
    "description": "simEigen.mtxNorm(str handle)"
  },
  "simEigen.mtxNormalize": {
    "prefix": "simEigen.mtxNormalize",
    "body": ["simEigen.mtxNormalize($1)"],
    "description": "simEigen.mtxNormalize(str handle)"
  },
  "simEigen.mtxNormalized": {
    "prefix": "simEigen.mtxNormalized",
    "body": ["simEigen.mtxNormalized($1)"],
    "description": "simEigen.mtxNormalized(str handle)"
  },
  "simEigen.mtxOp": {
    "prefix": "simEigen.mtxOp",
    "body": ["simEigen.mtxOp($1, $2)"],
    "description": "simEigen.mtxOp(str handle, int op, str handle2=None, bool inplace=true)"
  },
  "simEigen.mtxOpK": {
    "prefix": "simEigen.mtxOpK",
    "body": ["simEigen.mtxOpK($1, $2, $3)"],
    "description": "simEigen.mtxOpK(str handle, int op, float k, bool inplace=true)"
  },
  "simEigen.mtxPInv": {
    "prefix": "simEigen.mtxPInv",
    "body": ["simEigen.mtxPInv($1)"],
    "description": "simEigen.mtxPInv(str m, str b=None, float damping=0)"
  },
  "simEigen.mtxProd": {
    "prefix": "simEigen.mtxProd",
    "body": ["simEigen.mtxProd($1)"],
    "description": "simEigen.mtxProd(str handle)"
  },
  "simEigen.mtxReshaped": {
    "prefix": "simEigen.mtxReshaped",
    "body": ["simEigen.mtxReshaped($1, $2, $3)"],
    "description": "simEigen.mtxReshaped(str handle, int rows, int cols)"
  },
  "simEigen.mtxSVD": {
    "prefix": "simEigen.mtxSVD",
    "body": ["simEigen.mtxSVD($1)"],
    "description": "simEigen.mtxSVD(str m, bool computeThinU=true, bool computeThinV=true, str b=None)"
  },
  "simEigen.mtxSetColData": {
    "prefix": "simEigen.mtxSetColData",
    "body": ["simEigen.mtxSetColData($1, $2, $3)"],
    "description": "simEigen.mtxSetColData(str handle, int j, float[] data)"
  },
  "simEigen.mtxSetData": {
    "prefix": "simEigen.mtxSetData",
    "body": ["simEigen.mtxSetData($1, $2)"],
    "description": "simEigen.mtxSetData(str handle, float[] data)"
  },
  "simEigen.mtxSetItem": {
    "prefix": "simEigen.mtxSetItem",
    "body": ["simEigen.mtxSetItem($1, $2, $3, $4)"],
    "description": "simEigen.mtxSetItem(str handle, int i, int j, float data)"
  },
  "simEigen.mtxSetRowData": {
    "prefix": "simEigen.mtxSetRowData",
    "body": ["simEigen.mtxSetRowData($1, $2, $3)"],
    "description": "simEigen.mtxSetRowData(str handle, int i, float[] data)"
  },
  "simEigen.mtxSquaredNorm": {
    "prefix": "simEigen.mtxSquaredNorm",
    "body": ["simEigen.mtxSquaredNorm($1)"],
    "description": "simEigen.mtxSquaredNorm(str handle)"
  },
  "simEigen.mtxSum": {
    "prefix": "simEigen.mtxSum",
    "body": ["simEigen.mtxSum($1)"],
    "description": "simEigen.mtxSum(str handle)"
  },
  "simEigen.mtxTrace": {
    "prefix": "simEigen.mtxTrace",
    "body": ["simEigen.mtxTrace($1)"],
    "description": "simEigen.mtxTrace(str handle)"
  },
  "simEigen.mtxTranspose": {
    "prefix": "simEigen.mtxTranspose",
    "body": ["simEigen.mtxTranspose($1)"],
    "description": "simEigen.mtxTranspose(str handle)"
  },
  "simEigen.mtxTransposed": {
    "prefix": "simEigen.mtxTransposed",
    "body": ["simEigen.mtxTransposed($1)"],
    "description": "simEigen.mtxTransposed(str handle)"
  },
  "simEigen.mtxVertCat": {
    "prefix": "simEigen.mtxVertCat",
    "body": ["simEigen.mtxVertCat($1)"],
    "description": "simEigen.mtxVertCat(str[] handles)"
  },
  "simEigen.pinv": {
    "prefix": "simEigen.pinv",
    "body": ["simEigen.pinv($1)"],
    "description": "simEigen.pinv(grid m, grid b=None, float damping=0)"
  },
  "simEigen.quatDestroy": {
    "prefix": "simEigen.quatDestroy",
    "body": ["simEigen.quatDestroy($1)"],
    "description": "simEigen.quatDestroy(str handle)"
  },
  "simEigen.quatFromAxisAngle": {
    "prefix": "simEigen.quatFromAxisAngle",
    "body": ["simEigen.quatFromAxisAngle($1, $2)"],
    "description": "simEigen.quatFromAxisAngle(str axisHandle, float angle)"
  },
  "simEigen.quatFromEuler": {
    "prefix": "simEigen.quatFromEuler",
    "body": ["simEigen.quatFromEuler($1)"],
    "description": "simEigen.quatFromEuler(str handle)"
  },
  "simEigen.quatFromRotation": {
    "prefix": "simEigen.quatFromRotation",
    "body": ["simEigen.quatFromRotation($1)"],
    "description": "simEigen.quatFromRotation(str handle)"
  },
  "simEigen.quatGetData": {
    "prefix": "simEigen.quatGetData",
    "body": ["simEigen.quatGetData($1)"],
    "description": "simEigen.quatGetData(str handle)"
  },
  "simEigen.quatInv": {
    "prefix": "simEigen.quatInv",
    "body": ["simEigen.quatInv($1)"],
    "description": "simEigen.quatInv(str handle)"
  },
  "simEigen.quatMulQuat": {
    "prefix": "simEigen.quatMulQuat",
    "body": ["simEigen.quatMulQuat($1, $2)"],
    "description": "simEigen.quatMulQuat(str handle, str handle2, bool inplace=true)"
  },
  "simEigen.quatMulVec": {
    "prefix": "simEigen.quatMulVec",
    "body": ["simEigen.quatMulVec($1, $2)"],
    "description": "simEigen.quatMulVec(str handle, str vectorHandle)"
  },
  "simEigen.quatNew": {
    "prefix": "simEigen.quatNew",
    "body": ["simEigen.quatNew($1, $2, $3)"],
    "description": "simEigen.quatNew(list initialData={0, 0, 0, 1})"
  },
  "simEigen.quatSLERP": {
    "prefix": "simEigen.quatSLERP",
    "body": ["simEigen.quatSLERP($1, $2, $3)"],
    "description": "simEigen.quatSLERP(str handle, str handle2, float t)"
  },
  "simEigen.quatSetData": {
    "prefix": "simEigen.quatSetData",
    "body": ["simEigen.quatSetData($1, $2)"],
    "description": "simEigen.quatSetData(str handle, list data)"
  },
  "simEigen.quatToAxisAngle": {
    "prefix": "simEigen.quatToAxisAngle",
    "body": ["simEigen.quatToAxisAngle($1)"],
    "description": "simEigen.quatToAxisAngle(str handle)"
  },
  "simEigen.quatToEuler": {
    "prefix": "simEigen.quatToEuler",
    "body": ["simEigen.quatToEuler($1)"],
    "description": "simEigen.quatToEuler(str handle)"
  },
  "simEigen.quatToRotation": {
    "prefix": "simEigen.quatToRotation",
    "body": ["simEigen.quatToRotation($1)"],
    "description": "simEigen.quatToRotation(str handle)"
  },
  "simEigen.svd": {
    "prefix": "simEigen.svd",
    "body": ["simEigen.svd($1)"],
    "description": "simEigen.svd(grid m, bool computeThinU=true, bool computeThinV=true, grid b=None)"
  },
  "simEvents.addChildrenMonitor": {
    "prefix": "simEvents.addChildrenMonitor",
    "body": ["simEvents.addChildrenMonitor($1, $2)"],
    "description": "simEvents.addChildrenMonitor(str callback, int parentHandle)"
  },
  "simEvents.addProbe": {
    "prefix": "simEvents.addProbe",
    "body": ["simEvents.addProbe($1, $2)"],
    "description": "simEvents.addProbe(str callback, any condition)"
  },
  "simEvents.removeProbe": {
    "prefix": "simEvents.removeProbe",
    "body": ["simEvents.removeProbe($1)"],
    "description": "simEvents.removeProbe(str probeHandle)"
  },
  "simGLTF.animationFrameCount": {
    "prefix": "simGLTF.animationFrameCount",
    "body": ["simGLTF.animationFrameCount()"],
    "description": "simGLTF.animationFrameCount()"
  },
  "simGLTF.clear": {
    "prefix": "simGLTF.clear",
    "body": ["simGLTF.clear()"],
    "description": "simGLTF.clear()"
  },
  "simGLTF.exportAllObjects": {
    "prefix": "simGLTF.exportAllObjects",
    "body": ["simGLTF.exportAllObjects()"],
    "description": "simGLTF.exportAllObjects()"
  },
  "simGLTF.exportAnimation": {
    "prefix": "simGLTF.exportAnimation",
    "body": ["simGLTF.exportAnimation()"],
    "description": "simGLTF.exportAnimation()"
  },
  "simGLTF.exportObject": {
    "prefix": "simGLTF.exportObject",
    "body": ["simGLTF.exportObject($1)"],
    "description": "simGLTF.exportObject(int objectHandle)"
  },
  "simGLTF.exportObjects": {
    "prefix": "simGLTF.exportObjects",
    "body": ["simGLTF.exportObjects($1)"],
    "description": "simGLTF.exportObjects(int[] objectHandles)"
  },
  "simGLTF.exportSelectedObjects": {
    "prefix": "simGLTF.exportSelectedObjects",
    "body": ["simGLTF.exportSelectedObjects()"],
    "description": "simGLTF.exportSelectedObjects()"
  },
  "simGLTF.exportShape": {
    "prefix": "simGLTF.exportShape",
    "body": ["simGLTF.exportShape($1)"],
    "description": "simGLTF.exportShape(int shapeHandle, int parentHandle=-1, int parentNodeIndex=0)"
  },
  "simGLTF.getExportTextureFormat": {
    "prefix": "simGLTF.getExportTextureFormat",
    "body": ["simGLTF.getExportTextureFormat()"],
    "description": "simGLTF.getExportTextureFormat()"
  },
  "simGLTF.loadASCII": {
    "prefix": "simGLTF.loadASCII",
    "body": ["simGLTF.loadASCII($1)"],
    "description": "simGLTF.loadASCII(str filepath)"
  },
  "simGLTF.loadBinary": {
    "prefix": "simGLTF.loadBinary",
    "body": ["simGLTF.loadBinary($1)"],
    "description": "simGLTF.loadBinary(str filepath)"
  },
  "simGLTF.recordAnimation": {
    "prefix": "simGLTF.recordAnimation",
    "body": ["simGLTF.recordAnimation($1)"],
    "description": "simGLTF.recordAnimation(bool enable)"
  },
  "simGLTF.saveASCII": {
    "prefix": "simGLTF.saveASCII",
    "body": ["simGLTF.saveASCII($1)"],
    "description": "simGLTF.saveASCII(str filepath)"
  },
  "simGLTF.saveBinary": {
    "prefix": "simGLTF.saveBinary",
    "body": ["simGLTF.saveBinary($1)"],
    "description": "simGLTF.saveBinary(str filepath)"
  },
  "simGLTF.serialize": {
    "prefix": "simGLTF.serialize",
    "body": ["simGLTF.serialize()"],
    "description": "simGLTF.serialize()"
  },
  "simGLTF.setExportTextureFormat": {
    "prefix": "simGLTF.setExportTextureFormat",
    "body": ["simGLTF.setExportTextureFormat($1)"],
    "description": "simGLTF.setExportTextureFormat(int textureFormat)"
  },
  "simGeom.copyMesh": {
    "prefix": "simGeom.copyMesh",
    "body": ["simGeom.copyMesh($1)"],
    "description": "simGeom.copyMesh(int meshHandle)"
  },
  "simGeom.copyOctree": {
    "prefix": "simGeom.copyOctree",
    "body": ["simGeom.copyOctree($1)"],
    "description": "simGeom.copyOctree(int octreeHandle)"
  },
  "simGeom.copyPtcloud": {
    "prefix": "simGeom.copyPtcloud",
    "body": ["simGeom.copyPtcloud($1)"],
    "description": "simGeom.copyPtcloud(int ptcloudHandle)"
  },
  "simGeom.createMesh": {
    "prefix": "simGeom.createMesh",
    "body": ["simGeom.createMesh($1, $2)"],
    "description": "simGeom.createMesh(float[] vertices, int[] indices, list meshOriginPos=None, list meshOriginQuaternion=None, float maxTriangleEdgeLength=0.3, int maxTriangleCountInLeafObb=8)"
  },
  "simGeom.createMeshFromSerializationData": {
    "prefix": "simGeom.createMeshFromSerializationData",
    "body": ["simGeom.createMeshFromSerializationData($1)"],
    "description": "simGeom.createMeshFromSerializationData(str data)"
  },
  "simGeom.createOctreeFromColorPoints": {
    "prefix": "simGeom.createOctreeFromColorPoints",
    "body": ["simGeom.createOctreeFromColorPoints($1)"],
    "description": "simGeom.createOctreeFromColorPoints(float[] points, list octreeOriginPos=None, list octreeOriginQuaternion=None, float maxCellSize=0.05, float[] colors=None, int[] userData=None)"
  },
  "simGeom.createOctreeFromMesh": {
    "prefix": "simGeom.createOctreeFromMesh",
    "body": ["simGeom.createOctreeFromMesh($1, $2, $3, $4, $5)"],
    "description": "simGeom.createOctreeFromMesh(int meshHandle, list meshPos, list meshQuaternion, list octreeOriginPos=None, list octreeOriginQuaternion=None, float maxCellSize=0.05, list pointColor={0, 0, 0}, int userData=0)"
  },
  "simGeom.createOctreeFromOctree": {
    "prefix": "simGeom.createOctreeFromOctree",
    "body": ["simGeom.createOctreeFromOctree($1, $2, $3, $4, $5)"],
    "description": "simGeom.createOctreeFromOctree(int octreeHandle, list octreePos, list octreeQuaternion, list newOctreeOriginPos=None, list newOctreeOriginQuaternion=None, float maxCellSize=0.05, list pointColor={0, 0, 0}, int userData=0)"
  },
  "simGeom.createOctreeFromPoints": {
    "prefix": "simGeom.createOctreeFromPoints",
    "body": ["simGeom.createOctreeFromPoints($1, $2, $3)"],
    "description": "simGeom.createOctreeFromPoints(float[] points, list octreeOriginPos=None, list octreeOriginQuaternion=None, float maxCellSize=0.05, list pointColor={0, 0, 0}, int userData=0)"
  },
  "simGeom.createOctreeFromSerializationData": {
    "prefix": "simGeom.createOctreeFromSerializationData",
    "body": ["simGeom.createOctreeFromSerializationData($1)"],
    "description": "simGeom.createOctreeFromSerializationData(str data)"
  },
  "simGeom.createPtcloudFromColorPoints": {
    "prefix": "simGeom.createPtcloudFromColorPoints",
    "body": ["simGeom.createPtcloudFromColorPoints($1)"],
    "description": "simGeom.createPtcloudFromColorPoints(float[] points, list octreeOriginPos=None, list octreeOriginQuaternion=None, float maxCellSize=0.05, int maxPtsInCell=20, float[] colors=None, float proximityTolerance=0.005)"
  },
  "simGeom.createPtcloudFromPoints": {
    "prefix": "simGeom.createPtcloudFromPoints",
    "body": ["simGeom.createPtcloudFromPoints($1, $2, $3)"],
    "description": "simGeom.createPtcloudFromPoints(float[] points, list octreeOriginPos=None, list octreeOriginQuaternion=None, float maxCellSize=0.05, int maxPtsInCell=20, list pointColor={0, 0, 0}, float proximityTolerance=0.005)"
  },
  "simGeom.createPtcloudFromSerializationData": {
    "prefix": "simGeom.createPtcloudFromSerializationData",
    "body": ["simGeom.createPtcloudFromSerializationData($1)"],
    "description": "simGeom.createPtcloudFromSerializationData(str data)"
  },
  "simGeom.destroyMesh": {
    "prefix": "simGeom.destroyMesh",
    "body": ["simGeom.destroyMesh($1)"],
    "description": "simGeom.destroyMesh(int meshHandle)"
  },
  "simGeom.destroyOctree": {
    "prefix": "simGeom.destroyOctree",
    "body": ["simGeom.destroyOctree($1)"],
    "description": "simGeom.destroyOctree(int octreeHandle)"
  },
  "simGeom.destroyPtcloud": {
    "prefix": "simGeom.destroyPtcloud",
    "body": ["simGeom.destroyPtcloud($1)"],
    "description": "simGeom.destroyPtcloud(int ptcloudHandle)"
  },
  "simGeom.getBoxBoxDistance": {
    "prefix": "simGeom.getBoxBoxDistance",
    "body": ["simGeom.getBoxBoxDistance($1, $2, $3, $4, $5, $6, $7)"],
    "description": "simGeom.getBoxBoxDistance(list box1Pos, list box1Quaternion, list box1HalfSize, list box2Pos, list box2Quaternion, list box2HalfSize, bool boxesAreSolid)"
  },
  "simGeom.getBoxPointDistance": {
    "prefix": "simGeom.getBoxPointDistance",
    "body": ["simGeom.getBoxPointDistance($1, $2, $3, $4, $5)"],
    "description": "simGeom.getBoxPointDistance(list boxPos, list boxQuaternion, list boxHalfSize, bool boxIsSolid, list point)"
  },
  "simGeom.getBoxSegmentDistance": {
    "prefix": "simGeom.getBoxSegmentDistance",
    "body": ["simGeom.getBoxSegmentDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getBoxSegmentDistance(list boxPos, list boxQuaternion, list boxHalfSize, bool boxIsSolid, list segmentPt1, list segmentPt2, bool altRoutine=false)"
  },
  "simGeom.getBoxTriangleDistance": {
    "prefix": "simGeom.getBoxTriangleDistance",
    "body": ["simGeom.getBoxTriangleDistance($1, $2, $3, $4, $5, $6, $7)"],
    "description": "simGeom.getBoxTriangleDistance(list boxPos, list boxQuaternion, list boxHalfSize, bool boxIsSolid, list triPt1, list triPt2, list triPt3, bool altRoutine=false)"
  },
  "simGeom.getMeshMeshCollision": {
    "prefix": "simGeom.getMeshMeshCollision",
    "body": ["simGeom.getMeshMeshCollision($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshMeshCollision(int mesh1Handle, list mesh1Pos, list mesh1Quaternion, int mesh2Handle, list mesh2Pos, list mesh2Quaternion, list cache=None, bool returnIntersections=false)"
  },
  "simGeom.getMeshMeshDistance": {
    "prefix": "simGeom.getMeshMeshDistance",
    "body": ["simGeom.getMeshMeshDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshMeshDistance(int mesh1Handle, list mesh1Pos, list mesh1Quaternion, int mesh2Handle, list mesh2Pos, list mesh2Quaternion, float distanceThreshold=0, list cache=None)"
  },
  "simGeom.getMeshOctreeCollision": {
    "prefix": "simGeom.getMeshOctreeCollision",
    "body": ["simGeom.getMeshOctreeCollision($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshOctreeCollision(int meshHandle, list meshPos, list meshQuaternion, int octreeHandle, list octreePos, list octreeQuaternion, list cache=None)"
  },
  "simGeom.getMeshOctreeDistance": {
    "prefix": "simGeom.getMeshOctreeDistance",
    "body": ["simGeom.getMeshOctreeDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshOctreeDistance(int meshHandle, list meshPos, list meshQuaternion, int octreeHandle, list octreePos, list octreeQuaternion, float distanceThreshold=0, list cache=None)"
  },
  "simGeom.getMeshPointDistance": {
    "prefix": "simGeom.getMeshPointDistance",
    "body": ["simGeom.getMeshPointDistance($1, $2, $3, $4)"],
    "description": "simGeom.getMeshPointDistance(int meshHandle, list meshPos, list meshQuaternion, list point, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getMeshPtcloudDistance": {
    "prefix": "simGeom.getMeshPtcloudDistance",
    "body": ["simGeom.getMeshPtcloudDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshPtcloudDistance(int meshHandle, list meshPos, list meshQuaternion, int ptcloudHandle, list ptcloudPos, list ptcloudQuaternion, float distanceThreshold=0, list cache=None)"
  },
  "simGeom.getMeshSegmentCollision": {
    "prefix": "simGeom.getMeshSegmentCollision",
    "body": ["simGeom.getMeshSegmentCollision($1, $2, $3, $4, $5)"],
    "description": "simGeom.getMeshSegmentCollision(int meshHandle, list meshPos, list meshQuaternion, list segmentPt1, list segmentPt2, int cache=-1, bool returnIntersections=false)"
  },
  "simGeom.getMeshSegmentDistance": {
    "prefix": "simGeom.getMeshSegmentDistance",
    "body": ["simGeom.getMeshSegmentDistance($1, $2, $3, $4, $5)"],
    "description": "simGeom.getMeshSegmentDistance(int meshHandle, list meshPos, list meshQuaternion, list segmentPt1, list segmentPt2, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getMeshSerializationData": {
    "prefix": "simGeom.getMeshSerializationData",
    "body": ["simGeom.getMeshSerializationData($1)"],
    "description": "simGeom.getMeshSerializationData(int meshHandle)"
  },
  "simGeom.getMeshTriangleCollision": {
    "prefix": "simGeom.getMeshTriangleCollision",
    "body": ["simGeom.getMeshTriangleCollision($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshTriangleCollision(int meshHandle, list meshPos, list meshQuaternion, list triPt1, list triPt2, list triPt3, int cache=-1, bool returnIntersections=false)"
  },
  "simGeom.getMeshTriangleDistance": {
    "prefix": "simGeom.getMeshTriangleDistance",
    "body": ["simGeom.getMeshTriangleDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getMeshTriangleDistance(int meshHandle, list meshPos, list meshQuaternion, list triPt1, list triPt2, list triPt3, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getOctreeOctreeCollision": {
    "prefix": "simGeom.getOctreeOctreeCollision",
    "body": ["simGeom.getOctreeOctreeCollision($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getOctreeOctreeCollision(int octree1Handle, list octree1Pos, list octree1Quaternion, int octree2Handle, list octree2Pos, list octree2Quaternion, list cache=None)"
  },
  "simGeom.getOctreeOctreeDistance": {
    "prefix": "simGeom.getOctreeOctreeDistance",
    "body": ["simGeom.getOctreeOctreeDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getOctreeOctreeDistance(int octree1Handle, list octree1Pos, list octree1Quaternion, int octree2Handle, list octree2Pos, list octree2Quaternion, float distanceThreshold=0, list cache=None)"
  },
  "simGeom.getOctreePointCollision": {
    "prefix": "simGeom.getOctreePointCollision",
    "body": ["simGeom.getOctreePointCollision($1, $2, $3, $4)"],
    "description": "simGeom.getOctreePointCollision(int octreeHandle, list octreePos, list octreeQuaternion, list point, int cache=-1)"
  },
  "simGeom.getOctreePointDistance": {
    "prefix": "simGeom.getOctreePointDistance",
    "body": ["simGeom.getOctreePointDistance($1, $2, $3, $4)"],
    "description": "simGeom.getOctreePointDistance(int octreeHandle, list octreePos, list octreeQuaternion, list point, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getOctreePtcloudCollision": {
    "prefix": "simGeom.getOctreePtcloudCollision",
    "body": ["simGeom.getOctreePtcloudCollision($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getOctreePtcloudCollision(int octreeHandle, list octreePos, list octreeQuaternion, int ptcloudHandle, list ptcloudPos, list ptcloudQuaternion, list cache=None)"
  },
  "simGeom.getOctreePtcloudDistance": {
    "prefix": "simGeom.getOctreePtcloudDistance",
    "body": ["simGeom.getOctreePtcloudDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getOctreePtcloudDistance(int octreeHandle, list octreePos, list octreeQuaternion, int ptcloudHandle, list ptcloudPos, list ptcloudQuaternion, float distanceThreshold=0, list cache=None)"
  },
  "simGeom.getOctreeSegmentCollision": {
    "prefix": "simGeom.getOctreeSegmentCollision",
    "body": ["simGeom.getOctreeSegmentCollision($1, $2, $3, $4, $5)"],
    "description": "simGeom.getOctreeSegmentCollision(int octreeHandle, list octreePos, list octreeQuaternion, list segPt1, list segPt2, int cache=-1)"
  },
  "simGeom.getOctreeSegmentDistance": {
    "prefix": "simGeom.getOctreeSegmentDistance",
    "body": ["simGeom.getOctreeSegmentDistance($1, $2, $3, $4, $5)"],
    "description": "simGeom.getOctreeSegmentDistance(int octreeHandle, list octreePos, list octreeQuaternion, list segPt1, list segPt2, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getOctreeSerializationData": {
    "prefix": "simGeom.getOctreeSerializationData",
    "body": ["simGeom.getOctreeSerializationData($1)"],
    "description": "simGeom.getOctreeSerializationData(int octreeHandle)"
  },
  "simGeom.getOctreeTriangleCollision": {
    "prefix": "simGeom.getOctreeTriangleCollision",
    "body": ["simGeom.getOctreeTriangleCollision($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getOctreeTriangleCollision(int octreeHandle, list octreePos, list octreeQuaternion, list triPt1, list triPt2, list triPt3, int cache=-1)"
  },
  "simGeom.getOctreeTriangleDistance": {
    "prefix": "simGeom.getOctreeTriangleDistance",
    "body": ["simGeom.getOctreeTriangleDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getOctreeTriangleDistance(int octreeHandle, list octreePos, list octreeQuaternion, list triPt1, list triPt2, list triPt3, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getOctreeVoxels": {
    "prefix": "simGeom.getOctreeVoxels",
    "body": ["simGeom.getOctreeVoxels($1)"],
    "description": "simGeom.getOctreeVoxels(int octreeHandle)"
  },
  "simGeom.getPtcloudPointDistance": {
    "prefix": "simGeom.getPtcloudPointDistance",
    "body": ["simGeom.getPtcloudPointDistance($1, $2, $3, $4)"],
    "description": "simGeom.getPtcloudPointDistance(int ptcloudHandle, list ptcloudPos, list ptcloudQuaternion, list point, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getPtcloudPoints": {
    "prefix": "simGeom.getPtcloudPoints",
    "body": ["simGeom.getPtcloudPoints($1)"],
    "description": "simGeom.getPtcloudPoints(int ptcloudHandle, float subsetProportion=1.0)"
  },
  "simGeom.getPtcloudPtcloudDistance": {
    "prefix": "simGeom.getPtcloudPtcloudDistance",
    "body": ["simGeom.getPtcloudPtcloudDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getPtcloudPtcloudDistance(int ptcloud1Handle, list ptcloud1Pos, list ptcloud1Quaternion, int ptcloud2Handle, list ptcloud2Pos, list ptcloud2Quaternion, float distanceThreshold=0, list cache=None)"
  },
  "simGeom.getPtcloudSegmentDistance": {
    "prefix": "simGeom.getPtcloudSegmentDistance",
    "body": ["simGeom.getPtcloudSegmentDistance($1, $2, $3, $4, $5)"],
    "description": "simGeom.getPtcloudSegmentDistance(int ptcloudHandle, list ptcloudPos, list ptcloudQuaternion, list segPt1, list segPt2, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getPtcloudSerializationData": {
    "prefix": "simGeom.getPtcloudSerializationData",
    "body": ["simGeom.getPtcloudSerializationData($1)"],
    "description": "simGeom.getPtcloudSerializationData(int octreeHandle)"
  },
  "simGeom.getPtcloudTriangleDistance": {
    "prefix": "simGeom.getPtcloudTriangleDistance",
    "body": ["simGeom.getPtcloudTriangleDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getPtcloudTriangleDistance(int ptcloudHandle, list ptcloudPos, list ptcloudQuaternion, list triPt1, list triPt2, list triPt3, float distanceThreshold=0, int cache=-1)"
  },
  "simGeom.getSegmentPointDistance": {
    "prefix": "simGeom.getSegmentPointDistance",
    "body": ["simGeom.getSegmentPointDistance($1, $2, $3)"],
    "description": "simGeom.getSegmentPointDistance(list segmentPt1, list segmentPt2, list point)"
  },
  "simGeom.getSegmentSegmentDistance": {
    "prefix": "simGeom.getSegmentSegmentDistance",
    "body": ["simGeom.getSegmentSegmentDistance($1, $2, $3, $4)"],
    "description": "simGeom.getSegmentSegmentDistance(list segment1Pt1, list segment1Pt2, list segment2Pt1, list segment2Pt2)"
  },
  "simGeom.getTransformedPoints": {
    "prefix": "simGeom.getTransformedPoints",
    "body": ["simGeom.getTransformedPoints($1, $2, $3)"],
    "description": "simGeom.getTransformedPoints(float[] points, list position, list quaternion)"
  },
  "simGeom.getTrianglePointDistance": {
    "prefix": "simGeom.getTrianglePointDistance",
    "body": ["simGeom.getTrianglePointDistance($1, $2, $3, $4)"],
    "description": "simGeom.getTrianglePointDistance(list triPt1, list triPt2, list triPt3, list point)"
  },
  "simGeom.getTriangleSegmentDistance": {
    "prefix": "simGeom.getTriangleSegmentDistance",
    "body": ["simGeom.getTriangleSegmentDistance($1, $2, $3, $4, $5)"],
    "description": "simGeom.getTriangleSegmentDistance(list triPt1, list triPt2, list triPt3, list segmentPt1, list segmentPt2)"
  },
  "simGeom.getTriangleTriangleDistance": {
    "prefix": "simGeom.getTriangleTriangleDistance",
    "body": ["simGeom.getTriangleTriangleDistance($1, $2, $3, $4, $5, $6)"],
    "description": "simGeom.getTriangleTriangleDistance(list tri1Pt1, list tri1Pt2, list tri1Pt3, list tri2Pt1, list tri2Pt2, list tri2Pt3)"
  },
  "simGeom.scaleMesh": {
    "prefix": "simGeom.scaleMesh",
    "body": ["simGeom.scaleMesh($1, $2)"],
    "description": "simGeom.scaleMesh(int meshHandle, float scaleFactor)"
  },
  "simGeom.scaleOctree": {
    "prefix": "simGeom.scaleOctree",
    "body": ["simGeom.scaleOctree($1, $2)"],
    "description": "simGeom.scaleOctree(int octreeHandle, float scaleFactor)"
  },
  "simGeom.scalePtcloud": {
    "prefix": "simGeom.scalePtcloud",
    "body": ["simGeom.scalePtcloud($1, $2)"],
    "description": "simGeom.scalePtcloud(int ptcloudHandle, float scaleFactor)"
  },
  "simICP.match": {
    "prefix": "simICP.match",
    "body": ["simICP.match($1, $2)"],
    "description": "simICP.match(int model_handle, int template_handle, float outlier_treshold=-1)"
  },
  "simICP.matchToShape": {
    "prefix": "simICP.matchToShape",
    "body": ["simICP.matchToShape($1, $2)"],
    "description": "simICP.matchToShape(int model_handle, int template_handle, float outlier_treshold=-1)"
  },
  "simIGL.adaptiveUpsample": {
    "prefix": "simIGL.adaptiveUpsample",
    "body": ["simIGL.adaptiveUpsample($1, $2)"],
    "description": "simIGL.adaptiveUpsample(dict m, float threshold)"
  },
  "simIGL.barycenter": {
    "prefix": "simIGL.barycenter",
    "body": ["simIGL.barycenter($1, $2)"],
    "description": "simIGL.barycenter(grid v, grid f)"
  },
  "simIGL.centroid": {
    "prefix": "simIGL.centroid",
    "body": ["simIGL.centroid($1)"],
    "description": "simIGL.centroid(dict m)"
  },
  "simIGL.closestFacet": {
    "prefix": "simIGL.closestFacet",
    "body": ["simIGL.closestFacet($1, $2, $3, $4, $5)"],
    "description": "simIGL.closestFacet(dict m, grid points, grid edict, grid uec, grid uee, int[] indices={})"
  },
  "simIGL.convexHull": {
    "prefix": "simIGL.convexHull",
    "body": ["simIGL.convexHull($1)"],
    "description": "simIGL.convexHull(float[] points)"
  },
  "simIGL.convexHullShape": {
    "prefix": "simIGL.convexHullShape",
    "body": ["simIGL.convexHullShape($1)"],
    "description": "simIGL.convexHullShape(int[] handles)"
  },
  "simIGL.drawMesh": {
    "prefix": "simIGL.drawMesh",
    "body": ["simIGL.drawMesh($1, $2)"],
    "description": "simIGL.drawMesh(dict mesh, dict opts)"
  },
  "simIGL.exactGeodesic": {
    "prefix": "simIGL.exactGeodesic",
    "body": ["simIGL.exactGeodesic($1, $2, $3, $4, $5)"],
    "description": "simIGL.exactGeodesic(dict m, int[] vs, int[] fs, int[] vt, int[] ft)"
  },
  "simIGL.faceCentroids": {
    "prefix": "simIGL.faceCentroids",
    "body": ["simIGL.faceCentroids($1)"],
    "description": "simIGL.faceCentroids(dict m)"
  },
  "simIGL.getMesh": {
    "prefix": "simIGL.getMesh",
    "body": ["simIGL.getMesh($1)"],
    "description": "simIGL.getMesh(int h, dict options={})"
  },
  "simIGL.intersectWithHalfSpace": {
    "prefix": "simIGL.intersectWithHalfSpace",
    "body": ["simIGL.intersectWithHalfSpace($1, $2, $3)"],
    "description": "simIGL.intersectWithHalfSpace(dict m, list pt, list n)"
  },
  "simIGL.meshBoolean": {
    "prefix": "simIGL.meshBoolean",
    "body": ["simIGL.meshBoolean($1, $2, $3)"],
    "description": "simIGL.meshBoolean(dict a, dict b, int op)"
  },
  "simIGL.meshBooleanShape": {
    "prefix": "simIGL.meshBooleanShape",
    "body": ["simIGL.meshBooleanShape($1, $2)"],
    "description": "simIGL.meshBooleanShape(int[] handles, int op)"
  },
  "simIGL.meshOctreeIntersection": {
    "prefix": "simIGL.meshOctreeIntersection",
    "body": ["simIGL.meshOctreeIntersection($1, $2)"],
    "description": "simIGL.meshOctreeIntersection(dict m, int oc)"
  },
  "simIGL.pointNormalToMatrix": {
    "prefix": "simIGL.pointNormalToMatrix",
    "body": ["simIGL.pointNormalToMatrix($1, $2)"],
    "description": "simIGL.pointNormalToMatrix(dict point, dict normal)"
  },
  "simIGL.randomPointsOnMesh": {
    "prefix": "simIGL.randomPointsOnMesh",
    "body": ["simIGL.randomPointsOnMesh($1, $2)"],
    "description": "simIGL.randomPointsOnMesh(int n, dict m, bool convertToWorldCoords=false)"
  },
  "simIGL.rayTest": {
    "prefix": "simIGL.rayTest",
    "body": ["simIGL.rayTest($1, $2)"],
    "description": "simIGL.rayTest(dict origin, dict points, int proximitySensorHandle=NIL)"
  },
  "simIGL.sweptVolume": {
    "prefix": "simIGL.sweptVolume",
    "body": ["simIGL.sweptVolume($1, $2, $3, $4)"],
    "description": "simIGL.sweptVolume(dict m, str transformFunc, int timeSteps, int gridSize, float isoLevel=0)"
  },
  "simIGL.tetrahedralize": {
    "prefix": "simIGL.tetrahedralize",
    "body": ["simIGL.tetrahedralize($1)"],
    "description": "simIGL.tetrahedralize(dict m, str switches=\"\")"
  },
  "simIGL.uniqueEdgeMap": {
    "prefix": "simIGL.uniqueEdgeMap",
    "body": ["simIGL.uniqueEdgeMap($1)"],
    "description": "simIGL.uniqueEdgeMap(grid f)"
  },
  "simIGL.upsample": {
    "prefix": "simIGL.upsample",
    "body": ["simIGL.upsample($1)"],
    "description": "simIGL.upsample(dict m, int n=1)"
  },
  "simIGL.volume": {
    "prefix": "simIGL.volume",
    "body": ["simIGL.volume($1)"],
    "description": "simIGL.volume(dict m)"
  },
  "simIK.addElement": {
    "prefix": "simIK.addElement",
    "body": ["simIK.addElement($1, $2, $3)"],
    "description": "simIK.addElement(int environmentHandle, int ikGroupHandle, int tipDummyHandle)"
  },
  "simIK.addElementFromScene": {
    "prefix": "simIK.addElementFromScene",
    "body": ["simIK.addElementFromScene($1, $2, $3, $4, $5, $6)"],
    "description": "simIK.addElementFromScene(int environmentHandle, int ikGroup, int baseHandle, int tipHandle, int targetHandle, int constraints)"
  },
  "simIK.computeGroupJacobian": {
    "prefix": "simIK.computeGroupJacobian",
    "body": ["simIK.computeGroupJacobian($1, $2)"],
    "description": "simIK.computeGroupJacobian(int environmentHandle, int ikGroupHandle)"
  },
  "simIK.computeJacobian": {
    "prefix": "simIK.computeJacobian",
    "body": ["simIK.computeJacobian($1, $2, $3, $4, $5)"],
    "description": "simIK.computeJacobian(int environmentHandle, int baseObject, int lastJoint, int constraints, float[7..12] tipMatrix, float[7..12] targetMatrix=None, float[7..12] constrBaseMatrix=None)"
  },
  "simIK.createDebugOverlay": {
    "prefix": "simIK.createDebugOverlay",
    "body": ["simIK.createDebugOverlay($1, $2)"],
    "description": "simIK.createDebugOverlay(int environmentHandle, int tipHandle, int baseHandle=-1)"
  },
  "simIK.createDummy": {
    "prefix": "simIK.createDummy",
    "body": ["simIK.createDummy($1)"],
    "description": "simIK.createDummy(int environmentHandle, str dummyName='')"
  },
  "simIK.createEnvironment": {
    "prefix": "simIK.createEnvironment",
    "body": ["simIK.createEnvironment()"],
    "description": "simIK.createEnvironment(int flags=0)"
  },
  "simIK.createGroup": {
    "prefix": "simIK.createGroup",
    "body": ["simIK.createGroup($1)"],
    "description": "simIK.createGroup(int environmentHandle, str ikGroupName='')"
  },
  "simIK.createJoint": {
    "prefix": "simIK.createJoint",
    "body": ["simIK.createJoint($1, $2)"],
    "description": "simIK.createJoint(int environmentHandle, int jointType, str jointName='')"
  },
  "simIK.doesGroupExist": {
    "prefix": "simIK.doesGroupExist",
    "body": ["simIK.doesGroupExist($1, $2)"],
    "description": "simIK.doesGroupExist(int environmentHandle, str ikGroupName)"
  },
  "simIK.doesObjectExist": {
    "prefix": "simIK.doesObjectExist",
    "body": ["simIK.doesObjectExist($1, $2)"],
    "description": "simIK.doesObjectExist(int environmentHandle, str objectName)"
  },
  "simIK.duplicateEnvironment": {
    "prefix": "simIK.duplicateEnvironment",
    "body": ["simIK.duplicateEnvironment($1)"],
    "description": "simIK.duplicateEnvironment(int environmentHandle)"
  },
  "simIK.eraseDebugOverlay": {
    "prefix": "simIK.eraseDebugOverlay",
    "body": ["simIK.eraseDebugOverlay($1)"],
    "description": "simIK.eraseDebugOverlay(int debugObject)"
  },
  "simIK.eraseEnvironment": {
    "prefix": "simIK.eraseEnvironment",
    "body": ["simIK.eraseEnvironment($1)"],
    "description": "simIK.eraseEnvironment(int environmentHandle)"
  },
  "simIK.eraseObject": {
    "prefix": "simIK.eraseObject",
    "body": ["simIK.eraseObject($1, $2)"],
    "description": "simIK.eraseObject(int environmentHandle, int objectHandle)"
  },
  "simIK.findConfigs": {
    "prefix": "simIK.findConfigs",
    "body": ["simIK.findConfigs($1, $2, $3)"],
    "description": "simIK.findConfigs(int envHandle, int ikGroupHandle, int[] jointHandles, dict params={}, any[] configs={})"
  },
  "simIK.generatePath": {
    "prefix": "simIK.generatePath",
    "body": ["simIK.generatePath($1, $2, $3, $4, $5)"],
    "description": "simIK.generatePath(int environmentHandle, int ikGroupHandle, int[] jointHandles, int tipHandle, int pathPointCount, func validationCallback=None, any auxData=None)"
  },
  "simIK.getAlternateConfigs": {
    "prefix": "simIK.getAlternateConfigs",
    "body": ["simIK.getAlternateConfigs($1, $2)"],
    "description": "simIK.getAlternateConfigs(int environmentHandle, int[] jointHandles, float[] lowLimits=None, float[] ranges=None)"
  },
  "simIK.getElementBase": {
    "prefix": "simIK.getElementBase",
    "body": ["simIK.getElementBase($1, $2, $3)"],
    "description": "simIK.getElementBase(int environmentHandle, int ikGroupHandle, int elementHandle)"
  },
  "simIK.getElementConstraints": {
    "prefix": "simIK.getElementConstraints",
    "body": ["simIK.getElementConstraints($1, $2, $3)"],
    "description": "simIK.getElementConstraints(int environmentHandle, int ikGroupHandle, int elementHandle)"
  },
  "simIK.getElementFlags": {
    "prefix": "simIK.getElementFlags",
    "body": ["simIK.getElementFlags($1, $2, $3)"],
    "description": "simIK.getElementFlags(int environmentHandle, int ikGroupHandle, int elementHandle)"
  },
  "simIK.getElementPrecision": {
    "prefix": "simIK.getElementPrecision",
    "body": ["simIK.getElementPrecision($1, $2, $3)"],
    "description": "simIK.getElementPrecision(int environmentHandle, int ikGroupHandle, int elementHandle)"
  },
  "simIK.getElementWeights": {
    "prefix": "simIK.getElementWeights",
    "body": ["simIK.getElementWeights($1, $2, $3)"],
    "description": "simIK.getElementWeights(int environmentHandle, int ikGroupHandle, int elementHandle)"
  },
  "simIK.getFailureDescription": {
    "prefix": "simIK.getFailureDescription",
    "body": ["simIK.getFailureDescription($1)"],
    "description": "simIK.getFailureDescription(int reason)"
  },
  "simIK.getGroupCalculation": {
    "prefix": "simIK.getGroupCalculation",
    "body": ["simIK.getGroupCalculation($1, $2)"],
    "description": "simIK.getGroupCalculation(int environmentHandle, int ikGroupHandle)"
  },
  "simIK.getGroupFlags": {
    "prefix": "simIK.getGroupFlags",
    "body": ["simIK.getGroupFlags($1, $2)"],
    "description": "simIK.getGroupFlags(int environmentHandle, int ikGroupHandle)"
  },
  "simIK.getGroupHandle": {
    "prefix": "simIK.getGroupHandle",
    "body": ["simIK.getGroupHandle($1, $2)"],
    "description": "simIK.getGroupHandle(int environmentHandle, str ikGroupName)"
  },
  "simIK.getGroupJointLimitHits": {
    "prefix": "simIK.getGroupJointLimitHits",
    "body": ["simIK.getGroupJointLimitHits($1, $2)"],
    "description": "simIK.getGroupJointLimitHits(int environmentHandle, int ikGroupHandle)"
  },
  "simIK.getGroupJoints": {
    "prefix": "simIK.getGroupJoints",
    "body": ["simIK.getGroupJoints($1, $2)"],
    "description": "simIK.getGroupJoints(int environmentHandle, int ikGroupHandle)"
  },
  "simIK.getJointDependency": {
    "prefix": "simIK.getJointDependency",
    "body": ["simIK.getJointDependency($1, $2)"],
    "description": "simIK.getJointDependency(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointInterval": {
    "prefix": "simIK.getJointInterval",
    "body": ["simIK.getJointInterval($1, $2)"],
    "description": "simIK.getJointInterval(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointLimitMargin": {
    "prefix": "simIK.getJointLimitMargin",
    "body": ["simIK.getJointLimitMargin($1, $2)"],
    "description": "simIK.getJointLimitMargin(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointMatrix": {
    "prefix": "simIK.getJointMatrix",
    "body": ["simIK.getJointMatrix($1, $2)"],
    "description": "simIK.getJointMatrix(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointMaxStepSize": {
    "prefix": "simIK.getJointMaxStepSize",
    "body": ["simIK.getJointMaxStepSize($1, $2)"],
    "description": "simIK.getJointMaxStepSize(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointMode": {
    "prefix": "simIK.getJointMode",
    "body": ["simIK.getJointMode($1, $2)"],
    "description": "simIK.getJointMode(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointPosition": {
    "prefix": "simIK.getJointPosition",
    "body": ["simIK.getJointPosition($1, $2)"],
    "description": "simIK.getJointPosition(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointScrewLead": {
    "prefix": "simIK.getJointScrewLead",
    "body": ["simIK.getJointScrewLead($1, $2)"],
    "description": "simIK.getJointScrewLead(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointTransformation": {
    "prefix": "simIK.getJointTransformation",
    "body": ["simIK.getJointTransformation($1, $2)"],
    "description": "simIK.getJointTransformation(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointType": {
    "prefix": "simIK.getJointType",
    "body": ["simIK.getJointType($1, $2)"],
    "description": "simIK.getJointType(int environmentHandle, int jointHandle)"
  },
  "simIK.getJointWeight": {
    "prefix": "simIK.getJointWeight",
    "body": ["simIK.getJointWeight($1, $2)"],
    "description": "simIK.getJointWeight(int environmentHandle, int jointHandle)"
  },
  "simIK.getObjectHandle": {
    "prefix": "simIK.getObjectHandle",
    "body": ["simIK.getObjectHandle($1, $2)"],
    "description": "simIK.getObjectHandle(int environmentHandle, str objectName)"
  },
  "simIK.getObjectMatrix": {
    "prefix": "simIK.getObjectMatrix",
    "body": ["simIK.getObjectMatrix($1, $2)"],
    "description": "simIK.getObjectMatrix(int environmentHandle, int objectHandle, int relativeToObjectHandle=simIK.handle_world)"
  },
  "simIK.getObjectParent": {
    "prefix": "simIK.getObjectParent",
    "body": ["simIK.getObjectParent($1, $2)"],
    "description": "simIK.getObjectParent(int environmentHandle, int objectHandle)"
  },
  "simIK.getObjectPose": {
    "prefix": "simIK.getObjectPose",
    "body": ["simIK.getObjectPose($1, $2)"],
    "description": "simIK.getObjectPose(int environmentHandle, int objectHandle, int relativeToObjectHandle=simIK.handle_world)"
  },
  "simIK.getObjectTransformation": {
    "prefix": "simIK.getObjectTransformation",
    "body": ["simIK.getObjectTransformation($1, $2)"],
    "description": "simIK.getObjectTransformation(int environmentHandle, int objectHandle, int relativeToObjectHandle=simIK.handle_world)"
  },
  "simIK.getObjectType": {
    "prefix": "simIK.getObjectType",
    "body": ["simIK.getObjectType($1, $2)"],
    "description": "simIK.getObjectType(int environmentHandle, int objectHandle)"
  },
  "simIK.getObjects": {
    "prefix": "simIK.getObjects",
    "body": ["simIK.getObjects($1, $2)"],
    "description": "simIK.getObjects(int environmentHandle, int index)"
  },
  "simIK.getTargetDummy": {
    "prefix": "simIK.getTargetDummy",
    "body": ["simIK.getTargetDummy($1, $2)"],
    "description": "simIK.getTargetDummy(int environmentHandle, int dummyHandle)"
  },
  "simIK.handleGroup": {
    "prefix": "simIK.handleGroup",
    "body": ["simIK.handleGroup($1, $2)"],
    "description": "simIK.handleGroup(int environmentHandle, int ikGroup, dict options={})"
  },
  "simIK.handleGroups": {
    "prefix": "simIK.handleGroups",
    "body": ["simIK.handleGroups($1, $2)"],
    "description": "simIK.handleGroups(int environmentHandle, int[] ikGroups, dict options={})"
  },
  "simIK.load": {
    "prefix": "simIK.load",
    "body": ["simIK.load($1, $2)"],
    "description": "simIK.load(int environmentHandle, str data)"
  },
  "simIK.save": {
    "prefix": "simIK.save",
    "body": ["simIK.save($1)"],
    "description": "simIK.save(int environmentHandle)"
  },
  "simIK.setElementBase": {
    "prefix": "simIK.setElementBase",
    "body": ["simIK.setElementBase($1, $2, $3, $4)"],
    "description": "simIK.setElementBase(int environmentHandle, int ikGroupHandle, int elementHandle, int baseHandle, int constraintsBaseHandle=-1)"
  },
  "simIK.setElementConstraints": {
    "prefix": "simIK.setElementConstraints",
    "body": ["simIK.setElementConstraints($1, $2, $3, $4)"],
    "description": "simIK.setElementConstraints(int environmentHandle, int ikGroupHandle, int elementHandle, int constraints)"
  },
  "simIK.setElementFlags": {
    "prefix": "simIK.setElementFlags",
    "body": ["simIK.setElementFlags($1, $2, $3, $4)"],
    "description": "simIK.setElementFlags(int environmentHandle, int ikGroupHandle, int elementHandle, int flags)"
  },
  "simIK.setElementPrecision": {
    "prefix": "simIK.setElementPrecision",
    "body": ["simIK.setElementPrecision($1, $2, $3, $4)"],
    "description": "simIK.setElementPrecision(int environmentHandle, int ikGroupHandle, int elementHandle, list precision)"
  },
  "simIK.setElementWeights": {
    "prefix": "simIK.setElementWeights",
    "body": ["simIK.setElementWeights($1, $2, $3, $4)"],
    "description": "simIK.setElementWeights(int environmentHandle, int ikGroupHandle, int elementHandle, list weights)"
  },
  "simIK.setGroupCalculation": {
    "prefix": "simIK.setGroupCalculation",
    "body": ["simIK.setGroupCalculation($1, $2, $3, $4, $5)"],
    "description": "simIK.setGroupCalculation(int environmentHandle, int ikGroupHandle, int method, float damping, int maxIterations)"
  },
  "simIK.setGroupFlags": {
    "prefix": "simIK.setGroupFlags",
    "body": ["simIK.setGroupFlags($1, $2, $3)"],
    "description": "simIK.setGroupFlags(int environmentHandle, int ikGroupHandle, int flags)"
  },
  "simIK.setJointDependency": {
    "prefix": "simIK.setJointDependency",
    "body": ["simIK.setJointDependency($1, $2, $3)"],
    "description": "simIK.setJointDependency(int environmentHandle, int jointHandle, int masterJointHandle, float offset=0.0, float mult=1.0, func callback=None)"
  },
  "simIK.setJointInterval": {
    "prefix": "simIK.setJointInterval",
    "body": ["simIK.setJointInterval($1, $2, $3)"],
    "description": "simIK.setJointInterval(int environmentHandle, int jointHandle, bool cyclic, list interval={})"
  },
  "simIK.setJointLimitMargin": {
    "prefix": "simIK.setJointLimitMargin",
    "body": ["simIK.setJointLimitMargin($1, $2, $3)"],
    "description": "simIK.setJointLimitMargin(int environmentHandle, int jointHandle, float margin)"
  },
  "simIK.setJointMaxStepSize": {
    "prefix": "simIK.setJointMaxStepSize",
    "body": ["simIK.setJointMaxStepSize($1, $2, $3)"],
    "description": "simIK.setJointMaxStepSize(int environmentHandle, int jointHandle, float stepSize)"
  },
  "simIK.setJointMode": {
    "prefix": "simIK.setJointMode",
    "body": ["simIK.setJointMode($1, $2, $3)"],
    "description": "simIK.setJointMode(int environmentHandle, int jointHandle, int jointMode)"
  },
  "simIK.setJointPosition": {
    "prefix": "simIK.setJointPosition",
    "body": ["simIK.setJointPosition($1, $2, $3)"],
    "description": "simIK.setJointPosition(int environmentHandle, int jointHandle, float position)"
  },
  "simIK.setJointScrewLead": {
    "prefix": "simIK.setJointScrewLead",
    "body": ["simIK.setJointScrewLead($1, $2, $3)"],
    "description": "simIK.setJointScrewLead(int environmentHandle, int jointHandle, float lead)"
  },
  "simIK.setJointWeight": {
    "prefix": "simIK.setJointWeight",
    "body": ["simIK.setJointWeight($1, $2, $3)"],
    "description": "simIK.setJointWeight(int environmentHandle, int jointHandle, float weight)"
  },
  "simIK.setObjectMatrix": {
    "prefix": "simIK.setObjectMatrix",
    "body": ["simIK.setObjectMatrix($1, $2, $3)"],
    "description": "simIK.setObjectMatrix(int environmentHandle, int objectHandle, list matrix, int relativeToObjectHandle=simIK.handle_world)"
  },
  "simIK.setObjectParent": {
    "prefix": "simIK.setObjectParent",
    "body": ["simIK.setObjectParent($1, $2, $3)"],
    "description": "simIK.setObjectParent(int environmentHandle, int objectHandle, int parentObjectHandle, bool keepInPlace=true)"
  },
  "simIK.setObjectPose": {
    "prefix": "simIK.setObjectPose",
    "body": ["simIK.setObjectPose($1, $2, $3)"],
    "description": "simIK.setObjectPose(int environmentHandle, int objectHandle, list pose, int relativeToObjectHandle=simIK.handle_world)"
  },
  "simIK.setObjectTransformation": {
    "prefix": "simIK.setObjectTransformation",
    "body": ["simIK.setObjectTransformation($1, $2, $3, $4)"],
    "description": "simIK.setObjectTransformation(int environmentHandle, int objectHandle, list position, float[] eulerOrQuaternion, int relativeToObjectHandle=simIK.handle_world)"
  },
  "simIK.setSphericalJointMatrix": {
    "prefix": "simIK.setSphericalJointMatrix",
    "body": ["simIK.setSphericalJointMatrix($1, $2, $3)"],
    "description": "simIK.setSphericalJointMatrix(int environmentHandle, int jointHandle, list matrix)"
  },
  "simIK.setSphericalJointRotation": {
    "prefix": "simIK.setSphericalJointRotation",
    "body": ["simIK.setSphericalJointRotation($1, $2, $3)"],
    "description": "simIK.setSphericalJointRotation(int environmentHandle, int jointHandle, float[] eulerOrQuaternion)"
  },
  "simIK.setTargetDummy": {
    "prefix": "simIK.setTargetDummy",
    "body": ["simIK.setTargetDummy($1, $2, $3)"],
    "description": "simIK.setTargetDummy(int environmentHandle, int dummyHandle, int targetDummyHandle)"
  },
  "simIK.syncFromSim": {
    "prefix": "simIK.syncFromSim",
    "body": ["simIK.syncFromSim($1, $2)"],
    "description": "simIK.syncFromSim(int environmentHandle, int[] ikGroups)"
  },
  "simIK.syncToSim": {
    "prefix": "simIK.syncToSim",
    "body": ["simIK.syncToSim($1, $2)"],
    "description": "simIK.syncToSim(int environmentHandle, int[] ikGroups)"
  },
  "simIM.abs": {
    "prefix": "simIM.abs",
    "body": ["simIM.abs($1)"],
    "description": "simIM.abs(str handle, bool inPlace=false)"
  },
  "simIM.absdiff": {
    "prefix": "simIM.absdiff",
    "body": ["simIM.absdiff($1, $2)"],
    "description": "simIM.absdiff(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.absdiffK": {
    "prefix": "simIM.absdiffK",
    "body": ["simIM.absdiffK($1, $2)"],
    "description": "simIM.absdiffK(str handle, float[] k, bool inPlace=false)"
  },
  "simIM.add": {
    "prefix": "simIM.add",
    "body": ["simIM.add($1, $2)"],
    "description": "simIM.add(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.addK": {
    "prefix": "simIM.addK",
    "body": ["simIM.addK($1, $2)"],
    "description": "simIM.addK(str handle, float[] k, bool inPlace=false)"
  },
  "simIM.addWeighted": {
    "prefix": "simIM.addWeighted",
    "body": ["simIM.addWeighted($1, $2, $3, $4, $5)"],
    "description": "simIM.addWeighted(str handle1, str handle2, float alpha, float beta, float gamma, bool inPlace=false)"
  },
  "simIM.arrowedLine": {
    "prefix": "simIM.arrowedLine",
    "body": ["simIM.arrowedLine($1, $2, $3, $4)"],
    "description": "simIM.arrowedLine(str handle, list p1, list p2, list color, int thickness=1, int type=8, int shift=0, float tipLength=0.1)"
  },
  "simIM.bitwiseAnd": {
    "prefix": "simIM.bitwiseAnd",
    "body": ["simIM.bitwiseAnd($1, $2)"],
    "description": "simIM.bitwiseAnd(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.bitwiseAndK": {
    "prefix": "simIM.bitwiseAndK",
    "body": ["simIM.bitwiseAndK($1, $2)"],
    "description": "simIM.bitwiseAndK(str handle, float[] k, bool inPlace=false)"
  },
  "simIM.bitwiseNot": {
    "prefix": "simIM.bitwiseNot",
    "body": ["simIM.bitwiseNot($1)"],
    "description": "simIM.bitwiseNot(str handle, bool inPlace=false)"
  },
  "simIM.bitwiseOr": {
    "prefix": "simIM.bitwiseOr",
    "body": ["simIM.bitwiseOr($1, $2)"],
    "description": "simIM.bitwiseOr(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.bitwiseOrK": {
    "prefix": "simIM.bitwiseOrK",
    "body": ["simIM.bitwiseOrK($1, $2)"],
    "description": "simIM.bitwiseOrK(str handle, float[] k, bool inPlace=false)"
  },
  "simIM.bitwiseXor": {
    "prefix": "simIM.bitwiseXor",
    "body": ["simIM.bitwiseXor($1, $2)"],
    "description": "simIM.bitwiseXor(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.bitwiseXorK": {
    "prefix": "simIM.bitwiseXorK",
    "body": ["simIM.bitwiseXorK($1, $2)"],
    "description": "simIM.bitwiseXorK(str handle, float[] k, bool inPlace=false)"
  },
  "simIM.cart2polar": {
    "prefix": "simIM.cart2polar",
    "body": ["simIM.cart2polar($1, $2)"],
    "description": "simIM.cart2polar(str handle1, str handle2, bool angleInDegrees=false)"
  },
  "simIM.circle": {
    "prefix": "simIM.circle",
    "body": ["simIM.circle($1, $2, $3, $4)"],
    "description": "simIM.circle(str handle, list center, int radius, list color, int thickness=1, int type=8, int shift=0)"
  },
  "simIM.clipLine": {
    "prefix": "simIM.clipLine",
    "body": ["simIM.clipLine($1, $2, $3)"],
    "description": "simIM.clipLine(str handle, list p1, list p2)"
  },
  "simIM.closeVideoCapture": {
    "prefix": "simIM.closeVideoCapture",
    "body": ["simIM.closeVideoCapture($1)"],
    "description": "simIM.closeVideoCapture(int deviceIndex)"
  },
  "simIM.compare": {
    "prefix": "simIM.compare",
    "body": ["simIM.compare($1, $2, $3)"],
    "description": "simIM.compare(str handle1, str handle2, int op, bool inPlace=false)"
  },
  "simIM.compareK": {
    "prefix": "simIM.compareK",
    "body": ["simIM.compareK($1, $2, $3)"],
    "description": "simIM.compareK(str handle, float[] k, int op, bool inPlace=false)"
  },
  "simIM.convert": {
    "prefix": "simIM.convert",
    "body": ["simIM.convert($1, $2)"],
    "description": "simIM.convert(str handle, int format, float scale=1.0, bool inPlace=false)"
  },
  "simIM.copy": {
    "prefix": "simIM.copy",
    "body": ["simIM.copy($1, $2, $3, $4, $5)"],
    "description": "simIM.copy(str srcHandle, list srcOffset, str dstHandle, list dstOffset, list size)"
  },
  "simIM.create": {
    "prefix": "simIM.create",
    "body": ["simIM.create($1, $2)"],
    "description": "simIM.create(int width, int height, int format=simim_fmt_8UC3, int initialValue=0)"
  },
  "simIM.createFromData": {
    "prefix": "simIM.createFromData",
    "body": ["simIM.createFromData($1, $2, $3)"],
    "description": "simIM.createFromData(int width, int height, buffer data, int format=simim_fmt_8UC3)"
  },
  "simIM.dataURL": {
    "prefix": "simIM.dataURL",
    "body": ["simIM.dataURL($1)"],
    "description": "simIM.dataURL(str imgHandle, str format=BMP)"
  },
  "simIM.destroy": {
    "prefix": "simIM.destroy",
    "body": ["simIM.destroy($1)"],
    "description": "simIM.destroy(str handle)"
  },
  "simIM.detectMarkers": {
    "prefix": "simIM.detectMarkers",
    "body": ["simIM.detectMarkers($1, $2)"],
    "description": "simIM.detectMarkers(str handle, str dictionaryHandle)"
  },
  "simIM.distanceTransform": {
    "prefix": "simIM.distanceTransform",
    "body": ["simIM.distanceTransform($1)"],
    "description": "simIM.distanceTransform(str handle, int distanceType=simim_dist_L2, int maskSize=simim_masksize_precise, bool inPlace=false)"
  },
  "simIM.divide": {
    "prefix": "simIM.divide",
    "body": ["simIM.divide($1, $2)"],
    "description": "simIM.divide(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.divideK": {
    "prefix": "simIM.divideK",
    "body": ["simIM.divideK($1, $2)"],
    "description": "simIM.divideK(float[] k, str handle, bool inPlace=false)"
  },
  "simIM.drawMarker": {
    "prefix": "simIM.drawMarker",
    "body": ["simIM.drawMarker($1, $2, $3)"],
    "description": "simIM.drawMarker(str dictionaryHandle, int markerId, int size, str handle=\"\", int borderSize=1)"
  },
  "simIM.ellipse": {
    "prefix": "simIM.ellipse",
    "body": ["simIM.ellipse($1, $2, $3, $4, $5)"],
    "description": "simIM.ellipse(str handle, list center, list radius, float angle=0.0, float startAngle=0.0, float endAngle=360.0, list color={255, 255, 255}, int thickness=1, int type=8, int shift=0)"
  },
  "simIM.encode": {
    "prefix": "simIM.encode",
    "body": ["simIM.encode($1, $2)"],
    "description": "simIM.encode(str handle, str format)"
  },
  "simIM.exp": {
    "prefix": "simIM.exp",
    "body": ["simIM.exp($1)"],
    "description": "simIM.exp(str handle, bool inPlace=false)"
  },
  "simIM.fillConvexPoly": {
    "prefix": "simIM.fillConvexPoly",
    "body": ["simIM.fillConvexPoly($1, $2, $3)"],
    "description": "simIM.fillConvexPoly(str handle, int[] points, list color, int type=8, int shift=0)"
  },
  "simIM.fillPoly": {
    "prefix": "simIM.fillPoly",
    "body": ["simIM.fillPoly($1, $2, $3, $4, $5)"],
    "description": "simIM.fillPoly(str handle, int[] points, int[] numPoints, list offset, list color, int type=8, int shift=0)"
  },
  "simIM.flip": {
    "prefix": "simIM.flip",
    "body": ["simIM.flip($1)"],
    "description": "simIM.flip(str handle, int op=0, bool inPlace=false)"
  },
  "simIM.get": {
    "prefix": "simIM.get",
    "body": ["simIM.get($1, $2)"],
    "description": "simIM.get(str handle, list coord)"
  },
  "simIM.getFormat": {
    "prefix": "simIM.getFormat",
    "body": ["simIM.getFormat($1)"],
    "description": "simIM.getFormat(str handle)"
  },
  "simIM.getMarkerBitSize": {
    "prefix": "simIM.getMarkerBitSize",
    "body": ["simIM.getMarkerBitSize($1)"],
    "description": "simIM.getMarkerBitSize(int dictType)"
  },
  "simIM.getMarkerDictionary": {
    "prefix": "simIM.getMarkerDictionary",
    "body": ["simIM.getMarkerDictionary($1)"],
    "description": "simIM.getMarkerDictionary(int type)"
  },
  "simIM.gray2rgb": {
    "prefix": "simIM.gray2rgb",
    "body": ["simIM.gray2rgb($1)"],
    "description": "simIM.gray2rgb(str handle, bool inPlace=false)"
  },
  "simIM.hls2rgb": {
    "prefix": "simIM.hls2rgb",
    "body": ["simIM.hls2rgb($1)"],
    "description": "simIM.hls2rgb(str handle, bool inPlace=false)"
  },
  "simIM.hsv2rgb": {
    "prefix": "simIM.hsv2rgb",
    "body": ["simIM.hsv2rgb($1)"],
    "description": "simIM.hsv2rgb(str handle, bool inPlace=false)"
  },
  "simIM.line": {
    "prefix": "simIM.line",
    "body": ["simIM.line($1, $2, $3, $4)"],
    "description": "simIM.line(str handle, list p1, list p2, list color, int thickness=1, int type=8, int shift=0)"
  },
  "simIM.log": {
    "prefix": "simIM.log",
    "body": ["simIM.log($1)"],
    "description": "simIM.log(str handle, bool inPlace=false)"
  },
  "simIM.magnitude": {
    "prefix": "simIM.magnitude",
    "body": ["simIM.magnitude($1, $2)"],
    "description": "simIM.magnitude(str handle1, str handle2)"
  },
  "simIM.merge": {
    "prefix": "simIM.merge",
    "body": ["simIM.merge($1)"],
    "description": "simIM.merge(str[] handles)"
  },
  "simIM.mixChannels": {
    "prefix": "simIM.mixChannels",
    "body": ["simIM.mixChannels($1, $2, $3)"],
    "description": "simIM.mixChannels(str[] inputHandles, str[] outputHandles, int[] fromTo)"
  },
  "simIM.multiply": {
    "prefix": "simIM.multiply",
    "body": ["simIM.multiply($1, $2)"],
    "description": "simIM.multiply(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.openVideoCapture": {
    "prefix": "simIM.openVideoCapture",
    "body": ["simIM.openVideoCapture($1)"],
    "description": "simIM.openVideoCapture(int deviceIndex)"
  },
  "simIM.phase": {
    "prefix": "simIM.phase",
    "body": ["simIM.phase($1, $2)"],
    "description": "simIM.phase(str handle1, str handle2, bool angleInDegrees=false)"
  },
  "simIM.polar2cart": {
    "prefix": "simIM.polar2cart",
    "body": ["simIM.polar2cart($1, $2)"],
    "description": "simIM.polar2cart(str handle1, str handle2, bool angleInDegrees=false)"
  },
  "simIM.polylines": {
    "prefix": "simIM.polylines",
    "body": ["simIM.polylines($1, $2, $3, $4, $5)"],
    "description": "simIM.polylines(str handle, int[] points, int[] numPoints, bool isClosed, list color, int thickness=1, int type=8, int shift=0)"
  },
  "simIM.pow": {
    "prefix": "simIM.pow",
    "body": ["simIM.pow($1, $2)"],
    "description": "simIM.pow(str handle, float power, bool inPlace=false)"
  },
  "simIM.read": {
    "prefix": "simIM.read",
    "body": ["simIM.read($1)"],
    "description": "simIM.read(str filename)"
  },
  "simIM.readFromVideoCapture": {
    "prefix": "simIM.readFromVideoCapture",
    "body": ["simIM.readFromVideoCapture($1)"],
    "description": "simIM.readFromVideoCapture(int deviceIndex, str handle=\"\")"
  },
  "simIM.readFromVisionSensor": {
    "prefix": "simIM.readFromVisionSensor",
    "body": ["simIM.readFromVisionSensor($1)"],
    "description": "simIM.readFromVisionSensor(int sensorHandle, str handle=\"\")"
  },
  "simIM.rectangle": {
    "prefix": "simIM.rectangle",
    "body": ["simIM.rectangle($1, $2, $3, $4)"],
    "description": "simIM.rectangle(str handle, list p1, list p2, list color, int thickness=1, int type=8, int shift=0)"
  },
  "simIM.reduce": {
    "prefix": "simIM.reduce",
    "body": ["simIM.reduce($1, $2, $3)"],
    "description": "simIM.reduce(str handle, int dim, int op, bool inPlace=false)"
  },
  "simIM.repeat": {
    "prefix": "simIM.repeat",
    "body": ["simIM.repeat($1, $2, $3)"],
    "description": "simIM.repeat(str handle, int nx, int ny, bool inPlace=false)"
  },
  "simIM.resize": {
    "prefix": "simIM.resize",
    "body": ["simIM.resize($1, $2, $3)"],
    "description": "simIM.resize(str handle, int width, int height, int interpolation=simim_interp_linear, bool inPlace=false)"
  },
  "simIM.rgb2gray": {
    "prefix": "simIM.rgb2gray",
    "body": ["simIM.rgb2gray($1)"],
    "description": "simIM.rgb2gray(str handle, bool inPlace=false)"
  },
  "simIM.rgb2hls": {
    "prefix": "simIM.rgb2hls",
    "body": ["simIM.rgb2hls($1)"],
    "description": "simIM.rgb2hls(str handle, bool inPlace=false)"
  },
  "simIM.rgb2hsv": {
    "prefix": "simIM.rgb2hsv",
    "body": ["simIM.rgb2hsv($1)"],
    "description": "simIM.rgb2hsv(str handle, bool inPlace=false)"
  },
  "simIM.scaleAdd": {
    "prefix": "simIM.scaleAdd",
    "body": ["simIM.scaleAdd($1, $2, $3)"],
    "description": "simIM.scaleAdd(str handle1, str handle2, float alpha, bool inPlace=false)"
  },
  "simIM.set": {
    "prefix": "simIM.set",
    "body": ["simIM.set($1, $2, $3)"],
    "description": "simIM.set(str handle, list coord, float[] value)"
  },
  "simIM.size": {
    "prefix": "simIM.size",
    "body": ["simIM.size($1)"],
    "description": "simIM.size(str handle)"
  },
  "simIM.split": {
    "prefix": "simIM.split",
    "body": ["simIM.split($1)"],
    "description": "simIM.split(str handle)"
  },
  "simIM.sqrt": {
    "prefix": "simIM.sqrt",
    "body": ["simIM.sqrt($1)"],
    "description": "simIM.sqrt(str handle, bool inPlace=false)"
  },
  "simIM.subtract": {
    "prefix": "simIM.subtract",
    "body": ["simIM.subtract($1, $2)"],
    "description": "simIM.subtract(str handle1, str handle2, bool inPlace=false)"
  },
  "simIM.subtractK": {
    "prefix": "simIM.subtractK",
    "body": ["simIM.subtractK($1, $2)"],
    "description": "simIM.subtractK(str handle, float[] k, bool inPlace=false)"
  },
  "simIM.text": {
    "prefix": "simIM.text",
    "body": ["simIM.text($1, $2, $3, $4, $5)"],
    "description": "simIM.text(str handle, str str, list pos, int fontFace=simim_fontface_simplex, bool italic=false, float fontScale=1.0, list color={255, 255, 255}, int thickness=1, int type=8, bool bottomLeftOrigin=false)"
  },
  "simIM.textSize": {
    "prefix": "simIM.textSize",
    "body": ["simIM.textSize($1)"],
    "description": "simIM.textSize(str str, int fontFace=simim_fontface_simplex, bool italic=false, float fontScale=1.0, int thickness=1)"
  },
  "simIM.write": {
    "prefix": "simIM.write",
    "body": ["simIM.write($1, $2)"],
    "description": "simIM.write(str handle, str filename)"
  },
  "simIM.writeToTexture": {
    "prefix": "simIM.writeToTexture",
    "body": ["simIM.writeToTexture($1, $2)"],
    "description": "simIM.writeToTexture(str handle, int textureId)"
  },
  "simIM.writeToVisionSensor": {
    "prefix": "simIM.writeToVisionSensor",
    "body": ["simIM.writeToVisionSensor($1, $2)"],
    "description": "simIM.writeToVisionSensor(str handle, int sensorHandle)"
  },
  "simLDraw.import": {
    "prefix": "simLDraw.import",
    "body": ["simLDraw.import($1)"],
    "description": "simLDraw.import(str filePath)"
  },
  "simMIDI.closeMidiIn": {
    "prefix": "simMIDI.closeMidiIn",
    "body": ["simMIDI.closeMidiIn($1)"],
    "description": "simMIDI.closeMidiIn(str inputPortHandle)"
  },
  "simMIDI.closeMidiOut": {
    "prefix": "simMIDI.closeMidiOut",
    "body": ["simMIDI.closeMidiOut($1)"],
    "description": "simMIDI.closeMidiOut(str outputPortHandle)"
  },
  "simMIDI.getMessage": {
    "prefix": "simMIDI.getMessage",
    "body": ["simMIDI.getMessage($1)"],
    "description": "simMIDI.getMessage(str inputPortHandle)"
  },
  "simMIDI.ignoreTypes": {
    "prefix": "simMIDI.ignoreTypes",
    "body": ["simMIDI.ignoreTypes($1, $2, $3, $4)"],
    "description": "simMIDI.ignoreTypes(str inputPortHandle, bool sysex, bool timing, bool activeSensing)"
  },
  "simMIDI.openMidiIn": {
    "prefix": "simMIDI.openMidiIn",
    "body": ["simMIDI.openMidiIn($1)"],
    "description": "simMIDI.openMidiIn(int inputPortIndex)"
  },
  "simMIDI.openMidiOut": {
    "prefix": "simMIDI.openMidiOut",
    "body": ["simMIDI.openMidiOut($1)"],
    "description": "simMIDI.openMidiOut(int outputPortIndex)"
  },
  "simMIDI.processIncomingMessages": {
    "prefix": "simMIDI.processIncomingMessages",
    "body": ["simMIDI.processIncomingMessages($1, $2, $3)"],
    "description": "simMIDI.processIncomingMessages(str midiInPortHandle, int[] channels, dict funcs)"
  },
  "simMIDI.sendMessage": {
    "prefix": "simMIDI.sendMessage",
    "body": ["simMIDI.sendMessage($1, $2)"],
    "description": "simMIDI.sendMessage(str outputPortHandle, int[] messageData)"
  },
  "simMTB.connectInput": {
    "prefix": "simMTB.connectInput",
    "body": ["simMTB.connectInput($1, $2, $3, $4, $5)"],
    "description": "simMTB.connectInput(int inputMtbServerHandle, int inputBitNumber, int outputMtbServerHandle, int outputBitNumber, int connectionType)"
  },
  "simMTB.disconnectInput": {
    "prefix": "simMTB.disconnectInput",
    "body": ["simMTB.disconnectInput($1, $2)"],
    "description": "simMTB.disconnectInput(int inputMtbServerHandle, int inputBitNumber)"
  },
  "simMTB.getInput": {
    "prefix": "simMTB.getInput",
    "body": ["simMTB.getInput($1)"],
    "description": "simMTB.getInput(int mtbServerHandle)"
  },
  "simMTB.getJoints": {
    "prefix": "simMTB.getJoints",
    "body": ["simMTB.getJoints($1)"],
    "description": "simMTB.getJoints(int mtbServerHandle)"
  },
  "simMTB.getOutput": {
    "prefix": "simMTB.getOutput",
    "body": ["simMTB.getOutput($1)"],
    "description": "simMTB.getOutput(int mtbServerHandle)"
  },
  "simMTB.setInput": {
    "prefix": "simMTB.setInput",
    "body": ["simMTB.setInput($1, $2)"],
    "description": "simMTB.setInput(int mtbServerHandle, list inputValues)"
  },
  "simMTB.startServer": {
    "prefix": "simMTB.startServer",
    "body": ["simMTB.startServer($1, $2, $3, $4, $5)"],
    "description": "simMTB.startServer(str mtbServerExecutable, int portNumber, buffer program, list jointPositions, list velocities)"
  },
  "simMTB.step": {
    "prefix": "simMTB.step",
    "body": ["simMTB.step($1, $2)"],
    "description": "simMTB.step(int mtbServerHandle, float timeStep)"
  },
  "simMTB.stopServer": {
    "prefix": "simMTB.stopServer",
    "body": ["simMTB.stopServer($1)"],
    "description": "simMTB.stopServer(int mtbServerHandle)"
  },
  "simMujoco.addFlexcomp": {
    "prefix": "simMujoco.addFlexcomp",
    "body": ["simMujoco.addFlexcomp($1)"],
    "description": "simMujoco.addFlexcomp(dict info)"
  },
  "simMujoco.addInjection": {
    "prefix": "simMujoco.addInjection",
    "body": ["simMujoco.addInjection($1)"],
    "description": "simMujoco.addInjection(dict info)"
  },
  "simMujoco.composite": {
    "prefix": "simMujoco.composite",
    "body": ["simMujoco.composite($1, $2)"],
    "description": "simMujoco.composite(str xml, dict info)"
  },
  "simMujoco.getCompositeInfo": {
    "prefix": "simMujoco.getCompositeInfo",
    "body": ["simMujoco.getCompositeInfo($1, $2)"],
    "description": "simMujoco.getCompositeInfo(int injectionId, int what)"
  },
  "simMujoco.getFlexcompInfo": {
    "prefix": "simMujoco.getFlexcompInfo",
    "body": ["simMujoco.getFlexcompInfo($1, $2)"],
    "description": "simMujoco.getFlexcompInfo(int injectionId, int what)"
  },
  "simMujoco.getInfo": {
    "prefix": "simMujoco.getInfo",
    "body": ["simMujoco.getInfo($1)"],
    "description": "simMujoco.getInfo(str what)"
  },
  "simMujoco.removeInjection": {
    "prefix": "simMujoco.removeInjection",
    "body": ["simMujoco.removeInjection($1)"],
    "description": "simMujoco.removeInjection(int injectionId)"
  },
  "simOMPL.addGoalState": {
    "prefix": "simOMPL.addGoalState",
    "body": ["simOMPL.addGoalState($1, $2)"],
    "description": "simOMPL.addGoalState(str taskHandle, float[] state)"
  },
  "simOMPL.compute": {
    "prefix": "simOMPL.compute",
    "body": ["simOMPL.compute($1, $2)"],
    "description": "simOMPL.compute(str taskHandle, float maxTime, float maxSimplificationTime=-1.0, int stateCnt=0)"
  },
  "simOMPL.createStateSpace": {
    "prefix": "simOMPL.createStateSpace",
    "body": ["simOMPL.createStateSpace($1, $2, $3, $4, $5, $6)"],
    "description": "simOMPL.createStateSpace(str name, int type, int objectHandle, float[] boundsLow, float[] boundsHigh, int useForProjection, float weight=1.0, int refObjectHandle=-1)"
  },
  "simOMPL.createStateSpaceForJoint": {
    "prefix": "simOMPL.createStateSpaceForJoint",
    "body": ["simOMPL.createStateSpaceForJoint($1, $2)"],
    "description": "simOMPL.createStateSpaceForJoint(str name, int jointHandle, int useForProjection=0, float weight=1)"
  },
  "simOMPL.createTask": {
    "prefix": "simOMPL.createTask",
    "body": ["simOMPL.createTask($1)"],
    "description": "simOMPL.createTask(str name)"
  },
  "simOMPL.destroyStateSpace": {
    "prefix": "simOMPL.destroyStateSpace",
    "body": ["simOMPL.destroyStateSpace($1)"],
    "description": "simOMPL.destroyStateSpace(str stateSpaceHandle)"
  },
  "simOMPL.destroyTask": {
    "prefix": "simOMPL.destroyTask",
    "body": ["simOMPL.destroyTask($1)"],
    "description": "simOMPL.destroyTask(str taskHandle)"
  },
  "simOMPL.drawPath": {
    "prefix": "simOMPL.drawPath",
    "body": ["simOMPL.drawPath($1, $2, $3, $4, $5)"],
    "description": "simOMPL.drawPath(str taskHandle, float[] path, float lineSize, list color, int extraAttributes)"
  },
  "simOMPL.drawPlannerData": {
    "prefix": "simOMPL.drawPlannerData",
    "body": ["simOMPL.drawPlannerData($1, $2, $3, $4, $5, $6)"],
    "description": "simOMPL.drawPlannerData(str taskHandle, float pointSize, float lineSize, list color, list startColor, list goalColor)"
  },
  "simOMPL.enforceBounds": {
    "prefix": "simOMPL.enforceBounds",
    "body": ["simOMPL.enforceBounds($1, $2)"],
    "description": "simOMPL.enforceBounds(str taskHandle, float[] state)"
  },
  "simOMPL.getGoalDistance": {
    "prefix": "simOMPL.getGoalDistance",
    "body": ["simOMPL.getGoalDistance($1)"],
    "description": "simOMPL.getGoalDistance(str taskHandle)"
  },
  "simOMPL.getPath": {
    "prefix": "simOMPL.getPath",
    "body": ["simOMPL.getPath($1)"],
    "description": "simOMPL.getPath(str taskHandle)"
  },
  "simOMPL.getPathState": {
    "prefix": "simOMPL.getPathState",
    "body": ["simOMPL.getPathState($1, $2, $3)"],
    "description": "simOMPL.getPathState(str taskHandle, float[] path, int index)"
  },
  "simOMPL.getPathStateCount": {
    "prefix": "simOMPL.getPathStateCount",
    "body": ["simOMPL.getPathStateCount($1, $2)"],
    "description": "simOMPL.getPathStateCount(str taskHandle, float[] path)"
  },
  "simOMPL.getPlannerData": {
    "prefix": "simOMPL.getPlannerData",
    "body": ["simOMPL.getPlannerData($1)"],
    "description": "simOMPL.getPlannerData(str taskHandle)"
  },
  "simOMPL.getProjectedPathLength": {
    "prefix": "simOMPL.getProjectedPathLength",
    "body": ["simOMPL.getProjectedPathLength($1, $2)"],
    "description": "simOMPL.getProjectedPathLength(str taskHandle, float[] path)"
  },
  "simOMPL.getReversedPath": {
    "prefix": "simOMPL.getReversedPath",
    "body": ["simOMPL.getReversedPath($1, $2)"],
    "description": "simOMPL.getReversedPath(str taskHandle, float[] path)"
  },
  "simOMPL.getStateSpaceDimension": {
    "prefix": "simOMPL.getStateSpaceDimension",
    "body": ["simOMPL.getStateSpaceDimension($1)"],
    "description": "simOMPL.getStateSpaceDimension(str taskHandle)"
  },
  "simOMPL.hasApproximateSolution": {
    "prefix": "simOMPL.hasApproximateSolution",
    "body": ["simOMPL.hasApproximateSolution($1)"],
    "description": "simOMPL.hasApproximateSolution(str taskHandle)"
  },
  "simOMPL.hasExactSolution": {
    "prefix": "simOMPL.hasExactSolution",
    "body": ["simOMPL.hasExactSolution($1)"],
    "description": "simOMPL.hasExactSolution(str taskHandle)"
  },
  "simOMPL.hasSolution": {
    "prefix": "simOMPL.hasSolution",
    "body": ["simOMPL.hasSolution($1)"],
    "description": "simOMPL.hasSolution(str taskHandle)"
  },
  "simOMPL.interpolatePath": {
    "prefix": "simOMPL.interpolatePath",
    "body": ["simOMPL.interpolatePath($1)"],
    "description": "simOMPL.interpolatePath(str taskHandle, int stateCnt=0)"
  },
  "simOMPL.isStateValid": {
    "prefix": "simOMPL.isStateValid",
    "body": ["simOMPL.isStateValid($1, $2)"],
    "description": "simOMPL.isStateValid(str taskHandle, float[] state)"
  },
  "simOMPL.isStateWithinBounds": {
    "prefix": "simOMPL.isStateWithinBounds",
    "body": ["simOMPL.isStateWithinBounds($1, $2)"],
    "description": "simOMPL.isStateWithinBounds(str taskHandle, float[] state)"
  },
  "simOMPL.printTaskInfo": {
    "prefix": "simOMPL.printTaskInfo",
    "body": ["simOMPL.printTaskInfo($1)"],
    "description": "simOMPL.printTaskInfo(str taskHandle)"
  },
  "simOMPL.projectStates": {
    "prefix": "simOMPL.projectStates",
    "body": ["simOMPL.projectStates($1, $2)"],
    "description": "simOMPL.projectStates(str taskHandle, float[] state)"
  },
  "simOMPL.projectionSize": {
    "prefix": "simOMPL.projectionSize",
    "body": ["simOMPL.projectionSize($1)"],
    "description": "simOMPL.projectionSize(str taskHandle)"
  },
  "simOMPL.readState": {
    "prefix": "simOMPL.readState",
    "body": ["simOMPL.readState($1)"],
    "description": "simOMPL.readState(str taskHandle)"
  },
  "simOMPL.removeDrawingObjects": {
    "prefix": "simOMPL.removeDrawingObjects",
    "body": ["simOMPL.removeDrawingObjects($1, $2)"],
    "description": "simOMPL.removeDrawingObjects(str taskHandle, int[] dwos)"
  },
  "simOMPL.setAlgorithm": {
    "prefix": "simOMPL.setAlgorithm",
    "body": ["simOMPL.setAlgorithm($1, $2)"],
    "description": "simOMPL.setAlgorithm(str taskHandle, int algorithm)"
  },
  "simOMPL.setCollisionPairs": {
    "prefix": "simOMPL.setCollisionPairs",
    "body": ["simOMPL.setCollisionPairs($1, $2)"],
    "description": "simOMPL.setCollisionPairs(str taskHandle, int[] collisionPairHandles)"
  },
  "simOMPL.setDubinsParams": {
    "prefix": "simOMPL.setDubinsParams",
    "body": ["simOMPL.setDubinsParams($1, $2, $3)"],
    "description": "simOMPL.setDubinsParams(str stateSpaceHandle, float turningRadius, bool isSymmetric)"
  },
  "simOMPL.setGoal": {
    "prefix": "simOMPL.setGoal",
    "body": ["simOMPL.setGoal($1, $2, $3, $4, $5, $6)"],
    "description": "simOMPL.setGoal(str taskHandle, int robotDummy, int goalDummy, float tolerance=0.001, float[] metric={1.0, 1.0, 1.0, 0.1}, int refDummy=-1)"
  },
  "simOMPL.setGoalCallback": {
    "prefix": "simOMPL.setGoalCallback",
    "body": ["simOMPL.setGoalCallback($1, $2)"],
    "description": "simOMPL.setGoalCallback(str taskHandle, func callback)"
  },
  "simOMPL.setGoalState": {
    "prefix": "simOMPL.setGoalState",
    "body": ["simOMPL.setGoalState($1, $2)"],
    "description": "simOMPL.setGoalState(str taskHandle, float[] state)"
  },
  "simOMPL.setGoalStates": {
    "prefix": "simOMPL.setGoalStates",
    "body": ["simOMPL.setGoalStates($1, $2)"],
    "description": "simOMPL.setGoalStates(str taskHandle, any[1..*] states)"
  },
  "simOMPL.setProjectionEvaluationCallback": {
    "prefix": "simOMPL.setProjectionEvaluationCallback",
    "body": ["simOMPL.setProjectionEvaluationCallback($1, $2, $3)"],
    "description": "simOMPL.setProjectionEvaluationCallback(str taskHandle, func callback, int projectionSize)"
  },
  "simOMPL.setStartState": {
    "prefix": "simOMPL.setStartState",
    "body": ["simOMPL.setStartState($1, $2)"],
    "description": "simOMPL.setStartState(str taskHandle, float[] state)"
  },
  "simOMPL.setStateSpace": {
    "prefix": "simOMPL.setStateSpace",
    "body": ["simOMPL.setStateSpace($1, $2)"],
    "description": "simOMPL.setStateSpace(str taskHandle, str[] stateSpaceHandles)"
  },
  "simOMPL.setStateSpaceForJoints": {
    "prefix": "simOMPL.setStateSpaceForJoints",
    "body": ["simOMPL.setStateSpaceForJoints($1, $2)"],
    "description": "simOMPL.setStateSpaceForJoints(str taskHandle, int[] jointHandles, int[] useForProjection={}, float[] weight={})"
  },
  "simOMPL.setStateValidationCallback": {
    "prefix": "simOMPL.setStateValidationCallback",
    "body": ["simOMPL.setStateValidationCallback($1, $2)"],
    "description": "simOMPL.setStateValidationCallback(str taskHandle, func callback)"
  },
  "simOMPL.setStateValidityCheckingResolution": {
    "prefix": "simOMPL.setStateValidityCheckingResolution",
    "body": ["simOMPL.setStateValidityCheckingResolution($1, $2)"],
    "description": "simOMPL.setStateValidityCheckingResolution(str taskHandle, float resolution)"
  },
  "simOMPL.setValidStateSamplerCallback": {
    "prefix": "simOMPL.setValidStateSamplerCallback",
    "body": ["simOMPL.setValidStateSamplerCallback($1, $2, $3)"],
    "description": "simOMPL.setValidStateSamplerCallback(str taskHandle, func callback, func callbackNear)"
  },
  "simOMPL.setVerboseLevel": {
    "prefix": "simOMPL.setVerboseLevel",
    "body": ["simOMPL.setVerboseLevel($1, $2)"],
    "description": "simOMPL.setVerboseLevel(str taskHandle, int verboseLevel)"
  },
  "simOMPL.setup": {
    "prefix": "simOMPL.setup",
    "body": ["simOMPL.setup($1)"],
    "description": "simOMPL.setup(str taskHandle)"
  },
  "simOMPL.simplifyPath": {
    "prefix": "simOMPL.simplifyPath",
    "body": ["simOMPL.simplifyPath($1)"],
    "description": "simOMPL.simplifyPath(str taskHandle, float maxSimplificationTime=-1.0)"
  },
  "simOMPL.solve": {
    "prefix": "simOMPL.solve",
    "body": ["simOMPL.solve($1, $2)"],
    "description": "simOMPL.solve(str taskHandle, float maxTime)"
  },
  "simOMPL.stateDistance": {
    "prefix": "simOMPL.stateDistance",
    "body": ["simOMPL.stateDistance($1, $2, $3)"],
    "description": "simOMPL.stateDistance(str taskHandle, float[] a, float[] b)"
  },
  "simOMPL.writeState": {
    "prefix": "simOMPL.writeState",
    "body": ["simOMPL.writeState($1, $2)"],
    "description": "simOMPL.writeState(str taskHandle, float[] state)"
  },
  "simOpenMesh.decimate": {
    "prefix": "simOpenMesh.decimate",
    "body": ["simOpenMesh.decimate($1)"],
    "description": "simOpenMesh.decimate(int inputShape, dict params = None)"
  },
  "simPython.call": {
    "prefix": "simPython.call",
    "body": ["simPython.call($1, $2, $3)"],
    "description": "simPython.call(str scriptStateHandle, str func, dict args)"
  },
  "simPython.create": {
    "prefix": "simPython.create",
    "body": ["simPython.create()"],
    "description": "simPython.create()"
  },
  "simPython.destroy": {
    "prefix": "simPython.destroy",
    "body": ["simPython.destroy($1)"],
    "description": "simPython.destroy(str scriptStateHandle)"
  },
  "simPython.getVersion": {
    "prefix": "simPython.getVersion",
    "body": ["simPython.getVersion()"],
    "description": "simPython.getVersion()"
  },
  "simPython.run": {
    "prefix": "simPython.run",
    "body": ["simPython.run($1, $2)"],
    "description": "simPython.run(str scriptStateHandle, str code)"
  },
  "simQML.createEngine": {
    "prefix": "simQML.createEngine",
    "body": ["simQML.createEngine()"],
    "description": "simQML.createEngine()"
  },
  "simQML.destroyEngine": {
    "prefix": "simQML.destroyEngine",
    "body": ["simQML.destroyEngine($1)"],
    "description": "simQML.destroyEngine(str handle)"
  },
  "simQML.imageDataURL": {
    "prefix": "simQML.imageDataURL",
    "body": ["simQML.imageDataURL($1, $2, $3)"],
    "description": "simQML.imageDataURL(buffer data, int width, int height, str format=\"BMP\", int data_format=simqml_image_data_format_rgb888)"
  },
  "simQML.load": {
    "prefix": "simQML.load",
    "body": ["simQML.load($1, $2)"],
    "description": "simQML.load(str engineHandle, str filename)"
  },
  "simQML.loadData": {
    "prefix": "simQML.loadData",
    "body": ["simQML.loadData($1, $2)"],
    "description": "simQML.loadData(str engineHandle, str data, str basepath=\"\")"
  },
  "simQML.qtVersion": {
    "prefix": "simQML.qtVersion",
    "body": ["simQML.qtVersion()"],
    "description": "simQML.qtVersion()"
  },
  "simQML.sendEvent": {
    "prefix": "simQML.sendEvent",
    "body": ["simQML.sendEvent($1, $2, $3)"],
    "description": "simQML.sendEvent(str engine, str name, dict data)"
  },
  "simQML.sendEventRaw": {
    "prefix": "simQML.sendEventRaw",
    "body": ["simQML.sendEventRaw($1, $2, $3)"],
    "description": "simQML.sendEventRaw(str engineHandle, str eventName, str eventData)"
  },
  "simQML.setEventHandler": {
    "prefix": "simQML.setEventHandler",
    "body": ["simQML.setEventHandler($1, $2)"],
    "description": "simQML.setEventHandler(str engine, str funcName)"
  },
  "simQML.setEventHandlerRaw": {
    "prefix": "simQML.setEventHandlerRaw",
    "body": ["simQML.setEventHandlerRaw($1, $2)"],
    "description": "simQML.setEventHandlerRaw(str engineHandle, str functionName)"
  },
  "simROS2.actionClientTreatUInt8ArrayAsString": {
    "prefix": "simROS2.actionClientTreatUInt8ArrayAsString",
    "body": ["simROS2.actionClientTreatUInt8ArrayAsString($1)"],
    "description": "simROS2.actionClientTreatUInt8ArrayAsString(str actionClientHandle)"
  },
  "simROS2.actionServerActionAbort": {
    "prefix": "simROS2.actionServerActionAbort",
    "body": ["simROS2.actionServerActionAbort($1, $2, $3)"],
    "description": "simROS2.actionServerActionAbort(str actionServerHandle, str goalUUID, dict result)"
  },
  "simROS2.actionServerActionCanceled": {
    "prefix": "simROS2.actionServerActionCanceled",
    "body": ["simROS2.actionServerActionCanceled($1, $2, $3)"],
    "description": "simROS2.actionServerActionCanceled(str actionServerHandle, str goalUUID, dict result)"
  },
  "simROS2.actionServerActionExecute": {
    "prefix": "simROS2.actionServerActionExecute",
    "body": ["simROS2.actionServerActionExecute($1, $2)"],
    "description": "simROS2.actionServerActionExecute(str actionServerHandle, str goalUUID)"
  },
  "simROS2.actionServerActionIsActive": {
    "prefix": "simROS2.actionServerActionIsActive",
    "body": ["simROS2.actionServerActionIsActive($1, $2)"],
    "description": "simROS2.actionServerActionIsActive(str actionServerHandle, str goalUUID)"
  },
  "simROS2.actionServerActionIsCanceling": {
    "prefix": "simROS2.actionServerActionIsCanceling",
    "body": ["simROS2.actionServerActionIsCanceling($1, $2)"],
    "description": "simROS2.actionServerActionIsCanceling(str actionServerHandle, str goalUUID)"
  },
  "simROS2.actionServerActionIsExecuting": {
    "prefix": "simROS2.actionServerActionIsExecuting",
    "body": ["simROS2.actionServerActionIsExecuting($1, $2)"],
    "description": "simROS2.actionServerActionIsExecuting(str actionServerHandle, str goalUUID)"
  },
  "simROS2.actionServerActionSucceed": {
    "prefix": "simROS2.actionServerActionSucceed",
    "body": ["simROS2.actionServerActionSucceed($1, $2, $3)"],
    "description": "simROS2.actionServerActionSucceed(str actionServerHandle, str goalUUID, dict result)"
  },
  "simROS2.actionServerPublishFeedback": {
    "prefix": "simROS2.actionServerPublishFeedback",
    "body": ["simROS2.actionServerPublishFeedback($1, $2, $3)"],
    "description": "simROS2.actionServerPublishFeedback(str actionServerHandle, str goalUUID, dict feedback)"
  },
  "simROS2.actionServerTreatUInt8ArrayAsString": {
    "prefix": "simROS2.actionServerTreatUInt8ArrayAsString",
    "body": ["simROS2.actionServerTreatUInt8ArrayAsString($1)"],
    "description": "simROS2.actionServerTreatUInt8ArrayAsString(str actionServerHandle)"
  },
  "simROS2.call": {
    "prefix": "simROS2.call",
    "body": ["simROS2.call($1, $2)"],
    "description": "simROS2.call(str clientHandle, dict request)"
  },
  "simROS2.cancelLastGoal": {
    "prefix": "simROS2.cancelLastGoal",
    "body": ["simROS2.cancelLastGoal($1)"],
    "description": "simROS2.cancelLastGoal(str actionClientHandle)"
  },
  "simROS2.clientTreatUInt8ArrayAsString": {
    "prefix": "simROS2.clientTreatUInt8ArrayAsString",
    "body": ["simROS2.clientTreatUInt8ArrayAsString($1)"],
    "description": "simROS2.clientTreatUInt8ArrayAsString(str clientHandle)"
  },
  "simROS2.createActionClient": {
    "prefix": "simROS2.createActionClient",
    "body": ["simROS2.createActionClient($1, $2, $3, $4, $5)"],
    "description": "simROS2.createActionClient(str actionName, str actionType, func goalResponseCallback, func feedbackCallback, func resultCallback)"
  },
  "simROS2.createActionServer": {
    "prefix": "simROS2.createActionServer",
    "body": ["simROS2.createActionServer($1, $2, $3, $4, $5)"],
    "description": "simROS2.createActionServer(str actionName, str actionType, func handleGoalCallback, func handleCancelCallback, func handleAcceptedCallback)"
  },
  "simROS2.createClient": {
    "prefix": "simROS2.createClient",
    "body": ["simROS2.createClient($1, $2)"],
    "description": "simROS2.createClient(str serviceName, str serviceType)"
  },
  "simROS2.createInterface": {
    "prefix": "simROS2.createInterface",
    "body": ["simROS2.createInterface($1)"],
    "description": "simROS2.createInterface(str type)"
  },
  "simROS2.createPublisher": {
    "prefix": "simROS2.createPublisher",
    "body": ["simROS2.createPublisher($1, $2)"],
    "description": "simROS2.createPublisher(str topicName, str topicType, int unused=0, bool unused2=false, dict qos=None)"
  },
  "simROS2.createService": {
    "prefix": "simROS2.createService",
    "body": ["simROS2.createService($1, $2, $3)"],
    "description": "simROS2.createService(str serviceName, str serviceType, func serviceCallback)"
  },
  "simROS2.createSubscription": {
    "prefix": "simROS2.createSubscription",
    "body": ["simROS2.createSubscription($1, $2, $3)"],
    "description": "simROS2.createSubscription(str topicName, str topicType, func topicCallback, int unused=0, dict qos=None)"
  },
  "simROS2.deleteParam": {
    "prefix": "simROS2.deleteParam",
    "body": ["simROS2.deleteParam($1)"],
    "description": "simROS2.deleteParam(str name)"
  },
  "simROS2.getInterfaceConstants": {
    "prefix": "simROS2.getInterfaceConstants",
    "body": ["simROS2.getInterfaceConstants($1)"],
    "description": "simROS2.getInterfaceConstants(str type)"
  },
  "simROS2.getParamBool": {
    "prefix": "simROS2.getParamBool",
    "body": ["simROS2.getParamBool($1)"],
    "description": "simROS2.getParamBool(str name, bool defaultValue=false)"
  },
  "simROS2.getParamDouble": {
    "prefix": "simROS2.getParamDouble",
    "body": ["simROS2.getParamDouble($1)"],
    "description": "simROS2.getParamDouble(str name, float defaultValue=0.0)"
  },
  "simROS2.getParamInt": {
    "prefix": "simROS2.getParamInt",
    "body": ["simROS2.getParamInt($1)"],
    "description": "simROS2.getParamInt(str name, int defaultValue=0)"
  },
  "simROS2.getParamString": {
    "prefix": "simROS2.getParamString",
    "body": ["simROS2.getParamString($1)"],
    "description": "simROS2.getParamString(str name, str defaultValue=\"\")"
  },
  "simROS2.getSimulationTime": {
    "prefix": "simROS2.getSimulationTime",
    "body": ["simROS2.getSimulationTime()"],
    "description": "simROS2.getSimulationTime()"
  },
  "simROS2.getSystemTime": {
    "prefix": "simROS2.getSystemTime",
    "body": ["simROS2.getSystemTime()"],
    "description": "simROS2.getSystemTime()"
  },
  "simROS2.getTime": {
    "prefix": "simROS2.getTime",
    "body": ["simROS2.getTime()"],
    "description": "simROS2.getTime(int clock_type=simros2_clock_ros)"
  },
  "simROS2.hasParam": {
    "prefix": "simROS2.hasParam",
    "body": ["simROS2.hasParam($1)"],
    "description": "simROS2.hasParam(str name)"
  },
  "simROS2.imageTransportCreatePublisher": {
    "prefix": "simROS2.imageTransportCreatePublisher",
    "body": ["simROS2.imageTransportCreatePublisher($1)"],
    "description": "simROS2.imageTransportCreatePublisher(str topicName, int queueSize=1)"
  },
  "simROS2.imageTransportCreateSubscription": {
    "prefix": "simROS2.imageTransportCreateSubscription",
    "body": ["simROS2.imageTransportCreateSubscription($1, $2)"],
    "description": "simROS2.imageTransportCreateSubscription(str topicName, func topicCallback, int queueSize=1)"
  },
  "simROS2.imageTransportPublish": {
    "prefix": "simROS2.imageTransportPublish",
    "body": ["simROS2.imageTransportPublish($1, $2, $3, $4, $5)"],
    "description": "simROS2.imageTransportPublish(str publisherHandle, buffer data, int width, int height, str frame_id)"
  },
  "simROS2.imageTransportShutdownPublisher": {
    "prefix": "simROS2.imageTransportShutdownPublisher",
    "body": ["simROS2.imageTransportShutdownPublisher($1)"],
    "description": "simROS2.imageTransportShutdownPublisher(str publisherHandle)"
  },
  "simROS2.imageTransportShutdownSubscription": {
    "prefix": "simROS2.imageTransportShutdownSubscription",
    "body": ["simROS2.imageTransportShutdownSubscription($1)"],
    "description": "simROS2.imageTransportShutdownSubscription(str subscriptionHandle)"
  },
  "simROS2.importInterface": {
    "prefix": "simROS2.importInterface",
    "body": ["simROS2.importInterface($1)"],
    "description": "simROS2.importInterface(str name)"
  },
  "simROS2.publish": {
    "prefix": "simROS2.publish",
    "body": ["simROS2.publish($1, $2)"],
    "description": "simROS2.publish(str publisherHandle, dict message)"
  },
  "simROS2.publisherTreatUInt8ArrayAsString": {
    "prefix": "simROS2.publisherTreatUInt8ArrayAsString",
    "body": ["simROS2.publisherTreatUInt8ArrayAsString($1)"],
    "description": "simROS2.publisherTreatUInt8ArrayAsString(str publisherHandle)"
  },
  "simROS2.sendGoal": {
    "prefix": "simROS2.sendGoal",
    "body": ["simROS2.sendGoal($1, $2)"],
    "description": "simROS2.sendGoal(str actionClientHandle, dict goal)"
  },
  "simROS2.sendTransform": {
    "prefix": "simROS2.sendTransform",
    "body": ["simROS2.sendTransform($1)"],
    "description": "simROS2.sendTransform(dict transform)"
  },
  "simROS2.sendTransforms": {
    "prefix": "simROS2.sendTransforms",
    "body": ["simROS2.sendTransforms($1)"],
    "description": "simROS2.sendTransforms(dict transforms)"
  },
  "simROS2.serviceTreatUInt8ArrayAsString": {
    "prefix": "simROS2.serviceTreatUInt8ArrayAsString",
    "body": ["simROS2.serviceTreatUInt8ArrayAsString($1)"],
    "description": "simROS2.serviceTreatUInt8ArrayAsString(str serviceHandle)"
  },
  "simROS2.setParamBool": {
    "prefix": "simROS2.setParamBool",
    "body": ["simROS2.setParamBool($1, $2)"],
    "description": "simROS2.setParamBool(str name, bool value)"
  },
  "simROS2.setParamDouble": {
    "prefix": "simROS2.setParamDouble",
    "body": ["simROS2.setParamDouble($1, $2)"],
    "description": "simROS2.setParamDouble(str name, float value)"
  },
  "simROS2.setParamInt": {
    "prefix": "simROS2.setParamInt",
    "body": ["simROS2.setParamInt($1, $2)"],
    "description": "simROS2.setParamInt(str name, int value)"
  },
  "simROS2.setParamString": {
    "prefix": "simROS2.setParamString",
    "body": ["simROS2.setParamString($1, $2)"],
    "description": "simROS2.setParamString(str name, str value)"
  },
  "simROS2.shutdownActionClient": {
    "prefix": "simROS2.shutdownActionClient",
    "body": ["simROS2.shutdownActionClient($1)"],
    "description": "simROS2.shutdownActionClient(str actionClientHandle)"
  },
  "simROS2.shutdownActionServer": {
    "prefix": "simROS2.shutdownActionServer",
    "body": ["simROS2.shutdownActionServer($1)"],
    "description": "simROS2.shutdownActionServer(str actionServerHandle)"
  },
  "simROS2.shutdownClient": {
    "prefix": "simROS2.shutdownClient",
    "body": ["simROS2.shutdownClient($1)"],
    "description": "simROS2.shutdownClient(str clientHandle)"
  },
  "simROS2.shutdownPublisher": {
    "prefix": "simROS2.shutdownPublisher",
    "body": ["simROS2.shutdownPublisher($1)"],
    "description": "simROS2.shutdownPublisher(str publisherHandle)"
  },
  "simROS2.shutdownService": {
    "prefix": "simROS2.shutdownService",
    "body": ["simROS2.shutdownService($1)"],
    "description": "simROS2.shutdownService(str serviceHandle)"
  },
  "simROS2.shutdownSubscription": {
    "prefix": "simROS2.shutdownSubscription",
    "body": ["simROS2.shutdownSubscription($1)"],
    "description": "simROS2.shutdownSubscription(str subscriptionHandle)"
  },
  "simROS2.spinSome": {
    "prefix": "simROS2.spinSome",
    "body": ["simROS2.spinSome()"],
    "description": "simROS2.spinSome()"
  },
  "simROS2.subscriptionTreatUInt8ArrayAsString": {
    "prefix": "simROS2.subscriptionTreatUInt8ArrayAsString",
    "body": ["simROS2.subscriptionTreatUInt8ArrayAsString($1)"],
    "description": "simROS2.subscriptionTreatUInt8ArrayAsString(str subscriptionHandle)"
  },
  "simROS2.supportedInterfaces": {
    "prefix": "simROS2.supportedInterfaces",
    "body": ["simROS2.supportedInterfaces()"],
    "description": "simROS2.supportedInterfaces()"
  },
  "simROS2.timeFromFloat": {
    "prefix": "simROS2.timeFromFloat",
    "body": ["simROS2.timeFromFloat($1)"],
    "description": "simROS2.timeFromFloat(float t)"
  },
  "simROS2.timeToFloat": {
    "prefix": "simROS2.timeToFloat",
    "body": ["simROS2.timeToFloat($1)"],
    "description": "simROS2.timeToFloat(dict t)"
  },
  "simROS2.waitForService": {
    "prefix": "simROS2.waitForService",
    "body": ["simROS2.waitForService($1, $2)"],
    "description": "simROS2.waitForService(str clientHandle, float timeout)"
  },
  "simRRS1.CANCEL_EVENT": {
    "prefix": "simRRS1.CANCEL_EVENT",
    "body": ["simRRS1.CANCEL_EVENT($1, $2)"],
    "description": "simRRS1.CANCEL_EVENT(buffer rcsHandle, int eventId)"
  },
  "simRRS1.CANCEL_FLYBY_CRITERIA": {
    "prefix": "simRRS1.CANCEL_FLYBY_CRITERIA",
    "body": ["simRRS1.CANCEL_FLYBY_CRITERIA($1, $2)"],
    "description": "simRRS1.CANCEL_FLYBY_CRITERIA(buffer rcsHandle, int paramNumber)"
  },
  "simRRS1.CANCEL_MOTION": {
    "prefix": "simRRS1.CANCEL_MOTION",
    "body": ["simRRS1.CANCEL_MOTION($1)"],
    "description": "simRRS1.CANCEL_MOTION(buffer rcsHandle)"
  },
  "simRRS1.CONTINUE_MOTION": {
    "prefix": "simRRS1.CONTINUE_MOTION",
    "body": ["simRRS1.CONTINUE_MOTION($1)"],
    "description": "simRRS1.CONTINUE_MOTION(buffer rcsHandle)"
  },
  "simRRS1.CONTROLLER_POSITION_TO_MATRIX": {
    "prefix": "simRRS1.CONTROLLER_POSITION_TO_MATRIX",
    "body": ["simRRS1.CONTROLLER_POSITION_TO_MATRIX($1, $2)"],
    "description": "simRRS1.CONTROLLER_POSITION_TO_MATRIX(buffer rcsHandle, str contrPos)"
  },
  "simRRS1.DEBUG": {
    "prefix": "simRRS1.DEBUG",
    "body": ["simRRS1.DEBUG($1, $2, $3, $4)"],
    "description": "simRRS1.DEBUG(buffer rcsHandle, buffer debugFlags, int opcodeSelect, str logFileName)"
  },
  "simRRS1.DEFINE_EVENT": {
    "prefix": "simRRS1.DEFINE_EVENT",
    "body": ["simRRS1.DEFINE_EVENT($1, $2, $3, $4, $5, $6)"],
    "description": "simRRS1.DEFINE_EVENT(buffer rcsHandle, int eventId, int targetId, float resolution, int typeOfEvent, list eventSpec)"
  },
  "simRRS1.EXTENDED_SERVICE": {
    "prefix": "simRRS1.EXTENDED_SERVICE",
    "body": ["simRRS1.EXTENDED_SERVICE($1, $2)"],
    "description": "simRRS1.EXTENDED_SERVICE(buffer rcsHandle, str inData)"
  },
  "simRRS1.GET_CELL_FRAME": {
    "prefix": "simRRS1.GET_CELL_FRAME",
    "body": ["simRRS1.GET_CELL_FRAME($1, $2, $3, $4)"],
    "description": "simRRS1.GET_CELL_FRAME(buffer rcsHandle, int storage, int firstNext, str frameId)"
  },
  "simRRS1.GET_CURRENT_TARGETID": {
    "prefix": "simRRS1.GET_CURRENT_TARGETID",
    "body": ["simRRS1.GET_CURRENT_TARGETID($1)"],
    "description": "simRRS1.GET_CURRENT_TARGETID(buffer rcsHandle)"
  },
  "simRRS1.GET_EVENT": {
    "prefix": "simRRS1.GET_EVENT",
    "body": ["simRRS1.GET_EVENT($1, $2)"],
    "description": "simRRS1.GET_EVENT(buffer rcsHandle, int eventNumber)"
  },
  "simRRS1.GET_FORWARD_KINEMATIC": {
    "prefix": "simRRS1.GET_FORWARD_KINEMATIC",
    "body": ["simRRS1.GET_FORWARD_KINEMATIC($1, $2)"],
    "description": "simRRS1.GET_FORWARD_KINEMATIC(buffer rcsHandle, buffer jointPos)"
  },
  "simRRS1.GET_HOME_JOINT_POSITION": {
    "prefix": "simRRS1.GET_HOME_JOINT_POSITION",
    "body": ["simRRS1.GET_HOME_JOINT_POSITION($1)"],
    "description": "simRRS1.GET_HOME_JOINT_POSITION(buffer rcsHandle)"
  },
  "simRRS1.GET_INVERSE_KINEMATIC": {
    "prefix": "simRRS1.GET_INVERSE_KINEMATIC",
    "body": ["simRRS1.GET_INVERSE_KINEMATIC($1, $2, $3, $4, $5)"],
    "description": "simRRS1.GET_INVERSE_KINEMATIC(buffer rcsHandle, buffer cartPos, buffer jointPos, str configuration, buffer outputFormat)"
  },
  "simRRS1.GET_MESSAGE": {
    "prefix": "simRRS1.GET_MESSAGE",
    "body": ["simRRS1.GET_MESSAGE($1, $2)"],
    "description": "simRRS1.GET_MESSAGE(buffer rcsHandle, int messageNumber)"
  },
  "simRRS1.GET_NEXT_STEP": {
    "prefix": "simRRS1.GET_NEXT_STEP",
    "body": ["simRRS1.GET_NEXT_STEP($1, $2)"],
    "description": "simRRS1.GET_NEXT_STEP(buffer rcsHandle, buffer outputFormat)"
  },
  "simRRS1.GET_RCS_DATA": {
    "prefix": "simRRS1.GET_RCS_DATA",
    "body": ["simRRS1.GET_RCS_DATA($1, $2, $3, $4)"],
    "description": "simRRS1.GET_RCS_DATA(buffer rcsHandle, int storage, int firstNext, str paramId)"
  },
  "simRRS1.GET_ROBOT_STAMP": {
    "prefix": "simRRS1.GET_ROBOT_STAMP",
    "body": ["simRRS1.GET_ROBOT_STAMP($1)"],
    "description": "simRRS1.GET_ROBOT_STAMP(buffer rcsHandle)"
  },
  "simRRS1.INITIALIZE": {
    "prefix": "simRRS1.INITIALIZE",
    "body": ["simRRS1.INITIALIZE($1, $2, $3, $4, $5, $6)"],
    "description": "simRRS1.INITIALIZE(int robotNumber, str robotPathName, str modulePathName, str manipulatorType, int CarrrsVersion, int debug)"
  },
  "simRRS1.LOAD_RCS_DATA": {
    "prefix": "simRRS1.LOAD_RCS_DATA",
    "body": ["simRRS1.LOAD_RCS_DATA($1)"],
    "description": "simRRS1.LOAD_RCS_DATA(buffer rcsHandle)"
  },
  "simRRS1.MATRIX_TO_CONTROLLER_POSITION": {
    "prefix": "simRRS1.MATRIX_TO_CONTROLLER_POSITION",
    "body": ["simRRS1.MATRIX_TO_CONTROLLER_POSITION($1, $2, $3)"],
    "description": "simRRS1.MATRIX_TO_CONTROLLER_POSITION(buffer rcsHandle, buffer cartPos, str configuration)"
  },
  "simRRS1.MODIFY_CELL_FRAME": {
    "prefix": "simRRS1.MODIFY_CELL_FRAME",
    "body": ["simRRS1.MODIFY_CELL_FRAME($1, $2, $3, $4)"],
    "description": "simRRS1.MODIFY_CELL_FRAME(buffer rcsHandle, int storage, str frameId, buffer frameData)"
  },
  "simRRS1.MODIFY_RCS_DATA": {
    "prefix": "simRRS1.MODIFY_RCS_DATA",
    "body": ["simRRS1.MODIFY_RCS_DATA($1, $2, $3, $4)"],
    "description": "simRRS1.MODIFY_RCS_DATA(buffer rcsHandle, int storage, str paramId, str paramContents)"
  },
  "simRRS1.RESET": {
    "prefix": "simRRS1.RESET",
    "body": ["simRRS1.RESET($1, $2)"],
    "description": "simRRS1.RESET(buffer rcsHandle, int resetLevel)"
  },
  "simRRS1.REVERSE_MOTION": {
    "prefix": "simRRS1.REVERSE_MOTION",
    "body": ["simRRS1.REVERSE_MOTION($1, $2)"],
    "description": "simRRS1.REVERSE_MOTION(buffer rcsHandle, float distance)"
  },
  "simRRS1.SAVE_RCS_DATA": {
    "prefix": "simRRS1.SAVE_RCS_DATA",
    "body": ["simRRS1.SAVE_RCS_DATA($1)"],
    "description": "simRRS1.SAVE_RCS_DATA(buffer rcsHandle)"
  },
  "simRRS1.SELECT_DOMINANT_INTERPOLATION": {
    "prefix": "simRRS1.SELECT_DOMINANT_INTERPOLATION",
    "body": ["simRRS1.SELECT_DOMINANT_INTERPOLATION($1, $2, $3)"],
    "description": "simRRS1.SELECT_DOMINANT_INTERPOLATION(buffer rcsHandle, int dominantIntType, int dominantIntParam)"
  },
  "simRRS1.SELECT_FLYBY_CRITERIA": {
    "prefix": "simRRS1.SELECT_FLYBY_CRITERIA",
    "body": ["simRRS1.SELECT_FLYBY_CRITERIA($1, $2)"],
    "description": "simRRS1.SELECT_FLYBY_CRITERIA(buffer rcsHandle, int paramNumber)"
  },
  "simRRS1.SELECT_FLYBY_MODE": {
    "prefix": "simRRS1.SELECT_FLYBY_MODE",
    "body": ["simRRS1.SELECT_FLYBY_MODE($1, $2)"],
    "description": "simRRS1.SELECT_FLYBY_MODE(buffer rcsHandle, int flyByOn)"
  },
  "simRRS1.SELECT_MOTION_TYPE": {
    "prefix": "simRRS1.SELECT_MOTION_TYPE",
    "body": ["simRRS1.SELECT_MOTION_TYPE($1, $2)"],
    "description": "simRRS1.SELECT_MOTION_TYPE(buffer rcsHandle, int motionType)"
  },
  "simRRS1.SELECT_ORIENTATION_INTERPOLATION_MODE": {
    "prefix": "simRRS1.SELECT_ORIENTATION_INTERPOLATION_MODE",
    "body": ["simRRS1.SELECT_ORIENTATION_INTERPOLATION_MODE($1, $2, $3)"],
    "description": "simRRS1.SELECT_ORIENTATION_INTERPOLATION_MODE(buffer rcsHandle, int interpolationMode, int oriConst)"
  },
  "simRRS1.SELECT_POINT_ACCURACY": {
    "prefix": "simRRS1.SELECT_POINT_ACCURACY",
    "body": ["simRRS1.SELECT_POINT_ACCURACY($1, $2)"],
    "description": "simRRS1.SELECT_POINT_ACCURACY(buffer rcsHandle, int accuracyType)"
  },
  "simRRS1.SELECT_TARGET_TYPE": {
    "prefix": "simRRS1.SELECT_TARGET_TYPE",
    "body": ["simRRS1.SELECT_TARGET_TYPE($1, $2, $3, $4, $5)"],
    "description": "simRRS1.SELECT_TARGET_TYPE(buffer rcsHandle, int targetType, buffer cartPos, buffer jointPos, str configuration)"
  },
  "simRRS1.SELECT_TIME_COMPENSATION": {
    "prefix": "simRRS1.SELECT_TIME_COMPENSATION",
    "body": ["simRRS1.SELECT_TIME_COMPENSATION($1, $2)"],
    "description": "simRRS1.SELECT_TIME_COMPENSATION(buffer rcsHandle, buffer compensation)"
  },
  "simRRS1.SELECT_TRACKING": {
    "prefix": "simRRS1.SELECT_TRACKING",
    "body": ["simRRS1.SELECT_TRACKING($1, $2)"],
    "description": "simRRS1.SELECT_TRACKING(buffer rcsHandle, buffer conveyorFlags)"
  },
  "simRRS1.SELECT_TRAJECTORY_MODE": {
    "prefix": "simRRS1.SELECT_TRAJECTORY_MODE",
    "body": ["simRRS1.SELECT_TRAJECTORY_MODE($1, $2)"],
    "description": "simRRS1.SELECT_TRAJECTORY_MODE(buffer rcsHandle, int trajectoryOn)"
  },
  "simRRS1.SELECT_WEAVING_GROUP": {
    "prefix": "simRRS1.SELECT_WEAVING_GROUP",
    "body": ["simRRS1.SELECT_WEAVING_GROUP($1, $2, $3)"],
    "description": "simRRS1.SELECT_WEAVING_GROUP(buffer rcsHandle, int groupNo, int groupOn)"
  },
  "simRRS1.SELECT_WEAVING_MODE": {
    "prefix": "simRRS1.SELECT_WEAVING_MODE",
    "body": ["simRRS1.SELECT_WEAVING_MODE($1, $2)"],
    "description": "simRRS1.SELECT_WEAVING_MODE(buffer rcsHandle, int weavingMode)"
  },
  "simRRS1.SELECT_WORK_FRAMES": {
    "prefix": "simRRS1.SELECT_WORK_FRAMES",
    "body": ["simRRS1.SELECT_WORK_FRAMES($1, $2, $3)"],
    "description": "simRRS1.SELECT_WORK_FRAMES(buffer rcsHandle, str toolId, str objectId)"
  },
  "simRRS1.SET_ADVANCE_MOTION": {
    "prefix": "simRRS1.SET_ADVANCE_MOTION",
    "body": ["simRRS1.SET_ADVANCE_MOTION($1, $2)"],
    "description": "simRRS1.SET_ADVANCE_MOTION(buffer rcsHandle, int numberOfMotion)"
  },
  "simRRS1.SET_CARTESIAN_ORIENTATION_ACCELERATION": {
    "prefix": "simRRS1.SET_CARTESIAN_ORIENTATION_ACCELERATION",
    "body": ["simRRS1.SET_CARTESIAN_ORIENTATION_ACCELERATION($1, $2, $3, $4)"],
    "description": "simRRS1.SET_CARTESIAN_ORIENTATION_ACCELERATION(buffer rcsHandle, int rotationNo, float accelValue, int accelType)"
  },
  "simRRS1.SET_CARTESIAN_ORIENTATION_SPEED": {
    "prefix": "simRRS1.SET_CARTESIAN_ORIENTATION_SPEED",
    "body": ["simRRS1.SET_CARTESIAN_ORIENTATION_SPEED($1, $2, $3)"],
    "description": "simRRS1.SET_CARTESIAN_ORIENTATION_SPEED(buffer rcsHandle, int rotationNo, float speedValue)"
  },
  "simRRS1.SET_CARTESIAN_POSITION_ACCELERATION": {
    "prefix": "simRRS1.SET_CARTESIAN_POSITION_ACCELERATION",
    "body": ["simRRS1.SET_CARTESIAN_POSITION_ACCELERATION($1, $2, $3)"],
    "description": "simRRS1.SET_CARTESIAN_POSITION_ACCELERATION(buffer rcsHandle, float accelValue, int accelType)"
  },
  "simRRS1.SET_CARTESIAN_POSITION_SPEED": {
    "prefix": "simRRS1.SET_CARTESIAN_POSITION_SPEED",
    "body": ["simRRS1.SET_CARTESIAN_POSITION_SPEED($1, $2)"],
    "description": "simRRS1.SET_CARTESIAN_POSITION_SPEED(buffer rcsHandle, float speedValue)"
  },
  "simRRS1.SET_CONFIGURATION_CONTROL": {
    "prefix": "simRRS1.SET_CONFIGURATION_CONTROL",
    "body": ["simRRS1.SET_CONFIGURATION_CONTROL($1, $2, $3)"],
    "description": "simRRS1.SET_CONFIGURATION_CONTROL(buffer rcsHandle, str paramId, str paramContents)"
  },
  "simRRS1.SET_CONVEYOR_POSITION": {
    "prefix": "simRRS1.SET_CONVEYOR_POSITION",
    "body": ["simRRS1.SET_CONVEYOR_POSITION($1, $2, $3, $4)"],
    "description": "simRRS1.SET_CONVEYOR_POSITION(buffer rcsHandle, buffer inputFormat, buffer conveyorFlags, list conveyorPos)"
  },
  "simRRS1.SET_FLYBY_CRITERIA_PARAMETER": {
    "prefix": "simRRS1.SET_FLYBY_CRITERIA_PARAMETER",
    "body": ["simRRS1.SET_FLYBY_CRITERIA_PARAMETER($1, $2, $3, $4)"],
    "description": "simRRS1.SET_FLYBY_CRITERIA_PARAMETER(buffer rcsHandle, int paramNumber, int jointNr, float paramValue)"
  },
  "simRRS1.SET_INITIAL_POSITION": {
    "prefix": "simRRS1.SET_INITIAL_POSITION",
    "body": ["simRRS1.SET_INITIAL_POSITION($1, $2, $3, $4)"],
    "description": "simRRS1.SET_INITIAL_POSITION(buffer rcsHandle, buffer cartPos, buffer jointPos, str configuration)"
  },
  "simRRS1.SET_INTERPOLATION_TIME": {
    "prefix": "simRRS1.SET_INTERPOLATION_TIME",
    "body": ["simRRS1.SET_INTERPOLATION_TIME($1, $2)"],
    "description": "simRRS1.SET_INTERPOLATION_TIME(buffer rcsHandle, float interpolationTime)"
  },
  "simRRS1.SET_JOINT_ACCELERATIONS": {
    "prefix": "simRRS1.SET_JOINT_ACCELERATIONS",
    "body": ["simRRS1.SET_JOINT_ACCELERATIONS($1, $2, $3, $4, $5)"],
    "description": "simRRS1.SET_JOINT_ACCELERATIONS(buffer rcsHandle, int allJointFlags, buffer jointFlags, list accelPercent, int accelType)"
  },
  "simRRS1.SET_JOINT_JERKS": {
    "prefix": "simRRS1.SET_JOINT_JERKS",
    "body": ["simRRS1.SET_JOINT_JERKS($1, $2, $3, $4, $5)"],
    "description": "simRRS1.SET_JOINT_JERKS(buffer rcsHandle, int allJointFlags, buffer jointFlags, list jerkPercent, int jerkType)"
  },
  "simRRS1.SET_JOINT_SPEEDS": {
    "prefix": "simRRS1.SET_JOINT_SPEEDS",
    "body": ["simRRS1.SET_JOINT_SPEEDS($1, $2, $3, $4)"],
    "description": "simRRS1.SET_JOINT_SPEEDS(buffer rcsHandle, int allJointFlags, buffer jointFlags, list speedPercent)"
  },
  "simRRS1.SET_MOTION_FILTER": {
    "prefix": "simRRS1.SET_MOTION_FILTER",
    "body": ["simRRS1.SET_MOTION_FILTER($1, $2)"],
    "description": "simRRS1.SET_MOTION_FILTER(buffer rcsHandle, int filterFactor)"
  },
  "simRRS1.SET_MOTION_TIME": {
    "prefix": "simRRS1.SET_MOTION_TIME",
    "body": ["simRRS1.SET_MOTION_TIME($1, $2)"],
    "description": "simRRS1.SET_MOTION_TIME(buffer rcsHandle, float timeValue)"
  },
  "simRRS1.SET_NEXT_TARGET": {
    "prefix": "simRRS1.SET_NEXT_TARGET",
    "body": ["simRRS1.SET_NEXT_TARGET($1, $2, $3, $4, $5, $6, $7)"],
    "description": "simRRS1.SET_NEXT_TARGET(buffer rcsHandle, int targetId, int targetParam, buffer cartPos, buffer jointPos, str configuration, float targetParamValue)"
  },
  "simRRS1.SET_OVERRIDE_ACCELERATION": {
    "prefix": "simRRS1.SET_OVERRIDE_ACCELERATION",
    "body": ["simRRS1.SET_OVERRIDE_ACCELERATION($1, $2, $3, $4)"],
    "description": "simRRS1.SET_OVERRIDE_ACCELERATION(buffer rcsHandle, float correctionValue, int accelType, int correctionType)"
  },
  "simRRS1.SET_OVERRIDE_POSITION": {
    "prefix": "simRRS1.SET_OVERRIDE_POSITION",
    "body": ["simRRS1.SET_OVERRIDE_POSITION($1, $2)"],
    "description": "simRRS1.SET_OVERRIDE_POSITION(buffer rcsHandle, buffer posOffset)"
  },
  "simRRS1.SET_OVERRIDE_SPEED": {
    "prefix": "simRRS1.SET_OVERRIDE_SPEED",
    "body": ["simRRS1.SET_OVERRIDE_SPEED($1, $2, $3)"],
    "description": "simRRS1.SET_OVERRIDE_SPEED(buffer rcsHandle, float correctionValue, int correctionType)"
  },
  "simRRS1.SET_PAYLOAD_PARAMETER": {
    "prefix": "simRRS1.SET_PAYLOAD_PARAMETER",
    "body": ["simRRS1.SET_PAYLOAD_PARAMETER($1, $2, $3, $4, $5)"],
    "description": "simRRS1.SET_PAYLOAD_PARAMETER(buffer rcsHandle, int storage, str frameId, int paramNumber, float paramValue)"
  },
  "simRRS1.SET_POINT_ACCURACY_PARAMETER": {
    "prefix": "simRRS1.SET_POINT_ACCURACY_PARAMETER",
    "body": ["simRRS1.SET_POINT_ACCURACY_PARAMETER($1, $2, $3)"],
    "description": "simRRS1.SET_POINT_ACCURACY_PARAMETER(buffer rcsHandle, int accuracyType, float accuracyValue)"
  },
  "simRRS1.SET_REST_PARAMETER": {
    "prefix": "simRRS1.SET_REST_PARAMETER",
    "body": ["simRRS1.SET_REST_PARAMETER($1, $2, $3)"],
    "description": "simRRS1.SET_REST_PARAMETER(buffer rcsHandle, int paramNumber, float paramValue)"
  },
  "simRRS1.SET_WEAVING_GROUP_PARAMETER": {
    "prefix": "simRRS1.SET_WEAVING_GROUP_PARAMETER",
    "body": ["simRRS1.SET_WEAVING_GROUP_PARAMETER($1, $2, $3, $4)"],
    "description": "simRRS1.SET_WEAVING_GROUP_PARAMETER(buffer rcsHandle, int groupNo, int paramNo, float paramValue)"
  },
  "simRRS1.STOP_MOTION": {
    "prefix": "simRRS1.STOP_MOTION",
    "body": ["simRRS1.STOP_MOTION($1)"],
    "description": "simRRS1.STOP_MOTION(buffer rcsHandle)"
  },
  "simRRS1.TERMINATE": {
    "prefix": "simRRS1.TERMINATE",
    "body": ["simRRS1.TERMINATE($1)"],
    "description": "simRRS1.TERMINATE(buffer rcsHandle)"
  },
  "simRRS1.selectRcsServer": {
    "prefix": "simRRS1.selectRcsServer",
    "body": ["simRRS1.selectRcsServer($1)"],
    "description": "simRRS1.selectRcsServer(int rcsServerHandle)"
  },
  "simRRS1.startRcsServer": {
    "prefix": "simRRS1.startRcsServer",
    "body": ["simRRS1.startRcsServer($1, $2, $3)"],
    "description": "simRRS1.startRcsServer(str rcsLibraryFilename, str rcsLibraryFunctionName, int portNumber)"
  },
  "simRRS1.stopRcsServer": {
    "prefix": "simRRS1.stopRcsServer",
    "body": ["simRRS1.stopRcsServer($1)"],
    "description": "simRRS1.stopRcsServer(int rcsServerHandle)"
  },
  "simRemoteApi.reset": {
    "prefix": "simRemoteApi.reset",
    "body": ["simRemoteApi.reset($1)"],
    "description": "simRemoteApi.reset(int socketPort)"
  },
  "simRemoteApi.start": {
    "prefix": "simRemoteApi.start",
    "body": ["simRemoteApi.start($1)"],
    "description": "simRemoteApi.start(int socketPort, int maxPacketSize=1300, bool debug=false, bool preEnableTrigger=false)"
  },
  "simRemoteApi.status": {
    "prefix": "simRemoteApi.status",
    "body": ["simRemoteApi.status($1)"],
    "description": "simRemoteApi.status(int socketPort)"
  },
  "simRemoteApi.stop": {
    "prefix": "simRemoteApi.stop",
    "body": ["simRemoteApi.stop($1)"],
    "description": "simRemoteApi.stop(int socketPort)"
  },
  "simSDF.dump": {
    "prefix": "simSDF.dump",
    "body": ["simSDF.dump($1)"],
    "description": "simSDF.dump(str fileName)"
  },
  "simSDF.import": {
    "prefix": "simSDF.import",
    "body": ["simSDF.import($1)"],
    "description": "simSDF.import(str fileName, dict options={})"
  },
  "simSubprocess.exec": {
    "prefix": "simSubprocess.exec",
    "body": ["simSubprocess.exec($1, $2)"],
    "description": "simSubprocess.exec(str programPath, str[] args, buffer input=\"\", dict opts={})"
  },
  "simSubprocess.execAsync": {
    "prefix": "simSubprocess.execAsync",
    "body": ["simSubprocess.execAsync($1, $2)"],
    "description": "simSubprocess.execAsync(str programPath, str[] args, dict opts={})"
  },
  "simSubprocess.getpid": {
    "prefix": "simSubprocess.getpid",
    "body": ["simSubprocess.getpid($1)"],
    "description": "simSubprocess.getpid(str handle)"
  },
  "simSubprocess.isRunning": {
    "prefix": "simSubprocess.isRunning",
    "body": ["simSubprocess.isRunning($1)"],
    "description": "simSubprocess.isRunning(str handle)"
  },
  "simSubprocess.kill": {
    "prefix": "simSubprocess.kill",
    "body": ["simSubprocess.kill($1)"],
    "description": "simSubprocess.kill(str handle)"
  },
  "simSubprocess.wait": {
    "prefix": "simSubprocess.wait",
    "body": ["simSubprocess.wait($1)"],
    "description": "simSubprocess.wait(str handle, float timeout=5)"
  },
  "simSurfRec.reconstruct_scale_space": {
    "prefix": "simSurfRec.reconstruct_scale_space",
    "body": ["simSurfRec.reconstruct_scale_space($1)"],
    "description": "simSurfRec.reconstruct_scale_space(int pointCloudHandle, int iterations=4, int neighbors=12, int samples=300, float squared_radius=-1.0)"
  },
  "simUI.addCurve": {
    "prefix": "simUI.addCurve",
    "body": ["simUI.addCurve($1, $2, $3, $4, $5, $6, $7)"],
    "description": "simUI.addCurve(str handle, int id, int type, str name, list color, int style, dict options)"
  },
  "simUI.addCurveTimePoints": {
    "prefix": "simUI.addCurveTimePoints",
    "body": ["simUI.addCurveTimePoints($1, $2, $3, $4, $5)"],
    "description": "simUI.addCurveTimePoints(str handle, int id, str name, float[] x, float[] y)"
  },
  "simUI.addCurveXYPoints": {
    "prefix": "simUI.addCurveXYPoints",
    "body": ["simUI.addCurveXYPoints($1, $2, $3, $4, $5, $6)"],
    "description": "simUI.addCurveXYPoints(str handle, int id, str name, float[] t, float[] x, float[] y)"
  },
  "simUI.addScene3DNode": {
    "prefix": "simUI.addScene3DNode",
    "body": ["simUI.addScene3DNode($1, $2, $3, $4, $5)"],
    "description": "simUI.addScene3DNode(str handle, int id, int nodeId, int parentNodeId, int type)"
  },
  "simUI.addTreeItem": {
    "prefix": "simUI.addTreeItem",
    "body": ["simUI.addTreeItem($1, $2, $3, $4)"],
    "description": "simUI.addTreeItem(str handle, int id, int item_id, str[] text, int parent_id=0, bool expanded=false, bool suppressEvents=true)"
  },
  "simUI.adjustSize": {
    "prefix": "simUI.adjustSize",
    "body": ["simUI.adjustSize($1)"],
    "description": "simUI.adjustSize(str handle)"
  },
  "simUI.appendText": {
    "prefix": "simUI.appendText",
    "body": ["simUI.appendText($1, $2, $3)"],
    "description": "simUI.appendText(str handle, int id, str text, bool suppressEvents=true)"
  },
  "simUI.bannerCreate": {
    "prefix": "simUI.bannerCreate",
    "body": ["simUI.bannerCreate($1)"],
    "description": "simUI.bannerCreate(str text, str[] btnKeys=None, str[] btnLabels=None, str callback=None)"
  },
  "simUI.bannerDestroy": {
    "prefix": "simUI.bannerDestroy",
    "body": ["simUI.bannerDestroy($1)"],
    "description": "simUI.bannerDestroy(int id)"
  },
  "simUI.clearCurve": {
    "prefix": "simUI.clearCurve",
    "body": ["simUI.clearCurve($1, $2, $3)"],
    "description": "simUI.clearCurve(str handle, int id, str name)"
  },
  "simUI.clearTable": {
    "prefix": "simUI.clearTable",
    "body": ["simUI.clearTable($1, $2)"],
    "description": "simUI.clearTable(str handle, int id, bool suppressEvents=true)"
  },
  "simUI.clearTree": {
    "prefix": "simUI.clearTree",
    "body": ["simUI.clearTree($1, $2)"],
    "description": "simUI.clearTree(str handle, int id, bool suppressEvents=true)"
  },
  "simUI.collapseAll": {
    "prefix": "simUI.collapseAll",
    "body": ["simUI.collapseAll($1, $2)"],
    "description": "simUI.collapseAll(str handle, int id, bool suppressEvents=true)"
  },
  "simUI.colorDialog": {
    "prefix": "simUI.colorDialog",
    "body": ["simUI.colorDialog($1, $2)"],
    "description": "simUI.colorDialog(float[3..4] initColor={1, 1, 1}, str title=\"Select color\", bool showAlphaChannel=false, bool native=true)"
  },
  "simUI.create": {
    "prefix": "simUI.create",
    "body": ["simUI.create($1)"],
    "description": "simUI.create(str xml)"
  },
  "simUI.destroy": {
    "prefix": "simUI.destroy",
    "body": ["simUI.destroy($1)"],
    "description": "simUI.destroy(str handle)"
  },
  "simUI.expandAll": {
    "prefix": "simUI.expandAll",
    "body": ["simUI.expandAll($1, $2)"],
    "description": "simUI.expandAll(str handle, int id, bool suppressEvents=true)"
  },
  "simUI.expandToDepth": {
    "prefix": "simUI.expandToDepth",
    "body": ["simUI.expandToDepth($1, $2, $3)"],
    "description": "simUI.expandToDepth(str handle, int id, int depth, bool suppressEvents=true)"
  },
  "simUI.fileDialog": {
    "prefix": "simUI.fileDialog",
    "body": ["simUI.fileDialog($1, $2, $3, $4, $5, $6)"],
    "description": "simUI.fileDialog(int type, str title, str startPath, str initName, str extName, str ext, bool native=false)"
  },
  "simUI.getCheckboxValue": {
    "prefix": "simUI.getCheckboxValue",
    "body": ["simUI.getCheckboxValue($1, $2)"],
    "description": "simUI.getCheckboxValue(str handle, int id)"
  },
  "simUI.getColumnCount": {
    "prefix": "simUI.getColumnCount",
    "body": ["simUI.getColumnCount($1, $2)"],
    "description": "simUI.getColumnCount(str handle, int id)"
  },
  "simUI.getComboboxItemCount": {
    "prefix": "simUI.getComboboxItemCount",
    "body": ["simUI.getComboboxItemCount($1, $2)"],
    "description": "simUI.getComboboxItemCount(str handle, int id)"
  },
  "simUI.getComboboxItemText": {
    "prefix": "simUI.getComboboxItemText",
    "body": ["simUI.getComboboxItemText($1, $2, $3)"],
    "description": "simUI.getComboboxItemText(str handle, int id, int index)"
  },
  "simUI.getComboboxItems": {
    "prefix": "simUI.getComboboxItems",
    "body": ["simUI.getComboboxItems($1, $2)"],
    "description": "simUI.getComboboxItems(str handle, int id)"
  },
  "simUI.getComboboxSelectedIndex": {
    "prefix": "simUI.getComboboxSelectedIndex",
    "body": ["simUI.getComboboxSelectedIndex($1, $2)"],
    "description": "simUI.getComboboxSelectedIndex(str handle, int id)"
  },
  "simUI.getCurrentEditWidget": {
    "prefix": "simUI.getCurrentEditWidget",
    "body": ["simUI.getCurrentEditWidget($1)"],
    "description": "simUI.getCurrentEditWidget(str handle)"
  },
  "simUI.getCurrentTab": {
    "prefix": "simUI.getCurrentTab",
    "body": ["simUI.getCurrentTab($1, $2)"],
    "description": "simUI.getCurrentTab(str handle, int id)"
  },
  "simUI.getCurveData": {
    "prefix": "simUI.getCurveData",
    "body": ["simUI.getCurveData($1, $2, $3)"],
    "description": "simUI.getCurveData(str handle, int id, str name)"
  },
  "simUI.getEditValue": {
    "prefix": "simUI.getEditValue",
    "body": ["simUI.getEditValue($1, $2)"],
    "description": "simUI.getEditValue(str handle, int id)"
  },
  "simUI.getItem": {
    "prefix": "simUI.getItem",
    "body": ["simUI.getItem($1, $2, $3, $4)"],
    "description": "simUI.getItem(str handle, int id, int row, int column)"
  },
  "simUI.getKeyboardModifiers": {
    "prefix": "simUI.getKeyboardModifiers",
    "body": ["simUI.getKeyboardModifiers()"],
    "description": "simUI.getKeyboardModifiers()"
  },
  "simUI.getLabelText": {
    "prefix": "simUI.getLabelText",
    "body": ["simUI.getLabelText($1, $2)"],
    "description": "simUI.getLabelText(str handle, int id)"
  },
  "simUI.getPosition": {
    "prefix": "simUI.getPosition",
    "body": ["simUI.getPosition($1)"],
    "description": "simUI.getPosition(str handle)"
  },
  "simUI.getPropertiesState": {
    "prefix": "simUI.getPropertiesState",
    "body": ["simUI.getPropertiesState($1, $2)"],
    "description": "simUI.getPropertiesState(str handle, int id)"
  },
  "simUI.getRadiobuttonValue": {
    "prefix": "simUI.getRadiobuttonValue",
    "body": ["simUI.getRadiobuttonValue($1, $2)"],
    "description": "simUI.getRadiobuttonValue(str handle, int id)"
  },
  "simUI.getRowCount": {
    "prefix": "simUI.getRowCount",
    "body": ["simUI.getRowCount($1, $2)"],
    "description": "simUI.getRowCount(str handle, int id)"
  },
  "simUI.getSize": {
    "prefix": "simUI.getSize",
    "body": ["simUI.getSize($1)"],
    "description": "simUI.getSize(str handle)"
  },
  "simUI.getSliderValue": {
    "prefix": "simUI.getSliderValue",
    "body": ["simUI.getSliderValue($1, $2)"],
    "description": "simUI.getSliderValue(str handle, int id)"
  },
  "simUI.getSpinboxValue": {
    "prefix": "simUI.getSpinboxValue",
    "body": ["simUI.getSpinboxValue($1, $2)"],
    "description": "simUI.getSpinboxValue(str handle, int id)"
  },
  "simUI.getTitle": {
    "prefix": "simUI.getTitle",
    "body": ["simUI.getTitle($1)"],
    "description": "simUI.getTitle(str handle)"
  },
  "simUI.getWidgetVisibility": {
    "prefix": "simUI.getWidgetVisibility",
    "body": ["simUI.getWidgetVisibility($1, $2)"],
    "description": "simUI.getWidgetVisibility(str handle, int id)"
  },
  "simUI.growPlotRanges": {
    "prefix": "simUI.growPlotRanges",
    "body": ["simUI.growPlotRanges($1, $2, $3, $4, $5, $6)"],
    "description": "simUI.growPlotRanges(str handle, int id, float xmin, float xmax, float ymin, float ymax)"
  },
  "simUI.growPlotXRange": {
    "prefix": "simUI.growPlotXRange",
    "body": ["simUI.growPlotXRange($1, $2, $3, $4)"],
    "description": "simUI.growPlotXRange(str handle, int id, float xmin, float xmax)"
  },
  "simUI.growPlotYRange": {
    "prefix": "simUI.growPlotYRange",
    "body": ["simUI.growPlotYRange($1, $2, $3, $4)"],
    "description": "simUI.growPlotYRange(str handle, int id, float ymin, float ymax)"
  },
  "simUI.hide": {
    "prefix": "simUI.hide",
    "body": ["simUI.hide($1)"],
    "description": "simUI.hide(str handle)"
  },
  "simUI.inputDialog": {
    "prefix": "simUI.inputDialog",
    "body": ["simUI.inputDialog()"],
    "description": "simUI.inputDialog(str initValue=\"\", str label=\"Input value:\", str title=\"\")"
  },
  "simUI.insertComboboxItem": {
    "prefix": "simUI.insertComboboxItem",
    "body": ["simUI.insertComboboxItem($1, $2, $3, $4)"],
    "description": "simUI.insertComboboxItem(str handle, int id, int index, str text, bool suppressEvents=true)"
  },
  "simUI.insertTableColumn": {
    "prefix": "simUI.insertTableColumn",
    "body": ["simUI.insertTableColumn($1, $2, $3)"],
    "description": "simUI.insertTableColumn(int ui, int widget, int index)"
  },
  "simUI.insertTableRow": {
    "prefix": "simUI.insertTableRow",
    "body": ["simUI.insertTableRow($1, $2, $3)"],
    "description": "simUI.insertTableRow(int ui, int widget, int index)"
  },
  "simUI.isVisible": {
    "prefix": "simUI.isVisible",
    "body": ["simUI.isVisible($1)"],
    "description": "simUI.isVisible(str handle)"
  },
  "simUI.msgBox": {
    "prefix": "simUI.msgBox",
    "body": ["simUI.msgBox($1, $2, $3, $4)"],
    "description": "simUI.msgBox(int type, int buttons, str title, str message)"
  },
  "simUI.qtVersion": {
    "prefix": "simUI.qtVersion",
    "body": ["simUI.qtVersion()"],
    "description": "simUI.qtVersion()"
  },
  "simUI.removeComboboxItem": {
    "prefix": "simUI.removeComboboxItem",
    "body": ["simUI.removeComboboxItem($1, $2, $3)"],
    "description": "simUI.removeComboboxItem(str handle, int id, int index, bool suppressEvents=true)"
  },
  "simUI.removeCurve": {
    "prefix": "simUI.removeCurve",
    "body": ["simUI.removeCurve($1, $2, $3)"],
    "description": "simUI.removeCurve(str handle, int id, str name)"
  },
  "simUI.removeScene3DNode": {
    "prefix": "simUI.removeScene3DNode",
    "body": ["simUI.removeScene3DNode($1, $2, $3)"],
    "description": "simUI.removeScene3DNode(str handle, int id, int nodeId)"
  },
  "simUI.removeTableColumn": {
    "prefix": "simUI.removeTableColumn",
    "body": ["simUI.removeTableColumn($1, $2, $3)"],
    "description": "simUI.removeTableColumn(int ui, int widget, int index)"
  },
  "simUI.removeTableRow": {
    "prefix": "simUI.removeTableRow",
    "body": ["simUI.removeTableRow($1, $2, $3)"],
    "description": "simUI.removeTableRow(int ui, int widget, int index)"
  },
  "simUI.removeTreeItem": {
    "prefix": "simUI.removeTreeItem",
    "body": ["simUI.removeTreeItem($1, $2, $3)"],
    "description": "simUI.removeTreeItem(str handle, int id, int item_id, bool suppressEvents=true)"
  },
  "simUI.replot": {
    "prefix": "simUI.replot",
    "body": ["simUI.replot($1, $2)"],
    "description": "simUI.replot(str handle, int id)"
  },
  "simUI.rescaleAxes": {
    "prefix": "simUI.rescaleAxes",
    "body": ["simUI.rescaleAxes($1, $2, $3)"],
    "description": "simUI.rescaleAxes(str handle, int id, str name, bool onlyEnlargeX=false, bool onlyEnlargeY=false)"
  },
  "simUI.rescaleAxesAll": {
    "prefix": "simUI.rescaleAxesAll",
    "body": ["simUI.rescaleAxesAll($1, $2)"],
    "description": "simUI.rescaleAxesAll(str handle, int id, bool onlyEnlargeX=false, bool onlyEnlargeY=false)"
  },
  "simUI.restoreState": {
    "prefix": "simUI.restoreState",
    "body": ["simUI.restoreState($1, $2, $3)"],
    "description": "simUI.restoreState(str handle, int id, buffer state)"
  },
  "simUI.saveState": {
    "prefix": "simUI.saveState",
    "body": ["simUI.saveState($1, $2)"],
    "description": "simUI.saveState(str handle, int id)"
  },
  "simUI.setButtonPressed": {
    "prefix": "simUI.setButtonPressed",
    "body": ["simUI.setButtonPressed($1, $2, $3)"],
    "description": "simUI.setButtonPressed(str handle, int id, bool pressed)"
  },
  "simUI.setButtonText": {
    "prefix": "simUI.setButtonText",
    "body": ["simUI.setButtonText($1, $2, $3)"],
    "description": "simUI.setButtonText(str handle, int id, str text)"
  },
  "simUI.setCheckboxValue": {
    "prefix": "simUI.setCheckboxValue",
    "body": ["simUI.setCheckboxValue($1, $2, $3)"],
    "description": "simUI.setCheckboxValue(str handle, int id, int value, bool suppressEvents=true)"
  },
  "simUI.setClipboardText": {
    "prefix": "simUI.setClipboardText",
    "body": ["simUI.setClipboardText($1)"],
    "description": "simUI.setClipboardText(str text)"
  },
  "simUI.setColumnCount": {
    "prefix": "simUI.setColumnCount",
    "body": ["simUI.setColumnCount($1, $2, $3)"],
    "description": "simUI.setColumnCount(str handle, int id, int count, bool suppressEvents=true)"
  },
  "simUI.setColumnHeaderText": {
    "prefix": "simUI.setColumnHeaderText",
    "body": ["simUI.setColumnHeaderText($1, $2, $3, $4)"],
    "description": "simUI.setColumnHeaderText(str handle, int id, int column, str text)"
  },
  "simUI.setColumnWidth": {
    "prefix": "simUI.setColumnWidth",
    "body": ["simUI.setColumnWidth($1, $2, $3, $4, $5)"],
    "description": "simUI.setColumnWidth(str handle, int id, int column, int min_size, int max_size)"
  },
  "simUI.setComboboxItems": {
    "prefix": "simUI.setComboboxItems",
    "body": ["simUI.setComboboxItems($1, $2, $3, $4)"],
    "description": "simUI.setComboboxItems(str handle, int id, str[] items, int index, bool suppressEvents=true)"
  },
  "simUI.setComboboxSelectedIndex": {
    "prefix": "simUI.setComboboxSelectedIndex",
    "body": ["simUI.setComboboxSelectedIndex($1, $2, $3)"],
    "description": "simUI.setComboboxSelectedIndex(str handle, int id, int index, bool suppressEvents=true)"
  },
  "simUI.setCurrentEditWidget": {
    "prefix": "simUI.setCurrentEditWidget",
    "body": ["simUI.setCurrentEditWidget($1, $2)"],
    "description": "simUI.setCurrentEditWidget(str handle, int id)"
  },
  "simUI.setCurrentTab": {
    "prefix": "simUI.setCurrentTab",
    "body": ["simUI.setCurrentTab($1, $2, $3)"],
    "description": "simUI.setCurrentTab(str handle, int id, int index, bool suppressEvents=true)"
  },
  "simUI.setEditValue": {
    "prefix": "simUI.setEditValue",
    "body": ["simUI.setEditValue($1, $2, $3)"],
    "description": "simUI.setEditValue(str handle, int id, str value, bool suppressEvents=true)"
  },
  "simUI.setEnabled": {
    "prefix": "simUI.setEnabled",
    "body": ["simUI.setEnabled($1, $2, $3)"],
    "description": "simUI.setEnabled(str handle, int id, bool enabled, bool suppressEvents=true)"
  },
  "simUI.setImageData": {
    "prefix": "simUI.setImageData",
    "body": ["simUI.setImageData($1, $2, $3, $4, $5)"],
    "description": "simUI.setImageData(str handle, int id, buffer data, int width, int height)"
  },
  "simUI.setItem": {
    "prefix": "simUI.setItem",
    "body": ["simUI.setItem($1, $2, $3, $4, $5)"],
    "description": "simUI.setItem(str handle, int id, int row, int column, str text, bool suppressEvents=true)"
  },
  "simUI.setItemEditable": {
    "prefix": "simUI.setItemEditable",
    "body": ["simUI.setItemEditable($1, $2, $3, $4, $5)"],
    "description": "simUI.setItemEditable(str handle, int id, int row, int column, bool editable)"
  },
  "simUI.setItemImage": {
    "prefix": "simUI.setItemImage",
    "body": ["simUI.setItemImage($1, $2, $3, $4, $5, $6, $7)"],
    "description": "simUI.setItemImage(str handle, int id, int row, int column, str data, int width, int height, bool suppressEvents=true)"
  },
  "simUI.setItems": {
    "prefix": "simUI.setItems",
    "body": ["simUI.setItems($1, $2, $3)"],
    "description": "simUI.setItems(str handle, int id, str data, bool suppressEvents=true)"
  },
  "simUI.setLabelText": {
    "prefix": "simUI.setLabelText",
    "body": ["simUI.setLabelText($1, $2, $3)"],
    "description": "simUI.setLabelText(str handle, int id, str text, bool suppressEvents=true)"
  },
  "simUI.setLegendVisibility": {
    "prefix": "simUI.setLegendVisibility",
    "body": ["simUI.setLegendVisibility($1, $2, $3)"],
    "description": "simUI.setLegendVisibility(str handle, int id, bool visible)"
  },
  "simUI.setMouseOptions": {
    "prefix": "simUI.setMouseOptions",
    "body": ["simUI.setMouseOptions($1, $2, $3, $4, $5, $6)"],
    "description": "simUI.setMouseOptions(str handle, int id, bool panX, bool panY, bool zoomX, bool zoomY)"
  },
  "simUI.setPlotLabels": {
    "prefix": "simUI.setPlotLabels",
    "body": ["simUI.setPlotLabels($1, $2, $3, $4)"],
    "description": "simUI.setPlotLabels(str handle, int id, str x, str y)"
  },
  "simUI.setPlotRanges": {
    "prefix": "simUI.setPlotRanges",
    "body": ["simUI.setPlotRanges($1, $2, $3, $4, $5, $6)"],
    "description": "simUI.setPlotRanges(str handle, int id, float xmin, float xmax, float ymin, float ymax)"
  },
  "simUI.setPlotXLabel": {
    "prefix": "simUI.setPlotXLabel",
    "body": ["simUI.setPlotXLabel($1, $2, $3)"],
    "description": "simUI.setPlotXLabel(str handle, int id, str label)"
  },
  "simUI.setPlotXRange": {
    "prefix": "simUI.setPlotXRange",
    "body": ["simUI.setPlotXRange($1, $2, $3, $4)"],
    "description": "simUI.setPlotXRange(str handle, int id, float xmin, float xmax)"
  },
  "simUI.setPlotYLabel": {
    "prefix": "simUI.setPlotYLabel",
    "body": ["simUI.setPlotYLabel($1, $2, $3)"],
    "description": "simUI.setPlotYLabel(str handle, int id, str label)"
  },
  "simUI.setPlotYRange": {
    "prefix": "simUI.setPlotYRange",
    "body": ["simUI.setPlotYRange($1, $2, $3, $4)"],
    "description": "simUI.setPlotYRange(str handle, int id, float ymin, float ymax)"
  },
  "simUI.setPosition": {
    "prefix": "simUI.setPosition",
    "body": ["simUI.setPosition($1, $2, $3)"],
    "description": "simUI.setPosition(str handle, int x, int y, bool suppressEvents=true)"
  },
  "simUI.setProgress": {
    "prefix": "simUI.setProgress",
    "body": ["simUI.setProgress($1, $2, $3)"],
    "description": "simUI.setProgress(str handle, int id, int value)"
  },
  "simUI.setProperties": {
    "prefix": "simUI.setProperties",
    "body": ["simUI.setProperties($1, $2, $3, $4, $5, $6, $7, $8, $9)"],
    "description": "simUI.setProperties(str handle, int id, str[] pnames, str[] ptypes, str[] pvalues, int[] pflags, str[] pdisplayk, str[] pdisplayv, int[] icons, bool suppressEvents=true)"
  },
  "simUI.setPropertiesContextMenu": {
    "prefix": "simUI.setPropertiesContextMenu",
    "body": ["simUI.setPropertiesContextMenu($1, $2, $3, $4)"],
    "description": "simUI.setPropertiesContextMenu(str handle, int id, str[] keys, str[] titles)"
  },
  "simUI.setPropertiesRows": {
    "prefix": "simUI.setPropertiesRows",
    "body": ["simUI.setPropertiesRows($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)"],
    "description": "simUI.setPropertiesRows(str handle, int id, int[] rows, str[] pnames, str[] ptypes, str[] pvalues, int[] pflags, str[] pdisplayk, str[] pdisplayv, int[] icons, bool suppressEvents=true)"
  },
  "simUI.setPropertiesSelection": {
    "prefix": "simUI.setPropertiesSelection",
    "body": ["simUI.setPropertiesSelection($1, $2, $3)"],
    "description": "simUI.setPropertiesSelection(str handle, int id, int row, bool suppressEvents=true)"
  },
  "simUI.setPropertiesState": {
    "prefix": "simUI.setPropertiesState",
    "body": ["simUI.setPropertiesState($1, $2, $3)"],
    "description": "simUI.setPropertiesState(str handle, int id, str state)"
  },
  "simUI.setRadiobuttonValue": {
    "prefix": "simUI.setRadiobuttonValue",
    "body": ["simUI.setRadiobuttonValue($1, $2, $3)"],
    "description": "simUI.setRadiobuttonValue(str handle, int id, int value, bool suppressEvents=true)"
  },
  "simUI.setRowCount": {
    "prefix": "simUI.setRowCount",
    "body": ["simUI.setRowCount($1, $2, $3)"],
    "description": "simUI.setRowCount(str handle, int id, int count, bool suppressEvents=true)"
  },
  "simUI.setRowHeaderText": {
    "prefix": "simUI.setRowHeaderText",
    "body": ["simUI.setRowHeaderText($1, $2, $3, $4)"],
    "description": "simUI.setRowHeaderText(str handle, int id, int row, str text)"
  },
  "simUI.setRowHeight": {
    "prefix": "simUI.setRowHeight",
    "body": ["simUI.setRowHeight($1, $2, $3, $4, $5)"],
    "description": "simUI.setRowHeight(str handle, int id, int row, int min_size, int max_size)"
  },
  "simUI.setScene3DNodeEnabled": {
    "prefix": "simUI.setScene3DNodeEnabled",
    "body": ["simUI.setScene3DNodeEnabled($1, $2, $3, $4)"],
    "description": "simUI.setScene3DNodeEnabled(str handle, int id, int nodeId, bool enabled)"
  },
  "simUI.setScene3DNodeFloatParam": {
    "prefix": "simUI.setScene3DNodeFloatParam",
    "body": ["simUI.setScene3DNodeFloatParam($1, $2, $3, $4, $5)"],
    "description": "simUI.setScene3DNodeFloatParam(str handle, int id, int nodeId, str paramName, float value)"
  },
  "simUI.setScene3DNodeIntParam": {
    "prefix": "simUI.setScene3DNodeIntParam",
    "body": ["simUI.setScene3DNodeIntParam($1, $2, $3, $4, $5)"],
    "description": "simUI.setScene3DNodeIntParam(str handle, int id, int nodeId, str paramName, int value)"
  },
  "simUI.setScene3DNodeParam": {
    "prefix": "simUI.setScene3DNodeParam",
    "body": ["simUI.setScene3DNodeParam($1, $2, $3, $4, $5)"],
    "description": "simUI.setScene3DNodeParam(int ui, int widget, int nodeId, str paramName, any paramValue)"
  },
  "simUI.setScene3DNodeStringParam": {
    "prefix": "simUI.setScene3DNodeStringParam",
    "body": ["simUI.setScene3DNodeStringParam($1, $2, $3, $4, $5)"],
    "description": "simUI.setScene3DNodeStringParam(str handle, int id, int nodeId, str paramName, str value)"
  },
  "simUI.setScene3DNodeVector2Param": {
    "prefix": "simUI.setScene3DNodeVector2Param",
    "body": ["simUI.setScene3DNodeVector2Param($1, $2, $3, $4, $5, $6)"],
    "description": "simUI.setScene3DNodeVector2Param(str handle, int id, int nodeId, str paramName, float x, float y)"
  },
  "simUI.setScene3DNodeVector3Param": {
    "prefix": "simUI.setScene3DNodeVector3Param",
    "body": ["simUI.setScene3DNodeVector3Param($1, $2, $3, $4, $5, $6, $7)"],
    "description": "simUI.setScene3DNodeVector3Param(str handle, int id, int nodeId, str paramName, float x, float y, float z)"
  },
  "simUI.setScene3DNodeVector4Param": {
    "prefix": "simUI.setScene3DNodeVector4Param",
    "body": ["simUI.setScene3DNodeVector4Param($1, $2, $3, $4, $5, $6, $7, $8)"],
    "description": "simUI.setScene3DNodeVector4Param(str handle, int id, int nodeId, str paramName, float x, float y, float z, float w)"
  },
  "simUI.setSize": {
    "prefix": "simUI.setSize",
    "body": ["simUI.setSize($1, $2, $3)"],
    "description": "simUI.setSize(str handle, int w, int h, bool suppressEvents=true)"
  },
  "simUI.setSliderValue": {
    "prefix": "simUI.setSliderValue",
    "body": ["simUI.setSliderValue($1, $2, $3)"],
    "description": "simUI.setSliderValue(str handle, int id, int value, bool suppressEvents=true)"
  },
  "simUI.setSpinboxValue": {
    "prefix": "simUI.setSpinboxValue",
    "body": ["simUI.setSpinboxValue($1, $2, $3)"],
    "description": "simUI.setSpinboxValue(str handle, int id, float value, bool suppressEvents=true)"
  },
  "simUI.setStyleSheet": {
    "prefix": "simUI.setStyleSheet",
    "body": ["simUI.setStyleSheet($1, $2, $3)"],
    "description": "simUI.setStyleSheet(str handle, int id, str styleSheet)"
  },
  "simUI.setTableSelection": {
    "prefix": "simUI.setTableSelection",
    "body": ["simUI.setTableSelection($1, $2, $3, $4)"],
    "description": "simUI.setTableSelection(str handle, int id, int row, int column, bool suppressEvents=true)"
  },
  "simUI.setText": {
    "prefix": "simUI.setText",
    "body": ["simUI.setText($1, $2, $3)"],
    "description": "simUI.setText(str handle, int id, str text, bool suppressEvents=true)"
  },
  "simUI.setTitle": {
    "prefix": "simUI.setTitle",
    "body": ["simUI.setTitle($1, $2)"],
    "description": "simUI.setTitle(str handle, str title, bool suppressEvents=true)"
  },
  "simUI.setTreeSelection": {
    "prefix": "simUI.setTreeSelection",
    "body": ["simUI.setTreeSelection($1, $2, $3)"],
    "description": "simUI.setTreeSelection(str handle, int id, int item_id, bool suppressEvents=true)"
  },
  "simUI.setUrl": {
    "prefix": "simUI.setUrl",
    "body": ["simUI.setUrl($1, $2, $3)"],
    "description": "simUI.setUrl(str handle, int id, str url)"
  },
  "simUI.setWidgetVisibility": {
    "prefix": "simUI.setWidgetVisibility",
    "body": ["simUI.setWidgetVisibility($1, $2, $3)"],
    "description": "simUI.setWidgetVisibility(str handle, int id, bool visibility)"
  },
  "simUI.setWindowEnabled": {
    "prefix": "simUI.setWindowEnabled",
    "body": ["simUI.setWindowEnabled($1, $2)"],
    "description": "simUI.setWindowEnabled(str handle, bool enabled, bool suppressEvents=true)"
  },
  "simUI.show": {
    "prefix": "simUI.show",
    "body": ["simUI.show($1)"],
    "description": "simUI.show(str handle)"
  },
  "simUI.supportedImageFormats": {
    "prefix": "simUI.supportedImageFormats",
    "body": ["simUI.supportedImageFormats()"],
    "description": "simUI.supportedImageFormats(str separator=None)"
  },
  "simUI.svgLoadData": {
    "prefix": "simUI.svgLoadData",
    "body": ["simUI.svgLoadData($1, $2, $3)"],
    "description": "simUI.svgLoadData(str handle, int id, str data)"
  },
  "simUI.svgLoadFile": {
    "prefix": "simUI.svgLoadFile",
    "body": ["simUI.svgLoadFile($1, $2, $3)"],
    "description": "simUI.svgLoadFile(str handle, int id, str file)"
  },
  "simUI.updateTreeItemParent": {
    "prefix": "simUI.updateTreeItemParent",
    "body": ["simUI.updateTreeItemParent($1, $2, $3, $4)"],
    "description": "simUI.updateTreeItemParent(str handle, int id, int item_id, int parent_id, bool suppressEvents=true)"
  },
  "simUI.updateTreeItemText": {
    "prefix": "simUI.updateTreeItemText",
    "body": ["simUI.updateTreeItemText($1, $2, $3, $4)"],
    "description": "simUI.updateTreeItemText(str handle, int id, int item_id, str[] text)"
  },
  "simURDF.export": {
    "prefix": "simURDF.export",
    "body": ["simURDF.export($1, $2)"],
    "description": "simURDF.export(int origModel, str fileName, int options=0)"
  },
  "simURDF.import": {
    "prefix": "simURDF.import",
    "body": ["simURDF.import($1)"],
    "description": "simURDF.import(str urdf, int options=0, str packageStrReplace=None)"
  },
  "simURDF.sendTF": {
    "prefix": "simURDF.sendTF",
    "body": ["simURDF.sendTF($1, $2)"],
    "description": "simURDF.sendTF(int modelHandle, str fileName)"
  },
  "simURLDrop.getURL": {
    "prefix": "simURLDrop.getURL",
    "body": ["simURLDrop.getURL($1)"],
    "description": "simURLDrop.getURL(str url, int mode=simurldrop_download_mode_buffer)"
  },
  "simURLDrop.openURL": {
    "prefix": "simURLDrop.openURL",
    "body": ["simURLDrop.openURL($1)"],
    "description": "simURLDrop.openURL(str url)"
  },
  "simVision.addBuffer1ToWorkImg": {
    "prefix": "simVision.addBuffer1ToWorkImg",
    "body": ["simVision.addBuffer1ToWorkImg($1)"],
    "description": "simVision.addBuffer1ToWorkImg(int visionSensorHandle)"
  },
  "simVision.addWorkImgToBuffer1": {
    "prefix": "simVision.addWorkImgToBuffer1",
    "body": ["simVision.addWorkImgToBuffer1($1)"],
    "description": "simVision.addWorkImgToBuffer1(int visionSensorHandle)"
  },
  "simVision.binaryWorkImg": {
    "prefix": "simVision.binaryWorkImg",
    "body": ["simVision.binaryWorkImg($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)"],
    "description": "simVision.binaryWorkImg(int visionSensorHandle, float threshold, float oneProportion, float oneTol, float xCenter, float xCenterTol, float yCenter, float yCenterTol, float orient, float orientTol, float roundness, bool enableTrigger, list overlayColor={1.0, 0.0, 1.0})"
  },
  "simVision.blobDetectionOnWorkImg": {
    "prefix": "simVision.blobDetectionOnWorkImg",
    "body": ["simVision.blobDetectionOnWorkImg($1, $2, $3, $4, $5, $6)"],
    "description": "simVision.blobDetectionOnWorkImg(int visionSensorHandle, float threshold, float minBlobSize, bool modifyWorkImage, list overlayColor={1.0, 0.0, 1.0})"
  },
  "simVision.buffer1ToWorkImg": {
    "prefix": "simVision.buffer1ToWorkImg",
    "body": ["simVision.buffer1ToWorkImg($1)"],
    "description": "simVision.buffer1ToWorkImg(int visionSensorHandle)"
  },
  "simVision.buffer2ToWorkImg": {
    "prefix": "simVision.buffer2ToWorkImg",
    "body": ["simVision.buffer2ToWorkImg($1)"],
    "description": "simVision.buffer2ToWorkImg(int visionSensorHandle)"
  },
  "simVision.changedPixelsOnWorkImg": {
    "prefix": "simVision.changedPixelsOnWorkImg",
    "body": ["simVision.changedPixelsOnWorkImg($1, $2)"],
    "description": "simVision.changedPixelsOnWorkImg(int visionSensorHandle, float threshold)"
  },
  "simVision.circularCutWorkImg": {
    "prefix": "simVision.circularCutWorkImg",
    "body": ["simVision.circularCutWorkImg($1, $2, $3)"],
    "description": "simVision.circularCutWorkImg(int visionSensorHandle, float radius, bool copyToBuffer1)"
  },
  "simVision.colorSegmentationOnWorkImg": {
    "prefix": "simVision.colorSegmentationOnWorkImg",
    "body": ["simVision.colorSegmentationOnWorkImg($1, $2)"],
    "description": "simVision.colorSegmentationOnWorkImg(int visionSensorHandle, float maxColorColorDistance)"
  },
  "simVision.coordinatesFromWorkImg": {
    "prefix": "simVision.coordinatesFromWorkImg",
    "body": ["simVision.coordinatesFromWorkImg($1, $2, $3)"],
    "description": "simVision.coordinatesFromWorkImg(int visionSensorHandle, list xyPointCount, bool evenlySpacedInAngularSpace, bool returnColorData=false)"
  },
  "simVision.createVelodyneHDL64E": {
    "prefix": "simVision.createVelodyneHDL64E",
    "body": ["simVision.createVelodyneHDL64E($1, $2, $3)"],
    "description": "simVision.createVelodyneHDL64E(list visionSensorHandles, float frequency, int options=0, int pointSize=2, list coloring_closeFarDist={1, 5}, float displayScalingFactor=1)"
  },
  "simVision.createVelodyneVPL16": {
    "prefix": "simVision.createVelodyneVPL16",
    "body": ["simVision.createVelodyneVPL16($1, $2, $3)"],
    "description": "simVision.createVelodyneVPL16(list visionSensorHandles, float frequency, int options=0, int pointSize=2, list coloring_closeFarDist={1, 5}, float displayScalingFactor=1)"
  },
  "simVision.destroyVelodyneHDL64E": {
    "prefix": "simVision.destroyVelodyneHDL64E",
    "body": ["simVision.destroyVelodyneHDL64E($1)"],
    "description": "simVision.destroyVelodyneHDL64E(int velodyneHandle)"
  },
  "simVision.destroyVelodyneVPL16": {
    "prefix": "simVision.destroyVelodyneVPL16",
    "body": ["simVision.destroyVelodyneVPL16($1)"],
    "description": "simVision.destroyVelodyneVPL16(int velodyneHandle)"
  },
  "simVision.distort": {
    "prefix": "simVision.distort",
    "body": ["simVision.distort($1)"],
    "description": "simVision.distort(int visionSensorHandle, int[] pixelMap=None, float[] depthScalings=None)"
  },
  "simVision.edgeDetectionOnWorkImg": {
    "prefix": "simVision.edgeDetectionOnWorkImg",
    "body": ["simVision.edgeDetectionOnWorkImg($1, $2)"],
    "description": "simVision.edgeDetectionOnWorkImg(int visionSensorHandle, float threshold)"
  },
  "simVision.handleAnaglyphStereo": {
    "prefix": "simVision.handleAnaglyphStereo",
    "body": ["simVision.handleAnaglyphStereo($1, $2)"],
    "description": "simVision.handleAnaglyphStereo(int passiveVisionSensorHandle, list activeVisionSensorHandles, list leftAndRightColors=None)"
  },
  "simVision.handleSpherical": {
    "prefix": "simVision.handleSpherical",
    "body": ["simVision.handleSpherical($1, $2, $3, $4)"],
    "description": "simVision.handleSpherical(int passiveVisionSensorHandleForRGB, list activeVisionSensorHandles, float horizontalAngle, float verticalAngle, int passiveVisionSensorHandleForDepth=-1)"
  },
  "simVision.handleVelodyneHDL64E": {
    "prefix": "simVision.handleVelodyneHDL64E",
    "body": ["simVision.handleVelodyneHDL64E($1, $2)"],
    "description": "simVision.handleVelodyneHDL64E(int velodyneHandle, float dt)"
  },
  "simVision.handleVelodyneVPL16": {
    "prefix": "simVision.handleVelodyneVPL16",
    "body": ["simVision.handleVelodyneVPL16($1, $2)"],
    "description": "simVision.handleVelodyneVPL16(int velodyneHandle, float dt)"
  },
  "simVision.horizontalFlipWorkImg": {
    "prefix": "simVision.horizontalFlipWorkImg",
    "body": ["simVision.horizontalFlipWorkImg($1)"],
    "description": "simVision.horizontalFlipWorkImg(int visionSensorHandle)"
  },
  "simVision.intensityScaleOnWorkImg": {
    "prefix": "simVision.intensityScaleOnWorkImg",
    "body": ["simVision.intensityScaleOnWorkImg($1, $2, $3, $4)"],
    "description": "simVision.intensityScaleOnWorkImg(int visionSensorHandle, float start, float end, bool greyScale)"
  },
  "simVision.matrix3x3OnWorkImg": {
    "prefix": "simVision.matrix3x3OnWorkImg",
    "body": ["simVision.matrix3x3OnWorkImg($1, $2, $3)"],
    "description": "simVision.matrix3x3OnWorkImg(int visionSensorHandle, int passes, float multiplier, list matrix=None)"
  },
  "simVision.matrix5x5OnWorkImg": {
    "prefix": "simVision.matrix5x5OnWorkImg",
    "body": ["simVision.matrix5x5OnWorkImg($1, $2, $3)"],
    "description": "simVision.matrix5x5OnWorkImg(int visionSensorHandle, int passes, float multiplier, list matrix=None)"
  },
  "simVision.multiplyWorkImgWithBuffer1": {
    "prefix": "simVision.multiplyWorkImgWithBuffer1",
    "body": ["simVision.multiplyWorkImgWithBuffer1($1)"],
    "description": "simVision.multiplyWorkImgWithBuffer1(int visionSensorHandle)"
  },
  "simVision.normalizeWorkImg": {
    "prefix": "simVision.normalizeWorkImg",
    "body": ["simVision.normalizeWorkImg($1)"],
    "description": "simVision.normalizeWorkImg(int visionSensorHandle)"
  },
  "simVision.rectangularCutWorkImg": {
    "prefix": "simVision.rectangularCutWorkImg",
    "body": ["simVision.rectangularCutWorkImg($1, $2, $3)"],
    "description": "simVision.rectangularCutWorkImg(int visionSensorHandle, list sizes, bool copyToBuffer1)"
  },
  "simVision.resizeWorkImg": {
    "prefix": "simVision.resizeWorkImg",
    "body": ["simVision.resizeWorkImg($1, $2)"],
    "description": "simVision.resizeWorkImg(int visionSensorHandle, list scaling)"
  },
  "simVision.rotateWorkImg": {
    "prefix": "simVision.rotateWorkImg",
    "body": ["simVision.rotateWorkImg($1, $2)"],
    "description": "simVision.rotateWorkImg(int visionSensorHandle, float rotationAngle)"
  },
  "simVision.scaleAndOffsetWorkImg": {
    "prefix": "simVision.scaleAndOffsetWorkImg",
    "body": ["simVision.scaleAndOffsetWorkImg($1, $2, $3, $4, $5)"],
    "description": "simVision.scaleAndOffsetWorkImg(int visionSensorHandle, list preOffset, list scaling, list postOffset, bool rgb)"
  },
  "simVision.selectiveColorOnWorkImg": {
    "prefix": "simVision.selectiveColorOnWorkImg",
    "body": ["simVision.selectiveColorOnWorkImg($1, $2, $3, $4, $5, $6)"],
    "description": "simVision.selectiveColorOnWorkImg(int visionSensorHandle, list color, list colorTolerance, bool rgb, bool keep, bool removedPartToBuffer1)"
  },
  "simVision.sensorDepthMapToWorkImg": {
    "prefix": "simVision.sensorDepthMapToWorkImg",
    "body": ["simVision.sensorDepthMapToWorkImg($1)"],
    "description": "simVision.sensorDepthMapToWorkImg(int visionSensorHandle)"
  },
  "simVision.sensorImgToWorkImg": {
    "prefix": "simVision.sensorImgToWorkImg",
    "body": ["simVision.sensorImgToWorkImg($1)"],
    "description": "simVision.sensorImgToWorkImg(int visionSensorHandle)"
  },
  "simVision.sharpenWorkImg": {
    "prefix": "simVision.sharpenWorkImg",
    "body": ["simVision.sharpenWorkImg($1)"],
    "description": "simVision.sharpenWorkImg(int visionSensorHandle)"
  },
  "simVision.shiftWorkImg": {
    "prefix": "simVision.shiftWorkImg",
    "body": ["simVision.shiftWorkImg($1, $2, $3)"],
    "description": "simVision.shiftWorkImg(int visionSensorHandle, list shift, bool wrapAround)"
  },
  "simVision.subtractBuffer1FromWorkImg": {
    "prefix": "simVision.subtractBuffer1FromWorkImg",
    "body": ["simVision.subtractBuffer1FromWorkImg($1)"],
    "description": "simVision.subtractBuffer1FromWorkImg(int visionSensorHandle)"
  },
  "simVision.subtractWorkImgFromBuffer1": {
    "prefix": "simVision.subtractWorkImgFromBuffer1",
    "body": ["simVision.subtractWorkImgFromBuffer1($1)"],
    "description": "simVision.subtractWorkImgFromBuffer1(int visionSensorHandle)"
  },
  "simVision.swapBuffers": {
    "prefix": "simVision.swapBuffers",
    "body": ["simVision.swapBuffers($1)"],
    "description": "simVision.swapBuffers(int visionSensorHandle)"
  },
  "simVision.swapWorkImgWithBuffer1": {
    "prefix": "simVision.swapWorkImgWithBuffer1",
    "body": ["simVision.swapWorkImgWithBuffer1($1)"],
    "description": "simVision.swapWorkImgWithBuffer1(int visionSensorHandle)"
  },
  "simVision.uniformImgToWorkImg": {
    "prefix": "simVision.uniformImgToWorkImg",
    "body": ["simVision.uniformImgToWorkImg($1, $2)"],
    "description": "simVision.uniformImgToWorkImg(int visionSensorHandle, list color)"
  },
  "simVision.velodyneDataFromWorkImg": {
    "prefix": "simVision.velodyneDataFromWorkImg",
    "body": ["simVision.velodyneDataFromWorkImg($1, $2, $3)"],
    "description": "simVision.velodyneDataFromWorkImg(int visionSensorHandle, list xyPointCount, float vAngle, bool returnColorData=false)"
  },
  "simVision.verticalFlipWorkImg": {
    "prefix": "simVision.verticalFlipWorkImg",
    "body": ["simVision.verticalFlipWorkImg($1)"],
    "description": "simVision.verticalFlipWorkImg(int visionSensorHandle)"
  },
  "simVision.workImgToBuffer1": {
    "prefix": "simVision.workImgToBuffer1",
    "body": ["simVision.workImgToBuffer1($1)"],
    "description": "simVision.workImgToBuffer1(int visionSensorHandle)"
  },
  "simVision.workImgToBuffer2": {
    "prefix": "simVision.workImgToBuffer2",
    "body": ["simVision.workImgToBuffer2($1)"],
    "description": "simVision.workImgToBuffer2(int visionSensorHandle)"
  },
  "simVision.workImgToSensorDepthMap": {
    "prefix": "simVision.workImgToSensorDepthMap",
    "body": ["simVision.workImgToSensorDepthMap($1)"],
    "description": "simVision.workImgToSensorDepthMap(int visionSensorHandle, bool removeBuffer=true)"
  },
  "simVision.workImgToSensorImg": {
    "prefix": "simVision.workImgToSensorImg",
    "body": ["simVision.workImgToSensorImg($1)"],
    "description": "simVision.workImgToSensorImg(int visionSensorHandle, bool removeBuffer=true)"
  },
  "simWS.connect": {
    "prefix": "simWS.connect",
    "body": ["simWS.connect($1)"],
    "description": "simWS.connect(str uri)"
  },
  "simWS.disconnect": {
    "prefix": "simWS.disconnect",
    "body": ["simWS.disconnect($1)"],
    "description": "simWS.disconnect(str clientHandle)"
  },
  "simWS.send": {
    "prefix": "simWS.send",
    "body": ["simWS.send($1, $2, $3)"],
    "description": "simWS.send(str serverOrClientHandle, str connectionHandle, buffer data, int opcode=simws_opcode_text)"
  },
  "simWS.setCloseHandler": {
    "prefix": "simWS.setCloseHandler",
    "body": ["simWS.setCloseHandler($1, $2)"],
    "description": "simWS.setCloseHandler(str serverOrClientHandle, str callbackFn)"
  },
  "simWS.setFailHandler": {
    "prefix": "simWS.setFailHandler",
    "body": ["simWS.setFailHandler($1, $2)"],
    "description": "simWS.setFailHandler(str serverOrClientHandle, str callbackFn)"
  },
  "simWS.setHTTPHandler": {
    "prefix": "simWS.setHTTPHandler",
    "body": ["simWS.setHTTPHandler($1, $2)"],
    "description": "simWS.setHTTPHandler(str serverHandle, str callbackFn)"
  },
  "simWS.setMessageHandler": {
    "prefix": "simWS.setMessageHandler",
    "body": ["simWS.setMessageHandler($1, $2)"],
    "description": "simWS.setMessageHandler(str serverOrClientHandle, str callbackFn)"
  },
  "simWS.setOpenHandler": {
    "prefix": "simWS.setOpenHandler",
    "body": ["simWS.setOpenHandler($1, $2)"],
    "description": "simWS.setOpenHandler(str serverOrClientHandle, str callbackFn)"
  },
  "simWS.start": {
    "prefix": "simWS.start",
    "body": ["simWS.start($1)"],
    "description": "simWS.start(int listenPort)"
  },
  "simWS.stop": {
    "prefix": "simWS.stop",
    "body": ["simWS.stop($1)"],
    "description": "simWS.stop(str serverHandle)"
  },
  "simZMQ.bind": {
    "prefix": "simZMQ.bind",
    "body": ["simZMQ.bind($1, $2)"],
    "description": "simZMQ.bind(str socket, str endpoint)"
  },
  "simZMQ.close": {
    "prefix": "simZMQ.close",
    "body": ["simZMQ.close($1)"],
    "description": "simZMQ.close(str socket)"
  },
  "simZMQ.connect": {
    "prefix": "simZMQ.connect",
    "body": ["simZMQ.connect($1, $2)"],
    "description": "simZMQ.connect(str socket, str endpoint)"
  },
  "simZMQ.connect_peer": {
    "prefix": "simZMQ.connect_peer",
    "body": ["simZMQ.connect_peer($1, $2)"],
    "description": "simZMQ.connect_peer(str socket, str addr)"
  },
  "simZMQ.ctx_get": {
    "prefix": "simZMQ.ctx_get",
    "body": ["simZMQ.ctx_get($1, $2)"],
    "description": "simZMQ.ctx_get(str context, int option_name)"
  },
  "simZMQ.ctx_get_ext": {
    "prefix": "simZMQ.ctx_get_ext",
    "body": ["simZMQ.ctx_get_ext($1, $2)"],
    "description": "simZMQ.ctx_get_ext(str context, int option_name)"
  },
  "simZMQ.ctx_new": {
    "prefix": "simZMQ.ctx_new",
    "body": ["simZMQ.ctx_new()"],
    "description": "simZMQ.ctx_new()"
  },
  "simZMQ.ctx_set": {
    "prefix": "simZMQ.ctx_set",
    "body": ["simZMQ.ctx_set($1, $2, $3)"],
    "description": "simZMQ.ctx_set(str context, int option_name, int option_value)"
  },
  "simZMQ.ctx_set_ext": {
    "prefix": "simZMQ.ctx_set_ext",
    "body": ["simZMQ.ctx_set_ext($1, $2, $3)"],
    "description": "simZMQ.ctx_set_ext(str context, int option_name, buffer option_value)"
  },
  "simZMQ.ctx_shutdown": {
    "prefix": "simZMQ.ctx_shutdown",
    "body": ["simZMQ.ctx_shutdown($1)"],
    "description": "simZMQ.ctx_shutdown(str context)"
  },
  "simZMQ.ctx_singleton": {
    "prefix": "simZMQ.ctx_singleton",
    "body": ["simZMQ.ctx_singleton()"],
    "description": "simZMQ.ctx_singleton()"
  },
  "simZMQ.ctx_term": {
    "prefix": "simZMQ.ctx_term",
    "body": ["simZMQ.ctx_term($1)"],
    "description": "simZMQ.ctx_term(str context)"
  },
  "simZMQ.disconnect": {
    "prefix": "simZMQ.disconnect",
    "body": ["simZMQ.disconnect($1, $2)"],
    "description": "simZMQ.disconnect(str socket, str endpoint)"
  },
  "simZMQ.errnum": {
    "prefix": "simZMQ.errnum",
    "body": ["simZMQ.errnum()"],
    "description": "simZMQ.errnum()"
  },
  "simZMQ.getsockopt": {
    "prefix": "simZMQ.getsockopt",
    "body": ["simZMQ.getsockopt($1, $2, $3)"],
    "description": "simZMQ.getsockopt(str socket, int option_name, int option_len)"
  },
  "simZMQ.has": {
    "prefix": "simZMQ.has",
    "body": ["simZMQ.has($1)"],
    "description": "simZMQ.has(str capability)"
  },
  "simZMQ.join": {
    "prefix": "simZMQ.join",
    "body": ["simZMQ.join($1, $2)"],
    "description": "simZMQ.join(str socket, str group)"
  },
  "simZMQ.leave": {
    "prefix": "simZMQ.leave",
    "body": ["simZMQ.leave($1, $2)"],
    "description": "simZMQ.leave(str socket, str group)"
  },
  "simZMQ.msg_close": {
    "prefix": "simZMQ.msg_close",
    "body": ["simZMQ.msg_close($1)"],
    "description": "simZMQ.msg_close(str msg)"
  },
  "simZMQ.msg_copy": {
    "prefix": "simZMQ.msg_copy",
    "body": ["simZMQ.msg_copy($1, $2)"],
    "description": "simZMQ.msg_copy(str dest, str src)"
  },
  "simZMQ.msg_data": {
    "prefix": "simZMQ.msg_data",
    "body": ["simZMQ.msg_data($1)"],
    "description": "simZMQ.msg_data(str msg)"
  },
  "simZMQ.msg_destroy": {
    "prefix": "simZMQ.msg_destroy",
    "body": ["simZMQ.msg_destroy($1)"],
    "description": "simZMQ.msg_destroy(str msg)"
  },
  "simZMQ.msg_get": {
    "prefix": "simZMQ.msg_get",
    "body": ["simZMQ.msg_get($1, $2)"],
    "description": "simZMQ.msg_get(str msg, int property)"
  },
  "simZMQ.msg_gets": {
    "prefix": "simZMQ.msg_gets",
    "body": ["simZMQ.msg_gets($1, $2)"],
    "description": "simZMQ.msg_gets(str msg, str property)"
  },
  "simZMQ.msg_group": {
    "prefix": "simZMQ.msg_group",
    "body": ["simZMQ.msg_group($1)"],
    "description": "simZMQ.msg_group(str msg)"
  },
  "simZMQ.msg_init": {
    "prefix": "simZMQ.msg_init",
    "body": ["simZMQ.msg_init($1)"],
    "description": "simZMQ.msg_init(str msg)"
  },
  "simZMQ.msg_init_size": {
    "prefix": "simZMQ.msg_init_size",
    "body": ["simZMQ.msg_init_size($1, $2)"],
    "description": "simZMQ.msg_init_size(str msg, int size)"
  },
  "simZMQ.msg_more": {
    "prefix": "simZMQ.msg_more",
    "body": ["simZMQ.msg_more($1)"],
    "description": "simZMQ.msg_more(str msg)"
  },
  "simZMQ.msg_move": {
    "prefix": "simZMQ.msg_move",
    "body": ["simZMQ.msg_move($1, $2)"],
    "description": "simZMQ.msg_move(str dest, str src)"
  },
  "simZMQ.msg_new": {
    "prefix": "simZMQ.msg_new",
    "body": ["simZMQ.msg_new()"],
    "description": "simZMQ.msg_new()"
  },
  "simZMQ.msg_recv": {
    "prefix": "simZMQ.msg_recv",
    "body": ["simZMQ.msg_recv($1, $2, $3)"],
    "description": "simZMQ.msg_recv(str msg, str socket, int flags)"
  },
  "simZMQ.msg_routing_id": {
    "prefix": "simZMQ.msg_routing_id",
    "body": ["simZMQ.msg_routing_id($1)"],
    "description": "simZMQ.msg_routing_id(str msg)"
  },
  "simZMQ.msg_send": {
    "prefix": "simZMQ.msg_send",
    "body": ["simZMQ.msg_send($1, $2, $3)"],
    "description": "simZMQ.msg_send(str msg, str socket, int flags)"
  },
  "simZMQ.msg_set": {
    "prefix": "simZMQ.msg_set",
    "body": ["simZMQ.msg_set($1, $2, $3)"],
    "description": "simZMQ.msg_set(str msg, int property, int value)"
  },
  "simZMQ.msg_set_group": {
    "prefix": "simZMQ.msg_set_group",
    "body": ["simZMQ.msg_set_group($1, $2)"],
    "description": "simZMQ.msg_set_group(str msg, str group)"
  },
  "simZMQ.msg_set_routing_id": {
    "prefix": "simZMQ.msg_set_routing_id",
    "body": ["simZMQ.msg_set_routing_id($1, $2)"],
    "description": "simZMQ.msg_set_routing_id(str msg, int routing_id)"
  },
  "simZMQ.msg_size": {
    "prefix": "simZMQ.msg_size",
    "body": ["simZMQ.msg_size($1)"],
    "description": "simZMQ.msg_size(str msg)"
  },
  "simZMQ.poll": {
    "prefix": "simZMQ.poll",
    "body": ["simZMQ.poll($1, $2)"],
    "description": "simZMQ.poll(str[] sockets, int[] events, int timeout=0)"
  },
  "simZMQ.proxy": {
    "prefix": "simZMQ.proxy",
    "body": ["simZMQ.proxy($1, $2, $3)"],
    "description": "simZMQ.proxy(str frontend, str backend, str capture)"
  },
  "simZMQ.proxy_steerable": {
    "prefix": "simZMQ.proxy_steerable",
    "body": ["simZMQ.proxy_steerable($1, $2, $3, $4)"],
    "description": "simZMQ.proxy_steerable(str frontend, str backend, str capture, str control)"
  },
  "simZMQ.recv": {
    "prefix": "simZMQ.recv",
    "body": ["simZMQ.recv($1, $2)"],
    "description": "simZMQ.recv(str socket, int flags, int max_buf_size=None)"
  },
  "simZMQ.send": {
    "prefix": "simZMQ.send",
    "body": ["simZMQ.send($1, $2, $3)"],
    "description": "simZMQ.send(str socket, buffer data, int flags)"
  },
  "simZMQ.setsockopt": {
    "prefix": "simZMQ.setsockopt",
    "body": ["simZMQ.setsockopt($1, $2, $3)"],
    "description": "simZMQ.setsockopt(str socket, int option_name, buffer option_value)"
  },
  "simZMQ.socket": {
    "prefix": "simZMQ.socket",
    "body": ["simZMQ.socket($1, $2)"],
    "description": "simZMQ.socket(str context, int type)"
  },
  "simZMQ.socket_monitor": {
    "prefix": "simZMQ.socket_monitor",
    "body": ["simZMQ.socket_monitor($1, $2, $3)"],
    "description": "simZMQ.socket_monitor(str socket, str endpoint, int events)"
  },
  "simZMQ.strerror": {
    "prefix": "simZMQ.strerror",
    "body": ["simZMQ.strerror($1)"],
    "description": "simZMQ.strerror(int errnum)"
  },
  "simZMQ.unbind": {
    "prefix": "simZMQ.unbind",
    "body": ["simZMQ.unbind($1, $2)"],
    "description": "simZMQ.unbind(str socket, str endpoint)"
  },
  "simZMQ.version": {
    "prefix": "simZMQ.version",
    "body": ["simZMQ.version()"],
    "description": "simZMQ.version()"
  },
  "sim.arrayparam_ambient_light": {
    "prefix": "sim.arrayparam_ambient_light",
    "body": ["sim.arrayparam_ambient_light"],
  },
  "sim.arrayparam_background_color1": {
    "prefix": "sim.arrayparam_background_color1",
    "body": ["sim.arrayparam_background_color1"],
  },
  "sim.arrayparam_background_color2": {
    "prefix": "sim.arrayparam_background_color2",
    "body": ["sim.arrayparam_background_color2"],
  },
  "sim.arrayparam_fog": {
    "prefix": "sim.arrayparam_fog",
    "body": ["sim.arrayparam_fog"],
  },
  "sim.arrayparam_fog_color": {
    "prefix": "sim.arrayparam_fog_color",
    "body": ["sim.arrayparam_fog_color"],
  },
  "sim.arrayparam_gravity": {
    "prefix": "sim.arrayparam_gravity",
    "body": ["sim.arrayparam_gravity"],
  },
  "sim.arrayparam_random_euler": {
    "prefix": "sim.arrayparam_random_euler",
    "body": ["sim.arrayparam_random_euler"],
  },
  "sim.arrayparam_raydirection": {
    "prefix": "sim.arrayparam_raydirection",
    "body": ["sim.arrayparam_raydirection"],
  },
  "sim.arrayparam_rayorigin": {
    "prefix": "sim.arrayparam_rayorigin",
    "body": ["sim.arrayparam_rayorigin"],
  },
  "sim.boolparam_aux_clip_planes_enabled": {
    "prefix": "sim.boolparam_aux_clip_planes_enabled",
    "body": ["sim.boolparam_aux_clip_planes_enabled"],
  },
  "sim.boolparam_browser_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_browser_toolbarbutton_enabled",
    "body": ["sim.boolparam_browser_toolbarbutton_enabled"],
  },
  "sim.boolparam_browser_visible": {
    "prefix": "sim.boolparam_browser_visible",
    "body": ["sim.boolparam_browser_visible"],
  },
  "sim.boolparam_calcmodules_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_calcmodules_toolbarbutton_enabled",
    "body": ["sim.boolparam_calcmodules_toolbarbutton_enabled"],
  },
  "sim.boolparam_cansave": {
    "prefix": "sim.boolparam_cansave",
    "body": ["sim.boolparam_cansave"],
  },
  "sim.boolparam_console_visible": {
    "prefix": "sim.boolparam_console_visible",
    "body": ["sim.boolparam_console_visible"],
  },
  "sim.boolparam_display_enabled": {
    "prefix": "sim.boolparam_display_enabled",
    "body": ["sim.boolparam_display_enabled"],
  },
  "sim.boolparam_dynamics_handling_enabled": {
    "prefix": "sim.boolparam_dynamics_handling_enabled",
    "body": ["sim.boolparam_dynamics_handling_enabled"],
  },
  "sim.boolparam_execunsafe": {
    "prefix": "sim.boolparam_execunsafe",
    "body": ["sim.boolparam_execunsafe"],
  },
  "sim.boolparam_execunsafeext": {
    "prefix": "sim.boolparam_execunsafeext",
    "body": ["sim.boolparam_execunsafeext"],
  },
  "sim.boolparam_exit_request": {
    "prefix": "sim.boolparam_exit_request",
    "body": ["sim.boolparam_exit_request"],
  },
  "sim.boolparam_fog_enabled": {
    "prefix": "sim.boolparam_fog_enabled",
    "body": ["sim.boolparam_fog_enabled"],
  },
  "sim.boolparam_force_calcstruct_all": {
    "prefix": "sim.boolparam_force_calcstruct_all",
    "body": ["sim.boolparam_force_calcstruct_all"],
  },
  "sim.boolparam_force_calcstruct_all_visible": {
    "prefix": "sim.boolparam_force_calcstruct_all_visible",
    "body": ["sim.boolparam_force_calcstruct_all_visible"],
  },
  "sim.boolparam_full_model_copy_from_api": {
    "prefix": "sim.boolparam_full_model_copy_from_api",
    "body": ["sim.boolparam_full_model_copy_from_api"],
  },
  "sim.boolparam_fullscreen": {
    "prefix": "sim.boolparam_fullscreen",
    "body": ["sim.boolparam_fullscreen"],
  },
  "sim.boolparam_headless": {
    "prefix": "sim.boolparam_headless",
    "body": ["sim.boolparam_headless"],
  },
  "sim.boolparam_hierarchy_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_hierarchy_toolbarbutton_enabled",
    "body": ["sim.boolparam_hierarchy_toolbarbutton_enabled"],
  },
  "sim.boolparam_hierarchy_visible": {
    "prefix": "sim.boolparam_hierarchy_visible",
    "body": ["sim.boolparam_hierarchy_visible"],
  },
  "sim.boolparam_infotext_visible": {
    "prefix": "sim.boolparam_infotext_visible",
    "body": ["sim.boolparam_infotext_visible"],
  },
  "sim.boolparam_mirrors_enabled": {
    "prefix": "sim.boolparam_mirrors_enabled",
    "body": ["sim.boolparam_mirrors_enabled"],
  },
  "sim.boolparam_objectrotate_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_objectrotate_toolbarbutton_enabled",
    "body": ["sim.boolparam_objectrotate_toolbarbutton_enabled"],
  },
  "sim.boolparam_objectshift_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_objectshift_toolbarbutton_enabled",
    "body": ["sim.boolparam_objectshift_toolbarbutton_enabled"],
  },
  "sim.boolparam_objproperties_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_objproperties_toolbarbutton_enabled",
    "body": ["sim.boolparam_objproperties_toolbarbutton_enabled"],
  },
  "sim.boolparam_pause_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_pause_toolbarbutton_enabled",
    "body": ["sim.boolparam_pause_toolbarbutton_enabled"],
  },
  "sim.boolparam_play_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_play_toolbarbutton_enabled",
    "body": ["sim.boolparam_play_toolbarbutton_enabled"],
  },
  "sim.boolparam_rayvalid": {
    "prefix": "sim.boolparam_rayvalid",
    "body": ["sim.boolparam_rayvalid"],
  },
  "sim.boolparam_realtime_simulation": {
    "prefix": "sim.boolparam_realtime_simulation",
    "body": ["sim.boolparam_realtime_simulation"],
  },
  "sim.boolparam_rosinterface_donotrunmainscript": {
    "prefix": "sim.boolparam_rosinterface_donotrunmainscript",
    "body": ["sim.boolparam_rosinterface_donotrunmainscript"],
  },
  "sim.boolparam_scene_and_model_load_messages": {
    "prefix": "sim.boolparam_scene_and_model_load_messages",
    "body": ["sim.boolparam_scene_and_model_load_messages"],
  },
  "sim.boolparam_scene_closing": {
    "prefix": "sim.boolparam_scene_closing",
    "body": ["sim.boolparam_scene_closing"],
  },
  "sim.boolparam_shape_textures_are_visible": {
    "prefix": "sim.boolparam_shape_textures_are_visible",
    "body": ["sim.boolparam_shape_textures_are_visible"],
  },
  "sim.boolparam_statustext_open": {
    "prefix": "sim.boolparam_statustext_open",
    "body": ["sim.boolparam_statustext_open"],
  },
  "sim.boolparam_stop_toolbarbutton_enabled": {
    "prefix": "sim.boolparam_stop_toolbarbutton_enabled",
    "body": ["sim.boolparam_stop_toolbarbutton_enabled"],
  },
  "sim.boolparam_use_glfinish_cmd": {
    "prefix": "sim.boolparam_use_glfinish_cmd",
    "body": ["sim.boolparam_use_glfinish_cmd"],
  },
  "sim.boolparam_video_recording_triggered": {
    "prefix": "sim.boolparam_video_recording_triggered",
    "body": ["sim.boolparam_video_recording_triggered"],
  },
  "sim.boolparam_waiting_for_trigger": {
    "prefix": "sim.boolparam_waiting_for_trigger",
    "body": ["sim.boolparam_waiting_for_trigger"],
  },
  "sim.buffer_base64": {
    "prefix": "sim.buffer_base64",
    "body": ["sim.buffer_base64"],
  },
  "sim.buffer_clamp": {
    "prefix": "sim.buffer_clamp",
    "body": ["sim.buffer_clamp"],
  },
  "sim.buffer_double": {
    "prefix": "sim.buffer_double",
    "body": ["sim.buffer_double"],
  },
  "sim.buffer_float": {
    "prefix": "sim.buffer_float",
    "body": ["sim.buffer_float"],
  },
  "sim.buffer_int16": {
    "prefix": "sim.buffer_int16",
    "body": ["sim.buffer_int16"],
  },
  "sim.buffer_int32": {
    "prefix": "sim.buffer_int32",
    "body": ["sim.buffer_int32"],
  },
  "sim.buffer_int8": {
    "prefix": "sim.buffer_int8",
    "body": ["sim.buffer_int8"],
  },
  "sim.buffer_split": {
    "prefix": "sim.buffer_split",
    "body": ["sim.buffer_split"],
  },
  "sim.buffer_uint16": {
    "prefix": "sim.buffer_uint16",
    "body": ["sim.buffer_uint16"],
  },
  "sim.buffer_uint32": {
    "prefix": "sim.buffer_uint32",
    "body": ["sim.buffer_uint32"],
  },
  "sim.buffer_uint8": {
    "prefix": "sim.buffer_uint8",
    "body": ["sim.buffer_uint8"],
  },
  "sim.buffer_uint8argb": {
    "prefix": "sim.buffer_uint8argb",
    "body": ["sim.buffer_uint8argb"],
  },
  "sim.buffer_uint8bgr": {
    "prefix": "sim.buffer_uint8bgr",
    "body": ["sim.buffer_uint8bgr"],
  },
  "sim.buffer_uint8rgb": {
    "prefix": "sim.buffer_uint8rgb",
    "body": ["sim.buffer_uint8rgb"],
  },
  "sim.buffer_uint8rgba": {
    "prefix": "sim.buffer_uint8rgba",
    "body": ["sim.buffer_uint8rgba"],
  },
  "sim.bullet_body_angulardamping": {
    "prefix": "sim.bullet_body_angulardamping",
    "body": ["sim.bullet_body_angulardamping"],
  },
  "sim.bullet_body_autoshrinkconvex": {
    "prefix": "sim.bullet_body_autoshrinkconvex",
    "body": ["sim.bullet_body_autoshrinkconvex"],
  },
  "sim.bullet_body_bitcoded": {
    "prefix": "sim.bullet_body_bitcoded",
    "body": ["sim.bullet_body_bitcoded"],
  },
  "sim.bullet_body_friction": {
    "prefix": "sim.bullet_body_friction",
    "body": ["sim.bullet_body_friction"],
  },
  "sim.bullet_body_lineardamping": {
    "prefix": "sim.bullet_body_lineardamping",
    "body": ["sim.bullet_body_lineardamping"],
  },
  "sim.bullet_body_nondefaultcollisionmargingfactor": {
    "prefix": "sim.bullet_body_nondefaultcollisionmargingfactor",
    "body": ["sim.bullet_body_nondefaultcollisionmargingfactor"],
  },
  "sim.bullet_body_nondefaultcollisionmargingfactorconvex": {
    "prefix": "sim.bullet_body_nondefaultcollisionmargingfactorconvex",
    "body": ["sim.bullet_body_nondefaultcollisionmargingfactorconvex"],
  },
  "sim.bullet_body_oldfriction": {
    "prefix": "sim.bullet_body_oldfriction",
    "body": ["sim.bullet_body_oldfriction"],
  },
  "sim.bullet_body_restitution": {
    "prefix": "sim.bullet_body_restitution",
    "body": ["sim.bullet_body_restitution"],
  },
  "sim.bullet_body_sticky": {
    "prefix": "sim.bullet_body_sticky",
    "body": ["sim.bullet_body_sticky"],
  },
  "sim.bullet_body_usenondefaultcollisionmargin": {
    "prefix": "sim.bullet_body_usenondefaultcollisionmargin",
    "body": ["sim.bullet_body_usenondefaultcollisionmargin"],
  },
  "sim.bullet_body_usenondefaultcollisionmarginconvex": {
    "prefix": "sim.bullet_body_usenondefaultcollisionmarginconvex",
    "body": ["sim.bullet_body_usenondefaultcollisionmarginconvex"],
  },
  "sim.bullet_constraintsolvertype_dantzig": {
    "prefix": "sim.bullet_constraintsolvertype_dantzig",
    "body": ["sim.bullet_constraintsolvertype_dantzig"],
  },
  "sim.bullet_constraintsolvertype_nncg": {
    "prefix": "sim.bullet_constraintsolvertype_nncg",
    "body": ["sim.bullet_constraintsolvertype_nncg"],
  },
  "sim.bullet_constraintsolvertype_projectedgaussseidel": {
    "prefix": "sim.bullet_constraintsolvertype_projectedgaussseidel",
    "body": ["sim.bullet_constraintsolvertype_projectedgaussseidel"],
  },
  "sim.bullet_constraintsolvertype_sequentialimpulse": {
    "prefix": "sim.bullet_constraintsolvertype_sequentialimpulse",
    "body": ["sim.bullet_constraintsolvertype_sequentialimpulse"],
  },
  "sim.bullet_global_bitcoded": {
    "prefix": "sim.bullet_global_bitcoded",
    "body": ["sim.bullet_global_bitcoded"],
  },
  "sim.bullet_global_collisionmarginfactor": {
    "prefix": "sim.bullet_global_collisionmarginfactor",
    "body": ["sim.bullet_global_collisionmarginfactor"],
  },
  "sim.bullet_global_computeinertias": {
    "prefix": "sim.bullet_global_computeinertias",
    "body": ["sim.bullet_global_computeinertias"],
  },
  "sim.bullet_global_constraintsolvertype": {
    "prefix": "sim.bullet_global_constraintsolvertype",
    "body": ["sim.bullet_global_constraintsolvertype"],
  },
  "sim.bullet_global_constraintsolvingiterations": {
    "prefix": "sim.bullet_global_constraintsolvingiterations",
    "body": ["sim.bullet_global_constraintsolvingiterations"],
  },
  "sim.bullet_global_fullinternalscaling": {
    "prefix": "sim.bullet_global_fullinternalscaling",
    "body": ["sim.bullet_global_fullinternalscaling"],
  },
  "sim.bullet_global_internalscalingfactor": {
    "prefix": "sim.bullet_global_internalscalingfactor",
    "body": ["sim.bullet_global_internalscalingfactor"],
  },
  "sim.bullet_joint_normalcfm": {
    "prefix": "sim.bullet_joint_normalcfm",
    "body": ["sim.bullet_joint_normalcfm"],
  },
  "sim.bullet_joint_pospid1": {
    "prefix": "sim.bullet_joint_pospid1",
    "body": ["sim.bullet_joint_pospid1"],
  },
  "sim.bullet_joint_pospid2": {
    "prefix": "sim.bullet_joint_pospid2",
    "body": ["sim.bullet_joint_pospid2"],
  },
  "sim.bullet_joint_pospid3": {
    "prefix": "sim.bullet_joint_pospid3",
    "body": ["sim.bullet_joint_pospid3"],
  },
  "sim.bullet_joint_stopcfm": {
    "prefix": "sim.bullet_joint_stopcfm",
    "body": ["sim.bullet_joint_stopcfm"],
  },
  "sim.bullet_joint_stoperp": {
    "prefix": "sim.bullet_joint_stoperp",
    "body": ["sim.bullet_joint_stoperp"],
  },
  "sim.camerafarrayparam_viewfrustum": {
    "prefix": "sim.camerafarrayparam_viewfrustum",
    "body": ["sim.camerafarrayparam_viewfrustum"],
  },
  "sim.camerafloatparam_far_clipping": {
    "prefix": "sim.camerafloatparam_far_clipping",
    "body": ["sim.camerafloatparam_far_clipping"],
  },
  "sim.camerafloatparam_near_clipping": {
    "prefix": "sim.camerafloatparam_near_clipping",
    "body": ["sim.camerafloatparam_near_clipping"],
  },
  "sim.camerafloatparam_ortho_size": {
    "prefix": "sim.camerafloatparam_ortho_size",
    "body": ["sim.camerafloatparam_ortho_size"],
  },
  "sim.camerafloatparam_perspective_angle": {
    "prefix": "sim.camerafloatparam_perspective_angle",
    "body": ["sim.camerafloatparam_perspective_angle"],
  },
  "sim.camerafloatparam_pov_aperture": {
    "prefix": "sim.camerafloatparam_pov_aperture",
    "body": ["sim.camerafloatparam_pov_aperture"],
  },
  "sim.camerafloatparam_pov_blur_distance": {
    "prefix": "sim.camerafloatparam_pov_blur_distance",
    "body": ["sim.camerafloatparam_pov_blur_distance"],
  },
  "sim.cameraintparam_disabled_light_components": {
    "prefix": "sim.cameraintparam_disabled_light_components",
    "body": ["sim.cameraintparam_disabled_light_components"],
  },
  "sim.cameraintparam_perspective_operation": {
    "prefix": "sim.cameraintparam_perspective_operation",
    "body": ["sim.cameraintparam_perspective_operation"],
  },
  "sim.cameraintparam_pov_blur_samples": {
    "prefix": "sim.cameraintparam_pov_blur_samples",
    "body": ["sim.cameraintparam_pov_blur_samples"],
  },
  "sim.cameraintparam_pov_focal_blur": {
    "prefix": "sim.cameraintparam_pov_focal_blur",
    "body": ["sim.cameraintparam_pov_focal_blur"],
  },
  "sim.cameraintparam_remotecameramode": {
    "prefix": "sim.cameraintparam_remotecameramode",
    "body": ["sim.cameraintparam_remotecameramode"],
  },
  "sim.cameraintparam_rendering_attributes": {
    "prefix": "sim.cameraintparam_rendering_attributes",
    "body": ["sim.cameraintparam_rendering_attributes"],
  },
  "sim.cameraintparam_trackedobject": {
    "prefix": "sim.cameraintparam_trackedobject",
    "body": ["sim.cameraintparam_trackedobject"],
  },
  "sim.colorcomponent_ambient": {
    "prefix": "sim.colorcomponent_ambient",
    "body": ["sim.colorcomponent_ambient"],
  },
  "sim.colorcomponent_ambient_diffuse": {
    "prefix": "sim.colorcomponent_ambient_diffuse",
    "body": ["sim.colorcomponent_ambient_diffuse"],
  },
  "sim.colorcomponent_auxiliary": {
    "prefix": "sim.colorcomponent_auxiliary",
    "body": ["sim.colorcomponent_auxiliary"],
  },
  "sim.colorcomponent_diffuse": {
    "prefix": "sim.colorcomponent_diffuse",
    "body": ["sim.colorcomponent_diffuse"],
  },
  "sim.colorcomponent_emission": {
    "prefix": "sim.colorcomponent_emission",
    "body": ["sim.colorcomponent_emission"],
  },
  "sim.colorcomponent_specular": {
    "prefix": "sim.colorcomponent_specular",
    "body": ["sim.colorcomponent_specular"],
  },
  "sim.colorcomponent_transparency": {
    "prefix": "sim.colorcomponent_transparency",
    "body": ["sim.colorcomponent_transparency"],
  },
  "sim.displayattribute_colorcoded": {
    "prefix": "sim.displayattribute_colorcoded",
    "body": ["sim.displayattribute_colorcoded"],
  },
  "sim.displayattribute_colorcodedpickpass": {
    "prefix": "sim.displayattribute_colorcodedpickpass",
    "body": ["sim.displayattribute_colorcodedpickpass"],
  },
  "sim.displayattribute_colorcodedtriangles": {
    "prefix": "sim.displayattribute_colorcodedtriangles",
    "body": ["sim.displayattribute_colorcodedtriangles"],
  },
  "sim.displayattribute_depthpass": {
    "prefix": "sim.displayattribute_depthpass",
    "body": ["sim.displayattribute_depthpass"],
  },
  "sim.displayattribute_dynamiccontentonly": {
    "prefix": "sim.displayattribute_dynamiccontentonly",
    "body": ["sim.displayattribute_dynamiccontentonly"],
  },
  "sim.displayattribute_forbidedges": {
    "prefix": "sim.displayattribute_forbidedges",
    "body": ["sim.displayattribute_forbidedges"],
  },
  "sim.displayattribute_forbidwireframe": {
    "prefix": "sim.displayattribute_forbidwireframe",
    "body": ["sim.displayattribute_forbidwireframe"],
  },
  "sim.displayattribute_forcewireframe": {
    "prefix": "sim.displayattribute_forcewireframe",
    "body": ["sim.displayattribute_forcewireframe"],
  },
  "sim.displayattribute_forvisionsensor": {
    "prefix": "sim.displayattribute_forvisionsensor",
    "body": ["sim.displayattribute_forvisionsensor"],
  },
  "sim.displayattribute_ignorelayer": {
    "prefix": "sim.displayattribute_ignorelayer",
    "body": ["sim.displayattribute_ignorelayer"],
  },
  "sim.displayattribute_ignorerenderableflag": {
    "prefix": "sim.displayattribute_ignorerenderableflag",
    "body": ["sim.displayattribute_ignorerenderableflag"],
  },
  "sim.displayattribute_mainselection": {
    "prefix": "sim.displayattribute_mainselection",
    "body": ["sim.displayattribute_mainselection"],
  },
  "sim.displayattribute_mirror": {
    "prefix": "sim.displayattribute_mirror",
    "body": ["sim.displayattribute_mirror"],
  },
  "sim.displayattribute_nodrawingobjects": {
    "prefix": "sim.displayattribute_nodrawingobjects",
    "body": ["sim.displayattribute_nodrawingobjects"],
  },
  "sim.displayattribute_noghosts": {
    "prefix": "sim.displayattribute_noghosts",
    "body": ["sim.displayattribute_noghosts"],
  },
  "sim.displayattribute_noopenglcallbacks": {
    "prefix": "sim.displayattribute_noopenglcallbacks",
    "body": ["sim.displayattribute_noopenglcallbacks"],
  },
  "sim.displayattribute_noparticles": {
    "prefix": "sim.displayattribute_noparticles",
    "body": ["sim.displayattribute_noparticles"],
  },
  "sim.displayattribute_nopointclouds": {
    "prefix": "sim.displayattribute_nopointclouds",
    "body": ["sim.displayattribute_nopointclouds"],
  },
  "sim.displayattribute_originalcolors": {
    "prefix": "sim.displayattribute_originalcolors",
    "body": ["sim.displayattribute_originalcolors"],
  },
  "sim.displayattribute_pickpass": {
    "prefix": "sim.displayattribute_pickpass",
    "body": ["sim.displayattribute_pickpass"],
  },
  "sim.displayattribute_renderpass": {
    "prefix": "sim.displayattribute_renderpass",
    "body": ["sim.displayattribute_renderpass"],
  },
  "sim.displayattribute_selected": {
    "prefix": "sim.displayattribute_selected",
    "body": ["sim.displayattribute_selected"],
  },
  "sim.displayattribute_thickEdges": {
    "prefix": "sim.displayattribute_thickEdges",
    "body": ["sim.displayattribute_thickEdges"],
  },
  "sim.displayattribute_trianglewireframe": {
    "prefix": "sim.displayattribute_trianglewireframe",
    "body": ["sim.displayattribute_trianglewireframe"],
  },
  "sim.displayattribute_useauxcomponent": {
    "prefix": "sim.displayattribute_useauxcomponent",
    "body": ["sim.displayattribute_useauxcomponent"],
  },
  "sim.drawing_cubepts": {
    "prefix": "sim.drawing_cubepts",
    "body": ["sim.drawing_cubepts"],
  },
  "sim.drawing_cyclic": {
    "prefix": "sim.drawing_cyclic",
    "body": ["sim.drawing_cyclic"],
  },
  "sim.drawing_discpts": {
    "prefix": "sim.drawing_discpts",
    "body": ["sim.drawing_discpts"],
  },
  "sim.drawing_lines": {
    "prefix": "sim.drawing_lines",
    "body": ["sim.drawing_lines"],
  },
  "sim.drawing_linestrip": {
    "prefix": "sim.drawing_linestrip",
    "body": ["sim.drawing_linestrip"],
  },
  "sim.drawing_local": {
    "prefix": "sim.drawing_local",
    "body": ["sim.drawing_local"],
  },
  "sim.drawing_overlay": {
    "prefix": "sim.drawing_overlay",
    "body": ["sim.drawing_overlay"],
  },
  "sim.drawing_painttag": {
    "prefix": "sim.drawing_painttag",
    "body": ["sim.drawing_painttag"],
  },
  "sim.drawing_points": {
    "prefix": "sim.drawing_points",
    "body": ["sim.drawing_points"],
  },
  "sim.drawing_quadpts": {
    "prefix": "sim.drawing_quadpts",
    "body": ["sim.drawing_quadpts"],
  },
  "sim.drawing_spherepts": {
    "prefix": "sim.drawing_spherepts",
    "body": ["sim.drawing_spherepts"],
  },
  "sim.drawing_trianglepts": {
    "prefix": "sim.drawing_trianglepts",
    "body": ["sim.drawing_trianglepts"],
  },
  "sim.drawing_triangles": {
    "prefix": "sim.drawing_triangles",
    "body": ["sim.drawing_triangles"],
  },
  "sim.dummyfloatparam_size": {
    "prefix": "sim.dummyfloatparam_size",
    "body": ["sim.dummyfloatparam_size"],
  },
  "sim.dummyintparam_dummytype": {
    "prefix": "sim.dummyintparam_dummytype",
    "body": ["sim.dummyintparam_dummytype"],
  },
  "sim.dummystringparam_assemblytag": {
    "prefix": "sim.dummystringparam_assemblytag",
    "body": ["sim.dummystringparam_assemblytag"],
  },
  "sim.dummytype_assembly": {
    "prefix": "sim.dummytype_assembly",
    "body": ["sim.dummytype_assembly"],
  },
  "sim.dummytype_default": {
    "prefix": "sim.dummytype_default",
    "body": ["sim.dummytype_default"],
  },
  "sim.dummytype_dynloopclosure": {
    "prefix": "sim.dummytype_dynloopclosure",
    "body": ["sim.dummytype_dynloopclosure"],
  },
  "sim.dummytype_dyntendon": {
    "prefix": "sim.dummytype_dyntendon",
    "body": ["sim.dummytype_dyntendon"],
  },
  "sim.dynmat_default": {
    "prefix": "sim.dynmat_default",
    "body": ["sim.dynmat_default"],
  },
  "sim.dynmat_floor": {
    "prefix": "sim.dynmat_floor",
    "body": ["sim.dynmat_floor"],
  },
  "sim.dynmat_foot": {
    "prefix": "sim.dynmat_foot",
    "body": ["sim.dynmat_foot"],
  },
  "sim.dynmat_gripper": {
    "prefix": "sim.dynmat_gripper",
    "body": ["sim.dynmat_gripper"],
  },
  "sim.dynmat_highfriction": {
    "prefix": "sim.dynmat_highfriction",
    "body": ["sim.dynmat_highfriction"],
  },
  "sim.dynmat_lowfriction": {
    "prefix": "sim.dynmat_lowfriction",
    "body": ["sim.dynmat_lowfriction"],
  },
  "sim.dynmat_nofriction": {
    "prefix": "sim.dynmat_nofriction",
    "body": ["sim.dynmat_nofriction"],
  },
  "sim.dynmat_reststackgrasp": {
    "prefix": "sim.dynmat_reststackgrasp",
    "body": ["sim.dynmat_reststackgrasp"],
  },
  "sim.dynmat_wheel": {
    "prefix": "sim.dynmat_wheel",
    "body": ["sim.dynmat_wheel"],
  },
  "sim.filtercomponent_3x3filter": {
    "prefix": "sim.filtercomponent_3x3filter",
    "body": ["sim.filtercomponent_3x3filter"],
  },
  "sim.filtercomponent_5x5filter": {
    "prefix": "sim.filtercomponent_5x5filter",
    "body": ["sim.filtercomponent_5x5filter"],
  },
  "sim.filtercomponent_addbuffer1": {
    "prefix": "sim.filtercomponent_addbuffer1",
    "body": ["sim.filtercomponent_addbuffer1"],
  },
  "sim.filtercomponent_addtobuffer1": {
    "prefix": "sim.filtercomponent_addtobuffer1",
    "body": ["sim.filtercomponent_addtobuffer1"],
  },
  "sim.filtercomponent_binary": {
    "prefix": "sim.filtercomponent_binary",
    "body": ["sim.filtercomponent_binary"],
  },
  "sim.filtercomponent_blobextraction": {
    "prefix": "sim.filtercomponent_blobextraction",
    "body": ["sim.filtercomponent_blobextraction"],
  },
  "sim.filtercomponent_circularcut": {
    "prefix": "sim.filtercomponent_circularcut",
    "body": ["sim.filtercomponent_circularcut"],
  },
  "sim.filtercomponent_colorsegmentation": {
    "prefix": "sim.filtercomponent_colorsegmentation",
    "body": ["sim.filtercomponent_colorsegmentation"],
  },
  "sim.filtercomponent_correlationwithbuffer1": {
    "prefix": "sim.filtercomponent_correlationwithbuffer1",
    "body": ["sim.filtercomponent_correlationwithbuffer1"],
  },
  "sim.filtercomponent_customized": {
    "prefix": "sim.filtercomponent_customized",
    "body": ["sim.filtercomponent_customized"],
  },
  "sim.filtercomponent_edge": {
    "prefix": "sim.filtercomponent_edge",
    "body": ["sim.filtercomponent_edge"],
  },
  "sim.filtercomponent_frombuffer1": {
    "prefix": "sim.filtercomponent_frombuffer1",
    "body": ["sim.filtercomponent_frombuffer1"],
  },
  "sim.filtercomponent_frombuffer2": {
    "prefix": "sim.filtercomponent_frombuffer2",
    "body": ["sim.filtercomponent_frombuffer2"],
  },
  "sim.filtercomponent_horizontalflip": {
    "prefix": "sim.filtercomponent_horizontalflip",
    "body": ["sim.filtercomponent_horizontalflip"],
  },
  "sim.filtercomponent_imagetocoord": {
    "prefix": "sim.filtercomponent_imagetocoord",
    "body": ["sim.filtercomponent_imagetocoord"],
  },
  "sim.filtercomponent_intensityscale": {
    "prefix": "sim.filtercomponent_intensityscale",
    "body": ["sim.filtercomponent_intensityscale"],
  },
  "sim.filtercomponent_keeporremovecolors": {
    "prefix": "sim.filtercomponent_keeporremovecolors",
    "body": ["sim.filtercomponent_keeporremovecolors"],
  },
  "sim.filtercomponent_multiplywithbuffer1": {
    "prefix": "sim.filtercomponent_multiplywithbuffer1",
    "body": ["sim.filtercomponent_multiplywithbuffer1"],
  },
  "sim.filtercomponent_normalize": {
    "prefix": "sim.filtercomponent_normalize",
    "body": ["sim.filtercomponent_normalize"],
  },
  "sim.filtercomponent_originaldepth": {
    "prefix": "sim.filtercomponent_originaldepth",
    "body": ["sim.filtercomponent_originaldepth"],
  },
  "sim.filtercomponent_originalimage": {
    "prefix": "sim.filtercomponent_originalimage",
    "body": ["sim.filtercomponent_originalimage"],
  },
  "sim.filtercomponent_pixelchange": {
    "prefix": "sim.filtercomponent_pixelchange",
    "body": ["sim.filtercomponent_pixelchange"],
  },
  "sim.filtercomponent_rectangularcut": {
    "prefix": "sim.filtercomponent_rectangularcut",
    "body": ["sim.filtercomponent_rectangularcut"],
  },
  "sim.filtercomponent_resize": {
    "prefix": "sim.filtercomponent_resize",
    "body": ["sim.filtercomponent_resize"],
  },
  "sim.filtercomponent_rotate": {
    "prefix": "sim.filtercomponent_rotate",
    "body": ["sim.filtercomponent_rotate"],
  },
  "sim.filtercomponent_scaleandoffsetcolors": {
    "prefix": "sim.filtercomponent_scaleandoffsetcolors",
    "body": ["sim.filtercomponent_scaleandoffsetcolors"],
  },
  "sim.filtercomponent_sharpen": {
    "prefix": "sim.filtercomponent_sharpen",
    "body": ["sim.filtercomponent_sharpen"],
  },
  "sim.filtercomponent_shift": {
    "prefix": "sim.filtercomponent_shift",
    "body": ["sim.filtercomponent_shift"],
  },
  "sim.filtercomponent_subtractbuffer1": {
    "prefix": "sim.filtercomponent_subtractbuffer1",
    "body": ["sim.filtercomponent_subtractbuffer1"],
  },
  "sim.filtercomponent_subtractfrombuffer1": {
    "prefix": "sim.filtercomponent_subtractfrombuffer1",
    "body": ["sim.filtercomponent_subtractfrombuffer1"],
  },
  "sim.filtercomponent_swapbuffers": {
    "prefix": "sim.filtercomponent_swapbuffers",
    "body": ["sim.filtercomponent_swapbuffers"],
  },
  "sim.filtercomponent_swapwithbuffer1": {
    "prefix": "sim.filtercomponent_swapwithbuffer1",
    "body": ["sim.filtercomponent_swapwithbuffer1"],
  },
  "sim.filtercomponent_tobuffer1": {
    "prefix": "sim.filtercomponent_tobuffer1",
    "body": ["sim.filtercomponent_tobuffer1"],
  },
  "sim.filtercomponent_tobuffer2": {
    "prefix": "sim.filtercomponent_tobuffer2",
    "body": ["sim.filtercomponent_tobuffer2"],
  },
  "sim.filtercomponent_todepthoutput": {
    "prefix": "sim.filtercomponent_todepthoutput",
    "body": ["sim.filtercomponent_todepthoutput"],
  },
  "sim.filtercomponent_tooutput": {
    "prefix": "sim.filtercomponent_tooutput",
    "body": ["sim.filtercomponent_tooutput"],
  },
  "sim.filtercomponent_uniformimage": {
    "prefix": "sim.filtercomponent_uniformimage",
    "body": ["sim.filtercomponent_uniformimage"],
  },
  "sim.filtercomponent_velodyne": {
    "prefix": "sim.filtercomponent_velodyne",
    "body": ["sim.filtercomponent_velodyne"],
  },
  "sim.filtercomponent_verticalflip": {
    "prefix": "sim.filtercomponent_verticalflip",
    "body": ["sim.filtercomponent_verticalflip"],
  },
  "sim.floatparam_dynamic_step_size": {
    "prefix": "sim.floatparam_dynamic_step_size",
    "body": ["sim.floatparam_dynamic_step_size"],
  },
  "sim.floatparam_maxtrisizeabs": {
    "prefix": "sim.floatparam_maxtrisizeabs",
    "body": ["sim.floatparam_maxtrisizeabs"],
  },
  "sim.floatparam_mintrisizerel": {
    "prefix": "sim.floatparam_mintrisizerel",
    "body": ["sim.floatparam_mintrisizerel"],
  },
  "sim.floatparam_mouse_wheel_zoom_factor": {
    "prefix": "sim.floatparam_mouse_wheel_zoom_factor",
    "body": ["sim.floatparam_mouse_wheel_zoom_factor"],
  },
  "sim.floatparam_physicstimestep": {
    "prefix": "sim.floatparam_physicstimestep",
    "body": ["sim.floatparam_physicstimestep"],
  },
  "sim.floatparam_rand": {
    "prefix": "sim.floatparam_rand",
    "body": ["sim.floatparam_rand"],
  },
  "sim.floatparam_simulation_time_step": {
    "prefix": "sim.floatparam_simulation_time_step",
    "body": ["sim.floatparam_simulation_time_step"],
  },
  "sim.floatparam_stereo_distance": {
    "prefix": "sim.floatparam_stereo_distance",
    "body": ["sim.floatparam_stereo_distance"],
  },
  "sim.forcefloatparam_error_a": {
    "prefix": "sim.forcefloatparam_error_a",
    "body": ["sim.forcefloatparam_error_a"],
  },
  "sim.forcefloatparam_error_angle": {
    "prefix": "sim.forcefloatparam_error_angle",
    "body": ["sim.forcefloatparam_error_angle"],
  },
  "sim.forcefloatparam_error_b": {
    "prefix": "sim.forcefloatparam_error_b",
    "body": ["sim.forcefloatparam_error_b"],
  },
  "sim.forcefloatparam_error_g": {
    "prefix": "sim.forcefloatparam_error_g",
    "body": ["sim.forcefloatparam_error_g"],
  },
  "sim.forcefloatparam_error_pos": {
    "prefix": "sim.forcefloatparam_error_pos",
    "body": ["sim.forcefloatparam_error_pos"],
  },
  "sim.forcefloatparam_error_x": {
    "prefix": "sim.forcefloatparam_error_x",
    "body": ["sim.forcefloatparam_error_x"],
  },
  "sim.forcefloatparam_error_y": {
    "prefix": "sim.forcefloatparam_error_y",
    "body": ["sim.forcefloatparam_error_y"],
  },
  "sim.forcefloatparam_error_z": {
    "prefix": "sim.forcefloatparam_error_z",
    "body": ["sim.forcefloatparam_error_z"],
  },
  "sim.graphintparam_needs_refresh": {
    "prefix": "sim.graphintparam_needs_refresh",
    "body": ["sim.graphintparam_needs_refresh"],
  },
  "sim.handle_all": {
    "prefix": "sim.handle_all",
    "body": ["sim.handle_all"],
  },
  "sim.handle_all_except_explicit": {
    "prefix": "sim.handle_all_except_explicit",
    "body": ["sim.handle_all_except_explicit"],
  },
  "sim.handle_all_except_self": {
    "prefix": "sim.handle_all_except_self",
    "body": ["sim.handle_all_except_self"],
  },
  "sim.handle_app": {
    "prefix": "sim.handle_app",
    "body": ["sim.handle_app"],
  },
  "sim.handle_appstorage": {
    "prefix": "sim.handle_appstorage",
    "body": ["sim.handle_appstorage"],
  },
  "sim.handle_chain": {
    "prefix": "sim.handle_chain",
    "body": ["sim.handle_chain"],
  },
  "sim.handle_default": {
    "prefix": "sim.handle_default",
    "body": ["sim.handle_default"],
  },
  "sim.handle_inverse": {
    "prefix": "sim.handle_inverse",
    "body": ["sim.handle_inverse"],
  },
  "sim.handle_mainscript": {
    "prefix": "sim.handle_mainscript",
    "body": ["sim.handle_mainscript"],
  },
  "sim.handle_mesh": {
    "prefix": "sim.handle_mesh",
    "body": ["sim.handle_mesh"],
  },
  "sim.handle_parent": {
    "prefix": "sim.handle_parent",
    "body": ["sim.handle_parent"],
  },
  "sim.handle_sandbox": {
    "prefix": "sim.handle_sandbox",
    "body": ["sim.handle_sandbox"],
  },
  "sim.handle_scene": {
    "prefix": "sim.handle_scene",
    "body": ["sim.handle_scene"],
  },
  "sim.handle_sceneobject": {
    "prefix": "sim.handle_sceneobject",
    "body": ["sim.handle_sceneobject"],
  },
  "sim.handle_self": {
    "prefix": "sim.handle_self",
    "body": ["sim.handle_self"],
  },
  "sim.handle_single": {
    "prefix": "sim.handle_single",
    "body": ["sim.handle_single"],
  },
  "sim.handle_tree": {
    "prefix": "sim.handle_tree",
    "body": ["sim.handle_tree"],
  },
  "sim.handle_world": {
    "prefix": "sim.handle_world",
    "body": ["sim.handle_world"],
  },
  "sim.handleflag_abscoords": {
    "prefix": "sim.handleflag_abscoords",
    "body": ["sim.handleflag_abscoords"],
  },
  "sim.handleflag_addmultiple": {
    "prefix": "sim.handleflag_addmultiple",
    "body": ["sim.handleflag_addmultiple"],
  },
  "sim.handleflag_altname": {
    "prefix": "sim.handleflag_altname",
    "body": ["sim.handleflag_altname"],
  },
  "sim.handleflag_assembly": {
    "prefix": "sim.handleflag_assembly",
    "body": ["sim.handleflag_assembly"],
  },
  "sim.handleflag_axis": {
    "prefix": "sim.handleflag_axis",
    "body": ["sim.handleflag_axis"],
  },
  "sim.handleflag_camera": {
    "prefix": "sim.handleflag_camera",
    "body": ["sim.handleflag_camera"],
  },
  "sim.handleflag_codedstring": {
    "prefix": "sim.handleflag_codedstring",
    "body": ["sim.handleflag_codedstring"],
  },
  "sim.handleflag_depthbuffer": {
    "prefix": "sim.handleflag_depthbuffer",
    "body": ["sim.handleflag_depthbuffer"],
  },
  "sim.handleflag_depthbuffermeters": {
    "prefix": "sim.handleflag_depthbuffermeters",
    "body": ["sim.handleflag_depthbuffermeters"],
  },
  "sim.handleflag_extended": {
    "prefix": "sim.handleflag_extended",
    "body": ["sim.handleflag_extended"],
  },
  "sim.handleflag_greyscale": {
    "prefix": "sim.handleflag_greyscale",
    "body": ["sim.handleflag_greyscale"],
  },
  "sim.handleflag_keeporiginal": {
    "prefix": "sim.handleflag_keeporiginal",
    "body": ["sim.handleflag_keeporiginal"],
  },
  "sim.handleflag_model": {
    "prefix": "sim.handleflag_model",
    "body": ["sim.handleflag_model"],
  },
  "sim.handleflag_rawvalue": {
    "prefix": "sim.handleflag_rawvalue",
    "body": ["sim.handleflag_rawvalue"],
  },
  "sim.handleflag_reljointbaseframe": {
    "prefix": "sim.handleflag_reljointbaseframe",
    "body": ["sim.handleflag_reljointbaseframe"],
  },
  "sim.handleflag_resetforce": {
    "prefix": "sim.handleflag_resetforce",
    "body": ["sim.handleflag_resetforce"],
  },
  "sim.handleflag_resetforcetorque": {
    "prefix": "sim.handleflag_resetforcetorque",
    "body": ["sim.handleflag_resetforcetorque"],
  },
  "sim.handleflag_resettorque": {
    "prefix": "sim.handleflag_resettorque",
    "body": ["sim.handleflag_resettorque"],
  },
  "sim.handleflag_silenterror": {
    "prefix": "sim.handleflag_silenterror",
    "body": ["sim.handleflag_silenterror"],
  },
  "sim.handleflag_togglevisibility": {
    "prefix": "sim.handleflag_togglevisibility",
    "body": ["sim.handleflag_togglevisibility"],
  },
  "sim.handleflag_wxyzquat": {
    "prefix": "sim.handleflag_wxyzquat",
    "body": ["sim.handleflag_wxyzquat"],
  },
  "sim.imgcomb_horizontal": {
    "prefix": "sim.imgcomb_horizontal",
    "body": ["sim.imgcomb_horizontal"],
  },
  "sim.imgcomb_vertical": {
    "prefix": "sim.imgcomb_vertical",
    "body": ["sim.imgcomb_vertical"],
  },
  "sim.intparam_compilation_version": {
    "prefix": "sim.intparam_compilation_version",
    "body": ["sim.intparam_compilation_version"],
  },
  "sim.intparam_core_count": {
    "prefix": "sim.intparam_core_count",
    "body": ["sim.intparam_core_count"],
  },
  "sim.intparam_current_page": {
    "prefix": "sim.intparam_current_page",
    "body": ["sim.intparam_current_page"],
  },
  "sim.intparam_dlgverbosity": {
    "prefix": "sim.intparam_dlgverbosity",
    "body": ["sim.intparam_dlgverbosity"],
  },
  "sim.intparam_dynamic_engine": {
    "prefix": "sim.intparam_dynamic_engine",
    "body": ["sim.intparam_dynamic_engine"],
  },
  "sim.intparam_dynamic_iteration_count": {
    "prefix": "sim.intparam_dynamic_iteration_count",
    "body": ["sim.intparam_dynamic_iteration_count"],
  },
  "sim.intparam_dynamic_step_divider": {
    "prefix": "sim.intparam_dynamic_step_divider",
    "body": ["sim.intparam_dynamic_step_divider"],
  },
  "sim.intparam_dynamic_warning_disabled_mask": {
    "prefix": "sim.intparam_dynamic_warning_disabled_mask",
    "body": ["sim.intparam_dynamic_warning_disabled_mask"],
  },
  "sim.intparam_edit_mode_type": {
    "prefix": "sim.intparam_edit_mode_type",
    "body": ["sim.intparam_edit_mode_type"],
  },
  "sim.intparam_error_report_mode": {
    "prefix": "sim.intparam_error_report_mode",
    "body": ["sim.intparam_error_report_mode"],
  },
  "sim.intparam_exitcode": {
    "prefix": "sim.intparam_exitcode",
    "body": ["sim.intparam_exitcode"],
  },
  "sim.intparam_flymode_camera_handle": {
    "prefix": "sim.intparam_flymode_camera_handle",
    "body": ["sim.intparam_flymode_camera_handle"],
  },
  "sim.intparam_hierarchychangecounter": {
    "prefix": "sim.intparam_hierarchychangecounter",
    "body": ["sim.intparam_hierarchychangecounter"],
  },
  "sim.intparam_idle_fps": {
    "prefix": "sim.intparam_idle_fps",
    "body": ["sim.intparam_idle_fps"],
  },
  "sim.intparam_infotext_style": {
    "prefix": "sim.intparam_infotext_style",
    "body": ["sim.intparam_infotext_style"],
  },
  "sim.intparam_motionplanning_seed": {
    "prefix": "sim.intparam_motionplanning_seed",
    "body": ["sim.intparam_motionplanning_seed"],
  },
  "sim.intparam_mouse_buttons": {
    "prefix": "sim.intparam_mouse_buttons",
    "body": ["sim.intparam_mouse_buttons"],
  },
  "sim.intparam_mouse_x": {
    "prefix": "sim.intparam_mouse_x",
    "body": ["sim.intparam_mouse_x"],
  },
  "sim.intparam_mouse_y": {
    "prefix": "sim.intparam_mouse_y",
    "body": ["sim.intparam_mouse_y"],
  },
  "sim.intparam_mouseclickcounterdown": {
    "prefix": "sim.intparam_mouseclickcounterdown",
    "body": ["sim.intparam_mouseclickcounterdown"],
  },
  "sim.intparam_mouseclickcounterup": {
    "prefix": "sim.intparam_mouseclickcounterup",
    "body": ["sim.intparam_mouseclickcounterup"],
  },
  "sim.intparam_notifydeprecated": {
    "prefix": "sim.intparam_notifydeprecated",
    "body": ["sim.intparam_notifydeprecated"],
  },
  "sim.intparam_objectcreationcounter": {
    "prefix": "sim.intparam_objectcreationcounter",
    "body": ["sim.intparam_objectcreationcounter"],
  },
  "sim.intparam_objectdestructioncounter": {
    "prefix": "sim.intparam_objectdestructioncounter",
    "body": ["sim.intparam_objectdestructioncounter"],
  },
  "sim.intparam_platform": {
    "prefix": "sim.intparam_platform",
    "body": ["sim.intparam_platform"],
  },
  "sim.intparam_processcnt": {
    "prefix": "sim.intparam_processcnt",
    "body": ["sim.intparam_processcnt"],
  },
  "sim.intparam_processid": {
    "prefix": "sim.intparam_processid",
    "body": ["sim.intparam_processid"],
  },
  "sim.intparam_program_full_version": {
    "prefix": "sim.intparam_program_full_version",
    "body": ["sim.intparam_program_full_version"],
  },
  "sim.intparam_program_revision": {
    "prefix": "sim.intparam_program_revision",
    "body": ["sim.intparam_program_revision"],
  },
  "sim.intparam_program_version": {
    "prefix": "sim.intparam_program_version",
    "body": ["sim.intparam_program_version"],
  },
  "sim.intparam_prox_sensor_select_down": {
    "prefix": "sim.intparam_prox_sensor_select_down",
    "body": ["sim.intparam_prox_sensor_select_down"],
  },
  "sim.intparam_prox_sensor_select_up": {
    "prefix": "sim.intparam_prox_sensor_select_up",
    "body": ["sim.intparam_prox_sensor_select_up"],
  },
  "sim.intparam_qt_version": {
    "prefix": "sim.intparam_qt_version",
    "body": ["sim.intparam_qt_version"],
  },
  "sim.intparam_scene_index": {
    "prefix": "sim.intparam_scene_index",
    "body": ["sim.intparam_scene_index"],
  },
  "sim.intparam_scene_unique_id": {
    "prefix": "sim.intparam_scene_unique_id",
    "body": ["sim.intparam_scene_unique_id"],
  },
  "sim.intparam_server_port_next": {
    "prefix": "sim.intparam_server_port_next",
    "body": ["sim.intparam_server_port_next"],
  },
  "sim.intparam_server_port_range": {
    "prefix": "sim.intparam_server_port_range",
    "body": ["sim.intparam_server_port_range"],
  },
  "sim.intparam_server_port_start": {
    "prefix": "sim.intparam_server_port_start",
    "body": ["sim.intparam_server_port_start"],
  },
  "sim.intparam_settings": {
    "prefix": "sim.intparam_settings",
    "body": ["sim.intparam_settings"],
  },
  "sim.intparam_speedmodifier": {
    "prefix": "sim.intparam_speedmodifier",
    "body": ["sim.intparam_speedmodifier"],
  },
  "sim.intparam_statusbarverbosity": {
    "prefix": "sim.intparam_statusbarverbosity",
    "body": ["sim.intparam_statusbarverbosity"],
  },
  "sim.intparam_stop_request_counter": {
    "prefix": "sim.intparam_stop_request_counter",
    "body": ["sim.intparam_stop_request_counter"],
  },
  "sim.intparam_verbosity": {
    "prefix": "sim.intparam_verbosity",
    "body": ["sim.intparam_verbosity"],
  },
  "sim.intparam_videoencoderindex": {
    "prefix": "sim.intparam_videoencoderindex",
    "body": ["sim.intparam_videoencoderindex"],
  },
  "sim.intparam_visible_layers": {
    "prefix": "sim.intparam_visible_layers",
    "body": ["sim.intparam_visible_layers"],
  },
  "sim.intparam_work_thread_calc_time_ms": {
    "prefix": "sim.intparam_work_thread_calc_time_ms",
    "body": ["sim.intparam_work_thread_calc_time_ms"],
  },
  "sim.intparam_work_thread_count": {
    "prefix": "sim.intparam_work_thread_count",
    "body": ["sim.intparam_work_thread_count"],
  },
  "sim.joint_prismatic": {
    "prefix": "sim.joint_prismatic",
    "body": ["sim.joint_prismatic"],
  },
  "sim.joint_revolute": {
    "prefix": "sim.joint_revolute",
    "body": ["sim.joint_revolute"],
  },
  "sim.joint_spherical": {
    "prefix": "sim.joint_spherical",
    "body": ["sim.joint_spherical"],
  },
  "sim.jointdynctrl_callback": {
    "prefix": "sim.jointdynctrl_callback",
    "body": ["sim.jointdynctrl_callback"],
  },
  "sim.jointdynctrl_force": {
    "prefix": "sim.jointdynctrl_force",
    "body": ["sim.jointdynctrl_force"],
  },
  "sim.jointdynctrl_free": {
    "prefix": "sim.jointdynctrl_free",
    "body": ["sim.jointdynctrl_free"],
  },
  "sim.jointdynctrl_position": {
    "prefix": "sim.jointdynctrl_position",
    "body": ["sim.jointdynctrl_position"],
  },
  "sim.jointdynctrl_spring": {
    "prefix": "sim.jointdynctrl_spring",
    "body": ["sim.jointdynctrl_spring"],
  },
  "sim.jointdynctrl_velocity": {
    "prefix": "sim.jointdynctrl_velocity",
    "body": ["sim.jointdynctrl_velocity"],
  },
  "sim.jointfloatparam_error_a": {
    "prefix": "sim.jointfloatparam_error_a",
    "body": ["sim.jointfloatparam_error_a"],
  },
  "sim.jointfloatparam_error_angle": {
    "prefix": "sim.jointfloatparam_error_angle",
    "body": ["sim.jointfloatparam_error_angle"],
  },
  "sim.jointfloatparam_error_b": {
    "prefix": "sim.jointfloatparam_error_b",
    "body": ["sim.jointfloatparam_error_b"],
  },
  "sim.jointfloatparam_error_g": {
    "prefix": "sim.jointfloatparam_error_g",
    "body": ["sim.jointfloatparam_error_g"],
  },
  "sim.jointfloatparam_error_pos": {
    "prefix": "sim.jointfloatparam_error_pos",
    "body": ["sim.jointfloatparam_error_pos"],
  },
  "sim.jointfloatparam_error_x": {
    "prefix": "sim.jointfloatparam_error_x",
    "body": ["sim.jointfloatparam_error_x"],
  },
  "sim.jointfloatparam_error_y": {
    "prefix": "sim.jointfloatparam_error_y",
    "body": ["sim.jointfloatparam_error_y"],
  },
  "sim.jointfloatparam_error_z": {
    "prefix": "sim.jointfloatparam_error_z",
    "body": ["sim.jointfloatparam_error_z"],
  },
  "sim.jointfloatparam_intrinsic_qw": {
    "prefix": "sim.jointfloatparam_intrinsic_qw",
    "body": ["sim.jointfloatparam_intrinsic_qw"],
  },
  "sim.jointfloatparam_intrinsic_qx": {
    "prefix": "sim.jointfloatparam_intrinsic_qx",
    "body": ["sim.jointfloatparam_intrinsic_qx"],
  },
  "sim.jointfloatparam_intrinsic_qy": {
    "prefix": "sim.jointfloatparam_intrinsic_qy",
    "body": ["sim.jointfloatparam_intrinsic_qy"],
  },
  "sim.jointfloatparam_intrinsic_qz": {
    "prefix": "sim.jointfloatparam_intrinsic_qz",
    "body": ["sim.jointfloatparam_intrinsic_qz"],
  },
  "sim.jointfloatparam_intrinsic_x": {
    "prefix": "sim.jointfloatparam_intrinsic_x",
    "body": ["sim.jointfloatparam_intrinsic_x"],
  },
  "sim.jointfloatparam_intrinsic_y": {
    "prefix": "sim.jointfloatparam_intrinsic_y",
    "body": ["sim.jointfloatparam_intrinsic_y"],
  },
  "sim.jointfloatparam_intrinsic_z": {
    "prefix": "sim.jointfloatparam_intrinsic_z",
    "body": ["sim.jointfloatparam_intrinsic_z"],
  },
  "sim.jointfloatparam_kc_c": {
    "prefix": "sim.jointfloatparam_kc_c",
    "body": ["sim.jointfloatparam_kc_c"],
  },
  "sim.jointfloatparam_kc_k": {
    "prefix": "sim.jointfloatparam_kc_k",
    "body": ["sim.jointfloatparam_kc_k"],
  },
  "sim.jointfloatparam_maxaccel": {
    "prefix": "sim.jointfloatparam_maxaccel",
    "body": ["sim.jointfloatparam_maxaccel"],
  },
  "sim.jointfloatparam_maxjerk": {
    "prefix": "sim.jointfloatparam_maxjerk",
    "body": ["sim.jointfloatparam_maxjerk"],
  },
  "sim.jointfloatparam_maxvel": {
    "prefix": "sim.jointfloatparam_maxvel",
    "body": ["sim.jointfloatparam_maxvel"],
  },
  "sim.jointfloatparam_screwlead": {
    "prefix": "sim.jointfloatparam_screwlead",
    "body": ["sim.jointfloatparam_screwlead"],
  },
  "sim.jointfloatparam_spherical_qw": {
    "prefix": "sim.jointfloatparam_spherical_qw",
    "body": ["sim.jointfloatparam_spherical_qw"],
  },
  "sim.jointfloatparam_spherical_qx": {
    "prefix": "sim.jointfloatparam_spherical_qx",
    "body": ["sim.jointfloatparam_spherical_qx"],
  },
  "sim.jointfloatparam_spherical_qy": {
    "prefix": "sim.jointfloatparam_spherical_qy",
    "body": ["sim.jointfloatparam_spherical_qy"],
  },
  "sim.jointfloatparam_spherical_qz": {
    "prefix": "sim.jointfloatparam_spherical_qz",
    "body": ["sim.jointfloatparam_spherical_qz"],
  },
  "sim.jointfloatparam_velocity": {
    "prefix": "sim.jointfloatparam_velocity",
    "body": ["sim.jointfloatparam_velocity"],
  },
  "sim.jointfloatparam_vortex_dep_multiplication": {
    "prefix": "sim.jointfloatparam_vortex_dep_multiplication",
    "body": ["sim.jointfloatparam_vortex_dep_multiplication"],
  },
  "sim.jointfloatparam_vortex_dep_offset": {
    "prefix": "sim.jointfloatparam_vortex_dep_offset",
    "body": ["sim.jointfloatparam_vortex_dep_offset"],
  },
  "sim.jointintparam_ctrl_enabled": {
    "prefix": "sim.jointintparam_ctrl_enabled",
    "body": ["sim.jointintparam_ctrl_enabled"],
  },
  "sim.jointintparam_dynctrlmode": {
    "prefix": "sim.jointintparam_dynctrlmode",
    "body": ["sim.jointintparam_dynctrlmode"],
  },
  "sim.jointintparam_dynposctrltype": {
    "prefix": "sim.jointintparam_dynposctrltype",
    "body": ["sim.jointintparam_dynposctrltype"],
  },
  "sim.jointintparam_dynvelctrltype": {
    "prefix": "sim.jointintparam_dynvelctrltype",
    "body": ["sim.jointintparam_dynvelctrltype"],
  },
  "sim.jointintparam_motor_enabled": {
    "prefix": "sim.jointintparam_motor_enabled",
    "body": ["sim.jointintparam_motor_enabled"],
  },
  "sim.jointintparam_velocity_lock": {
    "prefix": "sim.jointintparam_velocity_lock",
    "body": ["sim.jointintparam_velocity_lock"],
  },
  "sim.jointintparam_vortex_dep_handle": {
    "prefix": "sim.jointintparam_vortex_dep_handle",
    "body": ["sim.jointintparam_vortex_dep_handle"],
  },
  "sim.jointmode_dependent": {
    "prefix": "sim.jointmode_dependent",
    "body": ["sim.jointmode_dependent"],
  },
  "sim.jointmode_dynamic": {
    "prefix": "sim.jointmode_dynamic",
    "body": ["sim.jointmode_dynamic"],
  },
  "sim.jointmode_kinematic": {
    "prefix": "sim.jointmode_kinematic",
    "body": ["sim.jointmode_kinematic"],
  },
  "sim.lang_lua": {
    "prefix": "sim.lang_lua",
    "body": ["sim.lang_lua"],
  },
  "sim.lang_python": {
    "prefix": "sim.lang_python",
    "body": ["sim.lang_python"],
  },
  "sim.lang_undefined": {
    "prefix": "sim.lang_undefined",
    "body": ["sim.lang_undefined"],
  },
  "sim.light_directional": {
    "prefix": "sim.light_directional",
    "body": ["sim.light_directional"],
  },
  "sim.light_omnidirectional": {
    "prefix": "sim.light_omnidirectional",
    "body": ["sim.light_omnidirectional"],
  },
  "sim.light_spot": {
    "prefix": "sim.light_spot",
    "body": ["sim.light_spot"],
  },
  "sim.lightfloatparam_const_attenuation": {
    "prefix": "sim.lightfloatparam_const_attenuation",
    "body": ["sim.lightfloatparam_const_attenuation"],
  },
  "sim.lightfloatparam_lin_attenuation": {
    "prefix": "sim.lightfloatparam_lin_attenuation",
    "body": ["sim.lightfloatparam_lin_attenuation"],
  },
  "sim.lightfloatparam_quad_attenuation": {
    "prefix": "sim.lightfloatparam_quad_attenuation",
    "body": ["sim.lightfloatparam_quad_attenuation"],
  },
  "sim.lightfloatparam_spot_cutoff": {
    "prefix": "sim.lightfloatparam_spot_cutoff",
    "body": ["sim.lightfloatparam_spot_cutoff"],
  },
  "sim.lightfloatparam_spot_exponent": {
    "prefix": "sim.lightfloatparam_spot_exponent",
    "body": ["sim.lightfloatparam_spot_exponent"],
  },
  "sim.lightintparam_pov_casts_shadows": {
    "prefix": "sim.lightintparam_pov_casts_shadows",
    "body": ["sim.lightintparam_pov_casts_shadows"],
  },
  "sim.message_keypress": {
    "prefix": "sim.message_keypress",
    "body": ["sim.message_keypress"],
  },
  "sim.message_model_loaded": {
    "prefix": "sim.message_model_loaded",
    "body": ["sim.message_model_loaded"],
  },
  "sim.message_object_selection_changed": {
    "prefix": "sim.message_object_selection_changed",
    "body": ["sim.message_object_selection_changed"],
  },
  "sim.message_scene_loaded": {
    "prefix": "sim.message_scene_loaded",
    "body": ["sim.message_scene_loaded"],
  },
  "sim.millintparam_volume_type": {
    "prefix": "sim.millintparam_volume_type",
    "body": ["sim.millintparam_volume_type"],
  },
  "sim.mirrorfloatparam_height": {
    "prefix": "sim.mirrorfloatparam_height",
    "body": ["sim.mirrorfloatparam_height"],
  },
  "sim.mirrorfloatparam_reflectance": {
    "prefix": "sim.mirrorfloatparam_reflectance",
    "body": ["sim.mirrorfloatparam_reflectance"],
  },
  "sim.mirrorfloatparam_width": {
    "prefix": "sim.mirrorfloatparam_width",
    "body": ["sim.mirrorfloatparam_width"],
  },
  "sim.mirrorintparam_enable": {
    "prefix": "sim.mirrorintparam_enable",
    "body": ["sim.mirrorintparam_enable"],
  },
  "sim.modelproperty_not_collidable": {
    "prefix": "sim.modelproperty_not_collidable",
    "body": ["sim.modelproperty_not_collidable"],
  },
  "sim.modelproperty_not_detectable": {
    "prefix": "sim.modelproperty_not_detectable",
    "body": ["sim.modelproperty_not_detectable"],
  },
  "sim.modelproperty_not_dynamic": {
    "prefix": "sim.modelproperty_not_dynamic",
    "body": ["sim.modelproperty_not_dynamic"],
  },
  "sim.modelproperty_not_measurable": {
    "prefix": "sim.modelproperty_not_measurable",
    "body": ["sim.modelproperty_not_measurable"],
  },
  "sim.modelproperty_not_model": {
    "prefix": "sim.modelproperty_not_model",
    "body": ["sim.modelproperty_not_model"],
  },
  "sim.modelproperty_not_reset": {
    "prefix": "sim.modelproperty_not_reset",
    "body": ["sim.modelproperty_not_reset"],
  },
  "sim.modelproperty_not_respondable": {
    "prefix": "sim.modelproperty_not_respondable",
    "body": ["sim.modelproperty_not_respondable"],
  },
  "sim.modelproperty_not_showasinsidemodel": {
    "prefix": "sim.modelproperty_not_showasinsidemodel",
    "body": ["sim.modelproperty_not_showasinsidemodel"],
  },
  "sim.modelproperty_not_visible": {
    "prefix": "sim.modelproperty_not_visible",
    "body": ["sim.modelproperty_not_visible"],
  },
  "sim.modelproperty_scripts_inactive": {
    "prefix": "sim.modelproperty_scripts_inactive",
    "body": ["sim.modelproperty_scripts_inactive"],
  },
  "sim.mujoco_body_condim": {
    "prefix": "sim.mujoco_body_condim",
    "body": ["sim.mujoco_body_condim"],
  },
  "sim.mujoco_body_friction1": {
    "prefix": "sim.mujoco_body_friction1",
    "body": ["sim.mujoco_body_friction1"],
  },
  "sim.mujoco_body_friction2": {
    "prefix": "sim.mujoco_body_friction2",
    "body": ["sim.mujoco_body_friction2"],
  },
  "sim.mujoco_body_friction3": {
    "prefix": "sim.mujoco_body_friction3",
    "body": ["sim.mujoco_body_friction3"],
  },
  "sim.mujoco_body_margin": {
    "prefix": "sim.mujoco_body_margin",
    "body": ["sim.mujoco_body_margin"],
  },
  "sim.mujoco_body_priority": {
    "prefix": "sim.mujoco_body_priority",
    "body": ["sim.mujoco_body_priority"],
  },
  "sim.mujoco_body_solimp1": {
    "prefix": "sim.mujoco_body_solimp1",
    "body": ["sim.mujoco_body_solimp1"],
  },
  "sim.mujoco_body_solimp2": {
    "prefix": "sim.mujoco_body_solimp2",
    "body": ["sim.mujoco_body_solimp2"],
  },
  "sim.mujoco_body_solimp3": {
    "prefix": "sim.mujoco_body_solimp3",
    "body": ["sim.mujoco_body_solimp3"],
  },
  "sim.mujoco_body_solimp4": {
    "prefix": "sim.mujoco_body_solimp4",
    "body": ["sim.mujoco_body_solimp4"],
  },
  "sim.mujoco_body_solimp5": {
    "prefix": "sim.mujoco_body_solimp5",
    "body": ["sim.mujoco_body_solimp5"],
  },
  "sim.mujoco_body_solmix": {
    "prefix": "sim.mujoco_body_solmix",
    "body": ["sim.mujoco_body_solmix"],
  },
  "sim.mujoco_body_solref1": {
    "prefix": "sim.mujoco_body_solref1",
    "body": ["sim.mujoco_body_solref1"],
  },
  "sim.mujoco_body_solref2": {
    "prefix": "sim.mujoco_body_solref2",
    "body": ["sim.mujoco_body_solref2"],
  },
  "sim.mujoco_dummy_bitcoded": {
    "prefix": "sim.mujoco_dummy_bitcoded",
    "body": ["sim.mujoco_dummy_bitcoded"],
  },
  "sim.mujoco_dummy_damping": {
    "prefix": "sim.mujoco_dummy_damping",
    "body": ["sim.mujoco_dummy_damping"],
  },
  "sim.mujoco_dummy_limited": {
    "prefix": "sim.mujoco_dummy_limited",
    "body": ["sim.mujoco_dummy_limited"],
  },
  "sim.mujoco_dummy_margin": {
    "prefix": "sim.mujoco_dummy_margin",
    "body": ["sim.mujoco_dummy_margin"],
  },
  "sim.mujoco_dummy_proxyjointid": {
    "prefix": "sim.mujoco_dummy_proxyjointid",
    "body": ["sim.mujoco_dummy_proxyjointid"],
  },
  "sim.mujoco_dummy_range1": {
    "prefix": "sim.mujoco_dummy_range1",
    "body": ["sim.mujoco_dummy_range1"],
  },
  "sim.mujoco_dummy_range2": {
    "prefix": "sim.mujoco_dummy_range2",
    "body": ["sim.mujoco_dummy_range2"],
  },
  "sim.mujoco_dummy_solimplimit1": {
    "prefix": "sim.mujoco_dummy_solimplimit1",
    "body": ["sim.mujoco_dummy_solimplimit1"],
  },
  "sim.mujoco_dummy_solimplimit2": {
    "prefix": "sim.mujoco_dummy_solimplimit2",
    "body": ["sim.mujoco_dummy_solimplimit2"],
  },
  "sim.mujoco_dummy_solimplimit3": {
    "prefix": "sim.mujoco_dummy_solimplimit3",
    "body": ["sim.mujoco_dummy_solimplimit3"],
  },
  "sim.mujoco_dummy_solimplimit4": {
    "prefix": "sim.mujoco_dummy_solimplimit4",
    "body": ["sim.mujoco_dummy_solimplimit4"],
  },
  "sim.mujoco_dummy_solimplimit5": {
    "prefix": "sim.mujoco_dummy_solimplimit5",
    "body": ["sim.mujoco_dummy_solimplimit5"],
  },
  "sim.mujoco_dummy_solreflimit1": {
    "prefix": "sim.mujoco_dummy_solreflimit1",
    "body": ["sim.mujoco_dummy_solreflimit1"],
  },
  "sim.mujoco_dummy_solreflimit2": {
    "prefix": "sim.mujoco_dummy_solreflimit2",
    "body": ["sim.mujoco_dummy_solreflimit2"],
  },
  "sim.mujoco_dummy_springlength": {
    "prefix": "sim.mujoco_dummy_springlength",
    "body": ["sim.mujoco_dummy_springlength"],
  },
  "sim.mujoco_dummy_stiffness": {
    "prefix": "sim.mujoco_dummy_stiffness",
    "body": ["sim.mujoco_dummy_stiffness"],
  },
  "sim.mujoco_global_balanceinertias": {
    "prefix": "sim.mujoco_global_balanceinertias",
    "body": ["sim.mujoco_global_balanceinertias"],
  },
  "sim.mujoco_global_bitcoded": {
    "prefix": "sim.mujoco_global_bitcoded",
    "body": ["sim.mujoco_global_bitcoded"],
  },
  "sim.mujoco_global_boundinertia": {
    "prefix": "sim.mujoco_global_boundinertia",
    "body": ["sim.mujoco_global_boundinertia"],
  },
  "sim.mujoco_global_boundmass": {
    "prefix": "sim.mujoco_global_boundmass",
    "body": ["sim.mujoco_global_boundmass"],
  },
  "sim.mujoco_global_computeinertias": {
    "prefix": "sim.mujoco_global_computeinertias",
    "body": ["sim.mujoco_global_computeinertias"],
  },
  "sim.mujoco_global_cone": {
    "prefix": "sim.mujoco_global_cone",
    "body": ["sim.mujoco_global_cone"],
  },
  "sim.mujoco_global_density": {
    "prefix": "sim.mujoco_global_density",
    "body": ["sim.mujoco_global_density"],
  },
  "sim.mujoco_global_impratio": {
    "prefix": "sim.mujoco_global_impratio",
    "body": ["sim.mujoco_global_impratio"],
  },
  "sim.mujoco_global_integrator": {
    "prefix": "sim.mujoco_global_integrator",
    "body": ["sim.mujoco_global_integrator"],
  },
  "sim.mujoco_global_iterations": {
    "prefix": "sim.mujoco_global_iterations",
    "body": ["sim.mujoco_global_iterations"],
  },
  "sim.mujoco_global_kininertia": {
    "prefix": "sim.mujoco_global_kininertia",
    "body": ["sim.mujoco_global_kininertia"],
  },
  "sim.mujoco_global_kinmass": {
    "prefix": "sim.mujoco_global_kinmass",
    "body": ["sim.mujoco_global_kinmass"],
  },
  "sim.mujoco_global_multiccd": {
    "prefix": "sim.mujoco_global_multiccd",
    "body": ["sim.mujoco_global_multiccd"],
  },
  "sim.mujoco_global_multithreaded": {
    "prefix": "sim.mujoco_global_multithreaded",
    "body": ["sim.mujoco_global_multithreaded"],
  },
  "sim.mujoco_global_nconmax": {
    "prefix": "sim.mujoco_global_nconmax",
    "body": ["sim.mujoco_global_nconmax"],
  },
  "sim.mujoco_global_njmax": {
    "prefix": "sim.mujoco_global_njmax",
    "body": ["sim.mujoco_global_njmax"],
  },
  "sim.mujoco_global_nstack": {
    "prefix": "sim.mujoco_global_nstack",
    "body": ["sim.mujoco_global_nstack"],
  },
  "sim.mujoco_global_overridecontacts": {
    "prefix": "sim.mujoco_global_overridecontacts",
    "body": ["sim.mujoco_global_overridecontacts"],
  },
  "sim.mujoco_global_overridekin": {
    "prefix": "sim.mujoco_global_overridekin",
    "body": ["sim.mujoco_global_overridekin"],
  },
  "sim.mujoco_global_overridemargin": {
    "prefix": "sim.mujoco_global_overridemargin",
    "body": ["sim.mujoco_global_overridemargin"],
  },
  "sim.mujoco_global_overridesolimp1": {
    "prefix": "sim.mujoco_global_overridesolimp1",
    "body": ["sim.mujoco_global_overridesolimp1"],
  },
  "sim.mujoco_global_overridesolimp2": {
    "prefix": "sim.mujoco_global_overridesolimp2",
    "body": ["sim.mujoco_global_overridesolimp2"],
  },
  "sim.mujoco_global_overridesolimp3": {
    "prefix": "sim.mujoco_global_overridesolimp3",
    "body": ["sim.mujoco_global_overridesolimp3"],
  },
  "sim.mujoco_global_overridesolimp4": {
    "prefix": "sim.mujoco_global_overridesolimp4",
    "body": ["sim.mujoco_global_overridesolimp4"],
  },
  "sim.mujoco_global_overridesolimp5": {
    "prefix": "sim.mujoco_global_overridesolimp5",
    "body": ["sim.mujoco_global_overridesolimp5"],
  },
  "sim.mujoco_global_overridesolref1": {
    "prefix": "sim.mujoco_global_overridesolref1",
    "body": ["sim.mujoco_global_overridesolref1"],
  },
  "sim.mujoco_global_overridesolref2": {
    "prefix": "sim.mujoco_global_overridesolref2",
    "body": ["sim.mujoco_global_overridesolref2"],
  },
  "sim.mujoco_global_rebuildtrigger": {
    "prefix": "sim.mujoco_global_rebuildtrigger",
    "body": ["sim.mujoco_global_rebuildtrigger"],
  },
  "sim.mujoco_global_solver": {
    "prefix": "sim.mujoco_global_solver",
    "body": ["sim.mujoco_global_solver"],
  },
  "sim.mujoco_global_viscosity": {
    "prefix": "sim.mujoco_global_viscosity",
    "body": ["sim.mujoco_global_viscosity"],
  },
  "sim.mujoco_global_wind1": {
    "prefix": "sim.mujoco_global_wind1",
    "body": ["sim.mujoco_global_wind1"],
  },
  "sim.mujoco_global_wind2": {
    "prefix": "sim.mujoco_global_wind2",
    "body": ["sim.mujoco_global_wind2"],
  },
  "sim.mujoco_global_wind3": {
    "prefix": "sim.mujoco_global_wind3",
    "body": ["sim.mujoco_global_wind3"],
  },
  "sim.mujoco_joint_armature": {
    "prefix": "sim.mujoco_joint_armature",
    "body": ["sim.mujoco_joint_armature"],
  },
  "sim.mujoco_joint_damping": {
    "prefix": "sim.mujoco_joint_damping",
    "body": ["sim.mujoco_joint_damping"],
  },
  "sim.mujoco_joint_dependentobjectid": {
    "prefix": "sim.mujoco_joint_dependentobjectid",
    "body": ["sim.mujoco_joint_dependentobjectid"],
  },
  "sim.mujoco_joint_frictionloss": {
    "prefix": "sim.mujoco_joint_frictionloss",
    "body": ["sim.mujoco_joint_frictionloss"],
  },
  "sim.mujoco_joint_margin": {
    "prefix": "sim.mujoco_joint_margin",
    "body": ["sim.mujoco_joint_margin"],
  },
  "sim.mujoco_joint_polycoef1": {
    "prefix": "sim.mujoco_joint_polycoef1",
    "body": ["sim.mujoco_joint_polycoef1"],
  },
  "sim.mujoco_joint_polycoef2": {
    "prefix": "sim.mujoco_joint_polycoef2",
    "body": ["sim.mujoco_joint_polycoef2"],
  },
  "sim.mujoco_joint_polycoef3": {
    "prefix": "sim.mujoco_joint_polycoef3",
    "body": ["sim.mujoco_joint_polycoef3"],
  },
  "sim.mujoco_joint_polycoef4": {
    "prefix": "sim.mujoco_joint_polycoef4",
    "body": ["sim.mujoco_joint_polycoef4"],
  },
  "sim.mujoco_joint_polycoef5": {
    "prefix": "sim.mujoco_joint_polycoef5",
    "body": ["sim.mujoco_joint_polycoef5"],
  },
  "sim.mujoco_joint_pospid1": {
    "prefix": "sim.mujoco_joint_pospid1",
    "body": ["sim.mujoco_joint_pospid1"],
  },
  "sim.mujoco_joint_pospid2": {
    "prefix": "sim.mujoco_joint_pospid2",
    "body": ["sim.mujoco_joint_pospid2"],
  },
  "sim.mujoco_joint_pospid3": {
    "prefix": "sim.mujoco_joint_pospid3",
    "body": ["sim.mujoco_joint_pospid3"],
  },
  "sim.mujoco_joint_solimpfriction1": {
    "prefix": "sim.mujoco_joint_solimpfriction1",
    "body": ["sim.mujoco_joint_solimpfriction1"],
  },
  "sim.mujoco_joint_solimpfriction2": {
    "prefix": "sim.mujoco_joint_solimpfriction2",
    "body": ["sim.mujoco_joint_solimpfriction2"],
  },
  "sim.mujoco_joint_solimpfriction3": {
    "prefix": "sim.mujoco_joint_solimpfriction3",
    "body": ["sim.mujoco_joint_solimpfriction3"],
  },
  "sim.mujoco_joint_solimpfriction4": {
    "prefix": "sim.mujoco_joint_solimpfriction4",
    "body": ["sim.mujoco_joint_solimpfriction4"],
  },
  "sim.mujoco_joint_solimpfriction5": {
    "prefix": "sim.mujoco_joint_solimpfriction5",
    "body": ["sim.mujoco_joint_solimpfriction5"],
  },
  "sim.mujoco_joint_solimplimit1": {
    "prefix": "sim.mujoco_joint_solimplimit1",
    "body": ["sim.mujoco_joint_solimplimit1"],
  },
  "sim.mujoco_joint_solimplimit2": {
    "prefix": "sim.mujoco_joint_solimplimit2",
    "body": ["sim.mujoco_joint_solimplimit2"],
  },
  "sim.mujoco_joint_solimplimit3": {
    "prefix": "sim.mujoco_joint_solimplimit3",
    "body": ["sim.mujoco_joint_solimplimit3"],
  },
  "sim.mujoco_joint_solimplimit4": {
    "prefix": "sim.mujoco_joint_solimplimit4",
    "body": ["sim.mujoco_joint_solimplimit4"],
  },
  "sim.mujoco_joint_solimplimit5": {
    "prefix": "sim.mujoco_joint_solimplimit5",
    "body": ["sim.mujoco_joint_solimplimit5"],
  },
  "sim.mujoco_joint_solreffriction1": {
    "prefix": "sim.mujoco_joint_solreffriction1",
    "body": ["sim.mujoco_joint_solreffriction1"],
  },
  "sim.mujoco_joint_solreffriction2": {
    "prefix": "sim.mujoco_joint_solreffriction2",
    "body": ["sim.mujoco_joint_solreffriction2"],
  },
  "sim.mujoco_joint_solreflimit1": {
    "prefix": "sim.mujoco_joint_solreflimit1",
    "body": ["sim.mujoco_joint_solreflimit1"],
  },
  "sim.mujoco_joint_solreflimit2": {
    "prefix": "sim.mujoco_joint_solreflimit2",
    "body": ["sim.mujoco_joint_solreflimit2"],
  },
  "sim.mujoco_joint_springdamper1": {
    "prefix": "sim.mujoco_joint_springdamper1",
    "body": ["sim.mujoco_joint_springdamper1"],
  },
  "sim.mujoco_joint_springdamper2": {
    "prefix": "sim.mujoco_joint_springdamper2",
    "body": ["sim.mujoco_joint_springdamper2"],
  },
  "sim.mujoco_joint_springref": {
    "prefix": "sim.mujoco_joint_springref",
    "body": ["sim.mujoco_joint_springref"],
  },
  "sim.mujoco_joint_stiffness": {
    "prefix": "sim.mujoco_joint_stiffness",
    "body": ["sim.mujoco_joint_stiffness"],
  },
  "sim.navigation_cameraangle": {
    "prefix": "sim.navigation_cameraangle",
    "body": ["sim.navigation_cameraangle"],
  },
  "sim.navigation_camerarotate": {
    "prefix": "sim.navigation_camerarotate",
    "body": ["sim.navigation_camerarotate"],
  },
  "sim.navigation_camerarotatemiddlebutton": {
    "prefix": "sim.navigation_camerarotatemiddlebutton",
    "body": ["sim.navigation_camerarotatemiddlebutton"],
  },
  "sim.navigation_camerarotaterightbutton": {
    "prefix": "sim.navigation_camerarotaterightbutton",
    "body": ["sim.navigation_camerarotaterightbutton"],
  },
  "sim.navigation_camerashift": {
    "prefix": "sim.navigation_camerashift",
    "body": ["sim.navigation_camerashift"],
  },
  "sim.navigation_camerazoom": {
    "prefix": "sim.navigation_camerazoom",
    "body": ["sim.navigation_camerazoom"],
  },
  "sim.navigation_camerazoomwheel": {
    "prefix": "sim.navigation_camerazoomwheel",
    "body": ["sim.navigation_camerazoomwheel"],
  },
  "sim.navigation_clickselection": {
    "prefix": "sim.navigation_clickselection",
    "body": ["sim.navigation_clickselection"],
  },
  "sim.navigation_createpathpoint": {
    "prefix": "sim.navigation_createpathpoint",
    "body": ["sim.navigation_createpathpoint"],
  },
  "sim.navigation_ctrlselection": {
    "prefix": "sim.navigation_ctrlselection",
    "body": ["sim.navigation_ctrlselection"],
  },
  "sim.navigation_objectrotate": {
    "prefix": "sim.navigation_objectrotate",
    "body": ["sim.navigation_objectrotate"],
  },
  "sim.navigation_objectshift": {
    "prefix": "sim.navigation_objectshift",
    "body": ["sim.navigation_objectshift"],
  },
  "sim.navigation_passive": {
    "prefix": "sim.navigation_passive",
    "body": ["sim.navigation_passive"],
  },
  "sim.navigation_shiftselection": {
    "prefix": "sim.navigation_shiftselection",
    "body": ["sim.navigation_shiftselection"],
  },
  "sim.newton_body_angulardrag": {
    "prefix": "sim.newton_body_angulardrag",
    "body": ["sim.newton_body_angulardrag"],
  },
  "sim.newton_body_bitcoded": {
    "prefix": "sim.newton_body_bitcoded",
    "body": ["sim.newton_body_bitcoded"],
  },
  "sim.newton_body_fastmoving": {
    "prefix": "sim.newton_body_fastmoving",
    "body": ["sim.newton_body_fastmoving"],
  },
  "sim.newton_body_kineticfriction": {
    "prefix": "sim.newton_body_kineticfriction",
    "body": ["sim.newton_body_kineticfriction"],
  },
  "sim.newton_body_lineardrag": {
    "prefix": "sim.newton_body_lineardrag",
    "body": ["sim.newton_body_lineardrag"],
  },
  "sim.newton_body_restitution": {
    "prefix": "sim.newton_body_restitution",
    "body": ["sim.newton_body_restitution"],
  },
  "sim.newton_body_staticfriction": {
    "prefix": "sim.newton_body_staticfriction",
    "body": ["sim.newton_body_staticfriction"],
  },
  "sim.newton_global_bitcoded": {
    "prefix": "sim.newton_global_bitcoded",
    "body": ["sim.newton_global_bitcoded"],
  },
  "sim.newton_global_computeinertias": {
    "prefix": "sim.newton_global_computeinertias",
    "body": ["sim.newton_global_computeinertias"],
  },
  "sim.newton_global_constraintsolvingiterations": {
    "prefix": "sim.newton_global_constraintsolvingiterations",
    "body": ["sim.newton_global_constraintsolvingiterations"],
  },
  "sim.newton_global_contactmergetolerance": {
    "prefix": "sim.newton_global_contactmergetolerance",
    "body": ["sim.newton_global_contactmergetolerance"],
  },
  "sim.newton_global_exactsolver": {
    "prefix": "sim.newton_global_exactsolver",
    "body": ["sim.newton_global_exactsolver"],
  },
  "sim.newton_global_highjointaccuracy": {
    "prefix": "sim.newton_global_highjointaccuracy",
    "body": ["sim.newton_global_highjointaccuracy"],
  },
  "sim.newton_global_multithreading": {
    "prefix": "sim.newton_global_multithreading",
    "body": ["sim.newton_global_multithreading"],
  },
  "sim.newton_joint_dependencyfactor": {
    "prefix": "sim.newton_joint_dependencyfactor",
    "body": ["sim.newton_joint_dependencyfactor"],
  },
  "sim.newton_joint_dependencyoffset": {
    "prefix": "sim.newton_joint_dependencyoffset",
    "body": ["sim.newton_joint_dependencyoffset"],
  },
  "sim.newton_joint_dependentobjectid": {
    "prefix": "sim.newton_joint_dependentobjectid",
    "body": ["sim.newton_joint_dependentobjectid"],
  },
  "sim.newton_joint_objectid": {
    "prefix": "sim.newton_joint_objectid",
    "body": ["sim.newton_joint_objectid"],
  },
  "sim.newton_joint_pospid1": {
    "prefix": "sim.newton_joint_pospid1",
    "body": ["sim.newton_joint_pospid1"],
  },
  "sim.newton_joint_pospid2": {
    "prefix": "sim.newton_joint_pospid2",
    "body": ["sim.newton_joint_pospid2"],
  },
  "sim.newton_joint_pospid3": {
    "prefix": "sim.newton_joint_pospid3",
    "body": ["sim.newton_joint_pospid3"],
  },
  "sim.objectproperty_cannotdelete": {
    "prefix": "sim.objectproperty_cannotdelete",
    "body": ["sim.objectproperty_cannotdelete"],
  },
  "sim.objectproperty_cannotdeleteduringsim": {
    "prefix": "sim.objectproperty_cannotdeleteduringsim",
    "body": ["sim.objectproperty_cannotdeleteduringsim"],
  },
  "sim.objectproperty_collapsed": {
    "prefix": "sim.objectproperty_collapsed",
    "body": ["sim.objectproperty_collapsed"],
  },
  "sim.objectproperty_depthinvisible": {
    "prefix": "sim.objectproperty_depthinvisible",
    "body": ["sim.objectproperty_depthinvisible"],
  },
  "sim.objectproperty_dontshowasinsidemodel": {
    "prefix": "sim.objectproperty_dontshowasinsidemodel",
    "body": ["sim.objectproperty_dontshowasinsidemodel"],
  },
  "sim.objectproperty_hiddenforsimulation": {
    "prefix": "sim.objectproperty_hiddenforsimulation",
    "body": ["sim.objectproperty_hiddenforsimulation"],
  },
  "sim.objectproperty_ignoreviewfitting": {
    "prefix": "sim.objectproperty_ignoreviewfitting",
    "body": ["sim.objectproperty_ignoreviewfitting"],
  },
  "sim.objectproperty_selectable": {
    "prefix": "sim.objectproperty_selectable",
    "body": ["sim.objectproperty_selectable"],
  },
  "sim.objectproperty_selectinvisible": {
    "prefix": "sim.objectproperty_selectinvisible",
    "body": ["sim.objectproperty_selectinvisible"],
  },
  "sim.objectproperty_selectmodelbaseinstead": {
    "prefix": "sim.objectproperty_selectmodelbaseinstead",
    "body": ["sim.objectproperty_selectmodelbaseinstead"],
  },
  "sim.objectspecialproperty_collidable": {
    "prefix": "sim.objectspecialproperty_collidable",
    "body": ["sim.objectspecialproperty_collidable"],
  },
  "sim.objectspecialproperty_detectable": {
    "prefix": "sim.objectspecialproperty_detectable",
    "body": ["sim.objectspecialproperty_detectable"],
  },
  "sim.objectspecialproperty_measurable": {
    "prefix": "sim.objectspecialproperty_measurable",
    "body": ["sim.objectspecialproperty_measurable"],
  },
  "sim.objecttype_collection": {
    "prefix": "sim.objecttype_collection",
    "body": ["sim.objecttype_collection"],
  },
  "sim.objecttype_interfacestack": {
    "prefix": "sim.objecttype_interfacestack",
    "body": ["sim.objecttype_interfacestack"],
  },
  "sim.objecttype_mesh": {
    "prefix": "sim.objecttype_mesh",
    "body": ["sim.objecttype_mesh"],
  },
  "sim.objecttype_sceneobject": {
    "prefix": "sim.objecttype_sceneobject",
    "body": ["sim.objecttype_sceneobject"],
  },
  "sim.objecttype_script": {
    "prefix": "sim.objecttype_script",
    "body": ["sim.objecttype_script"],
  },
  "sim.objecttype_texture": {
    "prefix": "sim.objecttype_texture",
    "body": ["sim.objecttype_texture"],
  },
  "sim.objfloatparam_abs_rot_velocity": {
    "prefix": "sim.objfloatparam_abs_rot_velocity",
    "body": ["sim.objfloatparam_abs_rot_velocity"],
  },
  "sim.objfloatparam_abs_x_velocity": {
    "prefix": "sim.objfloatparam_abs_x_velocity",
    "body": ["sim.objfloatparam_abs_x_velocity"],
  },
  "sim.objfloatparam_abs_y_velocity": {
    "prefix": "sim.objfloatparam_abs_y_velocity",
    "body": ["sim.objfloatparam_abs_y_velocity"],
  },
  "sim.objfloatparam_abs_z_velocity": {
    "prefix": "sim.objfloatparam_abs_z_velocity",
    "body": ["sim.objfloatparam_abs_z_velocity"],
  },
  "sim.objfloatparam_modelbbox_max_x": {
    "prefix": "sim.objfloatparam_modelbbox_max_x",
    "body": ["sim.objfloatparam_modelbbox_max_x"],
  },
  "sim.objfloatparam_modelbbox_max_y": {
    "prefix": "sim.objfloatparam_modelbbox_max_y",
    "body": ["sim.objfloatparam_modelbbox_max_y"],
  },
  "sim.objfloatparam_modelbbox_max_z": {
    "prefix": "sim.objfloatparam_modelbbox_max_z",
    "body": ["sim.objfloatparam_modelbbox_max_z"],
  },
  "sim.objfloatparam_modelbbox_min_x": {
    "prefix": "sim.objfloatparam_modelbbox_min_x",
    "body": ["sim.objfloatparam_modelbbox_min_x"],
  },
  "sim.objfloatparam_modelbbox_min_y": {
    "prefix": "sim.objfloatparam_modelbbox_min_y",
    "body": ["sim.objfloatparam_modelbbox_min_y"],
  },
  "sim.objfloatparam_modelbbox_min_z": {
    "prefix": "sim.objfloatparam_modelbbox_min_z",
    "body": ["sim.objfloatparam_modelbbox_min_z"],
  },
  "sim.objfloatparam_objbbox_max_x": {
    "prefix": "sim.objfloatparam_objbbox_max_x",
    "body": ["sim.objfloatparam_objbbox_max_x"],
  },
  "sim.objfloatparam_objbbox_max_y": {
    "prefix": "sim.objfloatparam_objbbox_max_y",
    "body": ["sim.objfloatparam_objbbox_max_y"],
  },
  "sim.objfloatparam_objbbox_max_z": {
    "prefix": "sim.objfloatparam_objbbox_max_z",
    "body": ["sim.objfloatparam_objbbox_max_z"],
  },
  "sim.objfloatparam_objbbox_min_x": {
    "prefix": "sim.objfloatparam_objbbox_min_x",
    "body": ["sim.objfloatparam_objbbox_min_x"],
  },
  "sim.objfloatparam_objbbox_min_y": {
    "prefix": "sim.objfloatparam_objbbox_min_y",
    "body": ["sim.objfloatparam_objbbox_min_y"],
  },
  "sim.objfloatparam_objbbox_min_z": {
    "prefix": "sim.objfloatparam_objbbox_min_z",
    "body": ["sim.objfloatparam_objbbox_min_z"],
  },
  "sim.objfloatparam_size_factor": {
    "prefix": "sim.objfloatparam_size_factor",
    "body": ["sim.objfloatparam_size_factor"],
  },
  "sim.objfloatparam_transparency_offset": {
    "prefix": "sim.objfloatparam_transparency_offset",
    "body": ["sim.objfloatparam_transparency_offset"],
  },
  "sim.objintparam_child_role": {
    "prefix": "sim.objintparam_child_role",
    "body": ["sim.objintparam_child_role"],
  },
  "sim.objintparam_collection_self_collision_indicator": {
    "prefix": "sim.objintparam_collection_self_collision_indicator",
    "body": ["sim.objintparam_collection_self_collision_indicator"],
  },
  "sim.objintparam_hierarchycolor": {
    "prefix": "sim.objintparam_hierarchycolor",
    "body": ["sim.objintparam_hierarchycolor"],
  },
  "sim.objintparam_illumination_handle": {
    "prefix": "sim.objintparam_illumination_handle",
    "body": ["sim.objintparam_illumination_handle"],
  },
  "sim.objintparam_manipulation_permissions": {
    "prefix": "sim.objintparam_manipulation_permissions",
    "body": ["sim.objintparam_manipulation_permissions"],
  },
  "sim.objintparam_parent_role": {
    "prefix": "sim.objintparam_parent_role",
    "body": ["sim.objintparam_parent_role"],
  },
  "sim.objintparam_unique_id": {
    "prefix": "sim.objintparam_unique_id",
    "body": ["sim.objintparam_unique_id"],
  },
  "sim.objintparam_visibility_layer": {
    "prefix": "sim.objintparam_visibility_layer",
    "body": ["sim.objintparam_visibility_layer"],
  },
  "sim.objintparam_visible": {
    "prefix": "sim.objintparam_visible",
    "body": ["sim.objintparam_visible"],
  },
  "sim.objstringparam_dna": {
    "prefix": "sim.objstringparam_dna",
    "body": ["sim.objstringparam_dna"],
  },
  "sim.objstringparam_unique_id": {
    "prefix": "sim.objstringparam_unique_id",
    "body": ["sim.objstringparam_unique_id"],
  },
  "sim.octreefloatparam_voxelsize": {
    "prefix": "sim.octreefloatparam_voxelsize",
    "body": ["sim.octreefloatparam_voxelsize"],
  },
  "sim.ode_body_angulardamping": {
    "prefix": "sim.ode_body_angulardamping",
    "body": ["sim.ode_body_angulardamping"],
  },
  "sim.ode_body_friction": {
    "prefix": "sim.ode_body_friction",
    "body": ["sim.ode_body_friction"],
  },
  "sim.ode_body_lineardamping": {
    "prefix": "sim.ode_body_lineardamping",
    "body": ["sim.ode_body_lineardamping"],
  },
  "sim.ode_body_maxcontacts": {
    "prefix": "sim.ode_body_maxcontacts",
    "body": ["sim.ode_body_maxcontacts"],
  },
  "sim.ode_body_softcfm": {
    "prefix": "sim.ode_body_softcfm",
    "body": ["sim.ode_body_softcfm"],
  },
  "sim.ode_body_softerp": {
    "prefix": "sim.ode_body_softerp",
    "body": ["sim.ode_body_softerp"],
  },
  "sim.ode_global_bitcoded": {
    "prefix": "sim.ode_global_bitcoded",
    "body": ["sim.ode_global_bitcoded"],
  },
  "sim.ode_global_cfm": {
    "prefix": "sim.ode_global_cfm",
    "body": ["sim.ode_global_cfm"],
  },
  "sim.ode_global_computeinertias": {
    "prefix": "sim.ode_global_computeinertias",
    "body": ["sim.ode_global_computeinertias"],
  },
  "sim.ode_global_constraintsolvingiterations": {
    "prefix": "sim.ode_global_constraintsolvingiterations",
    "body": ["sim.ode_global_constraintsolvingiterations"],
  },
  "sim.ode_global_erp": {
    "prefix": "sim.ode_global_erp",
    "body": ["sim.ode_global_erp"],
  },
  "sim.ode_global_fullinternalscaling": {
    "prefix": "sim.ode_global_fullinternalscaling",
    "body": ["sim.ode_global_fullinternalscaling"],
  },
  "sim.ode_global_internalscalingfactor": {
    "prefix": "sim.ode_global_internalscalingfactor",
    "body": ["sim.ode_global_internalscalingfactor"],
  },
  "sim.ode_global_quickstep": {
    "prefix": "sim.ode_global_quickstep",
    "body": ["sim.ode_global_quickstep"],
  },
  "sim.ode_global_randomseed": {
    "prefix": "sim.ode_global_randomseed",
    "body": ["sim.ode_global_randomseed"],
  },
  "sim.ode_joint_bounce": {
    "prefix": "sim.ode_joint_bounce",
    "body": ["sim.ode_joint_bounce"],
  },
  "sim.ode_joint_fudgefactor": {
    "prefix": "sim.ode_joint_fudgefactor",
    "body": ["sim.ode_joint_fudgefactor"],
  },
  "sim.ode_joint_normalcfm": {
    "prefix": "sim.ode_joint_normalcfm",
    "body": ["sim.ode_joint_normalcfm"],
  },
  "sim.ode_joint_pospid1": {
    "prefix": "sim.ode_joint_pospid1",
    "body": ["sim.ode_joint_pospid1"],
  },
  "sim.ode_joint_pospid2": {
    "prefix": "sim.ode_joint_pospid2",
    "body": ["sim.ode_joint_pospid2"],
  },
  "sim.ode_joint_pospid3": {
    "prefix": "sim.ode_joint_pospid3",
    "body": ["sim.ode_joint_pospid3"],
  },
  "sim.ode_joint_stopcfm": {
    "prefix": "sim.ode_joint_stopcfm",
    "body": ["sim.ode_joint_stopcfm"],
  },
  "sim.ode_joint_stoperp": {
    "prefix": "sim.ode_joint_stoperp",
    "body": ["sim.ode_joint_stoperp"],
  },
  "sim.particle_cyclic": {
    "prefix": "sim.particle_cyclic",
    "body": ["sim.particle_cyclic"],
  },
  "sim.particle_emissioncolor": {
    "prefix": "sim.particle_emissioncolor",
    "body": ["sim.particle_emissioncolor"],
  },
  "sim.particle_ignoresgravity": {
    "prefix": "sim.particle_ignoresgravity",
    "body": ["sim.particle_ignoresgravity"],
  },
  "sim.particle_invisible": {
    "prefix": "sim.particle_invisible",
    "body": ["sim.particle_invisible"],
  },
  "sim.particle_itemcolors": {
    "prefix": "sim.particle_itemcolors",
    "body": ["sim.particle_itemcolors"],
  },
  "sim.particle_itemdensities": {
    "prefix": "sim.particle_itemdensities",
    "body": ["sim.particle_itemdensities"],
  },
  "sim.particle_itemsizes": {
    "prefix": "sim.particle_itemsizes",
    "body": ["sim.particle_itemsizes"],
  },
  "sim.particle_painttag": {
    "prefix": "sim.particle_painttag",
    "body": ["sim.particle_painttag"],
  },
  "sim.particle_particlerespondable": {
    "prefix": "sim.particle_particlerespondable",
    "body": ["sim.particle_particlerespondable"],
  },
  "sim.particle_points1": {
    "prefix": "sim.particle_points1",
    "body": ["sim.particle_points1"],
  },
  "sim.particle_points2": {
    "prefix": "sim.particle_points2",
    "body": ["sim.particle_points2"],
  },
  "sim.particle_points4": {
    "prefix": "sim.particle_points4",
    "body": ["sim.particle_points4"],
  },
  "sim.particle_respondable1to4": {
    "prefix": "sim.particle_respondable1to4",
    "body": ["sim.particle_respondable1to4"],
  },
  "sim.particle_respondable5to8": {
    "prefix": "sim.particle_respondable5to8",
    "body": ["sim.particle_respondable5to8"],
  },
  "sim.particle_roughspheres": {
    "prefix": "sim.particle_roughspheres",
    "body": ["sim.particle_roughspheres"],
  },
  "sim.particle_spheres": {
    "prefix": "sim.particle_spheres",
    "body": ["sim.particle_spheres"],
  },
  "sim.particle_water": {
    "prefix": "sim.particle_water",
    "body": ["sim.particle_water"],
  },
  "sim.physics_bullet": {
    "prefix": "sim.physics_bullet",
    "body": ["sim.physics_bullet"],
  },
  "sim.physics_mujoco": {
    "prefix": "sim.physics_mujoco",
    "body": ["sim.physics_mujoco"],
  },
  "sim.physics_newton": {
    "prefix": "sim.physics_newton",
    "body": ["sim.physics_newton"],
  },
  "sim.physics_ode": {
    "prefix": "sim.physics_ode",
    "body": ["sim.physics_ode"],
  },
  "sim.physics_physx": {
    "prefix": "sim.physics_physx",
    "body": ["sim.physics_physx"],
  },
  "sim.physics_vortex": {
    "prefix": "sim.physics_vortex",
    "body": ["sim.physics_vortex"],
  },
  "sim.plugininfo_builddatestr": {
    "prefix": "sim.plugininfo_builddatestr",
    "body": ["sim.plugininfo_builddatestr"],
  },
  "sim.plugininfo_extversionint": {
    "prefix": "sim.plugininfo_extversionint",
    "body": ["sim.plugininfo_extversionint"],
  },
  "sim.plugininfo_extversionstr": {
    "prefix": "sim.plugininfo_extversionstr",
    "body": ["sim.plugininfo_extversionstr"],
  },
  "sim.plugininfo_statusbarverbosity": {
    "prefix": "sim.plugininfo_statusbarverbosity",
    "body": ["sim.plugininfo_statusbarverbosity"],
  },
  "sim.plugininfo_verbosity": {
    "prefix": "sim.plugininfo_verbosity",
    "body": ["sim.plugininfo_verbosity"],
  },
  "sim.primitiveshape_capsule": {
    "prefix": "sim.primitiveshape_capsule",
    "body": ["sim.primitiveshape_capsule"],
  },
  "sim.primitiveshape_cone": {
    "prefix": "sim.primitiveshape_cone",
    "body": ["sim.primitiveshape_cone"],
  },
  "sim.primitiveshape_cuboid": {
    "prefix": "sim.primitiveshape_cuboid",
    "body": ["sim.primitiveshape_cuboid"],
  },
  "sim.primitiveshape_cylinder": {
    "prefix": "sim.primitiveshape_cylinder",
    "body": ["sim.primitiveshape_cylinder"],
  },
  "sim.primitiveshape_disc": {
    "prefix": "sim.primitiveshape_disc",
    "body": ["sim.primitiveshape_disc"],
  },
  "sim.primitiveshape_heightfield": {
    "prefix": "sim.primitiveshape_heightfield",
    "body": ["sim.primitiveshape_heightfield"],
  },
  "sim.primitiveshape_none": {
    "prefix": "sim.primitiveshape_none",
    "body": ["sim.primitiveshape_none"],
  },
  "sim.primitiveshape_plane": {
    "prefix": "sim.primitiveshape_plane",
    "body": ["sim.primitiveshape_plane"],
  },
  "sim.primitiveshape_spheroid": {
    "prefix": "sim.primitiveshape_spheroid",
    "body": ["sim.primitiveshape_spheroid"],
  },
  "sim.propertyinfo_deprecated": {
    "prefix": "sim.propertyinfo_deprecated",
    "body": ["sim.propertyinfo_deprecated"],
  },
  "sim.propertyinfo_largedata": {
    "prefix": "sim.propertyinfo_largedata",
    "body": ["sim.propertyinfo_largedata"],
  },
  "sim.propertyinfo_modelhashexclude": {
    "prefix": "sim.propertyinfo_modelhashexclude",
    "body": ["sim.propertyinfo_modelhashexclude"],
  },
  "sim.propertyinfo_notreadable": {
    "prefix": "sim.propertyinfo_notreadable",
    "body": ["sim.propertyinfo_notreadable"],
  },
  "sim.propertyinfo_notwritable": {
    "prefix": "sim.propertyinfo_notwritable",
    "body": ["sim.propertyinfo_notwritable"],
  },
  "sim.propertyinfo_removable": {
    "prefix": "sim.propertyinfo_removable",
    "body": ["sim.propertyinfo_removable"],
  },
  "sim.propertytype_bool": {
    "prefix": "sim.propertytype_bool",
    "body": ["sim.propertytype_bool"],
  },
  "sim.propertytype_buffer": {
    "prefix": "sim.propertytype_buffer",
    "body": ["sim.propertytype_buffer"],
  },
  "sim.propertytype_color": {
    "prefix": "sim.propertytype_color",
    "body": ["sim.propertytype_color"],
  },
  "sim.propertytype_float": {
    "prefix": "sim.propertytype_float",
    "body": ["sim.propertytype_float"],
  },
  "sim.propertytype_floatarray": {
    "prefix": "sim.propertytype_floatarray",
    "body": ["sim.propertytype_floatarray"],
  },
  "sim.propertytype_int": {
    "prefix": "sim.propertytype_int",
    "body": ["sim.propertytype_int"],
  },
  "sim.propertytype_intarray": {
    "prefix": "sim.propertytype_intarray",
    "body": ["sim.propertytype_intarray"],
  },
  "sim.propertytype_intarray2": {
    "prefix": "sim.propertytype_intarray2",
    "body": ["sim.propertytype_intarray2"],
  },
  "sim.propertytype_long": {
    "prefix": "sim.propertytype_long",
    "body": ["sim.propertytype_long"],
  },
  "sim.propertytype_matrix3x3": {
    "prefix": "sim.propertytype_matrix3x3",
    "body": ["sim.propertytype_matrix3x3"],
  },
  "sim.propertytype_matrix4x4": {
    "prefix": "sim.propertytype_matrix4x4",
    "body": ["sim.propertytype_matrix4x4"],
  },
  "sim.propertytype_pose": {
    "prefix": "sim.propertytype_pose",
    "body": ["sim.propertytype_pose"],
  },
  "sim.propertytype_quaternion": {
    "prefix": "sim.propertytype_quaternion",
    "body": ["sim.propertytype_quaternion"],
  },
  "sim.propertytype_string": {
    "prefix": "sim.propertytype_string",
    "body": ["sim.propertytype_string"],
  },
  "sim.propertytype_table": {
    "prefix": "sim.propertytype_table",
    "body": ["sim.propertytype_table"],
  },
  "sim.propertytype_vector2": {
    "prefix": "sim.propertytype_vector2",
    "body": ["sim.propertytype_vector2"],
  },
  "sim.propertytype_vector3": {
    "prefix": "sim.propertytype_vector3",
    "body": ["sim.propertytype_vector3"],
  },
  "sim.proximitysensor_cone": {
    "prefix": "sim.proximitysensor_cone",
    "body": ["sim.proximitysensor_cone"],
  },
  "sim.proximitysensor_cylinder": {
    "prefix": "sim.proximitysensor_cylinder",
    "body": ["sim.proximitysensor_cylinder"],
  },
  "sim.proximitysensor_disc": {
    "prefix": "sim.proximitysensor_disc",
    "body": ["sim.proximitysensor_disc"],
  },
  "sim.proximitysensor_pyramid": {
    "prefix": "sim.proximitysensor_pyramid",
    "body": ["sim.proximitysensor_pyramid"],
  },
  "sim.proximitysensor_ray": {
    "prefix": "sim.proximitysensor_ray",
    "body": ["sim.proximitysensor_ray"],
  },
  "sim.proxintparam_entity_to_detect": {
    "prefix": "sim.proxintparam_entity_to_detect",
    "body": ["sim.proxintparam_entity_to_detect"],
  },
  "sim.proxintparam_ray_invisibility": {
    "prefix": "sim.proxintparam_ray_invisibility",
    "body": ["sim.proxintparam_ray_invisibility"],
  },
  "sim.proxintparam_volume_type": {
    "prefix": "sim.proxintparam_volume_type",
    "body": ["sim.proxintparam_volume_type"],
  },
  "sim.ruckig_minaccel": {
    "prefix": "sim.ruckig_minaccel",
    "body": ["sim.ruckig_minaccel"],
  },
  "sim.ruckig_minvel": {
    "prefix": "sim.ruckig_minvel",
    "body": ["sim.ruckig_minvel"],
  },
  "sim.ruckig_nosync": {
    "prefix": "sim.ruckig_nosync",
    "body": ["sim.ruckig_nosync"],
  },
  "sim.ruckig_phasesync": {
    "prefix": "sim.ruckig_phasesync",
    "body": ["sim.ruckig_phasesync"],
  },
  "sim.ruckig_timesync": {
    "prefix": "sim.ruckig_timesync",
    "body": ["sim.ruckig_timesync"],
  },
  "sim.sceneobject_camera": {
    "prefix": "sim.sceneobject_camera",
    "body": ["sim.sceneobject_camera"],
  },
  "sim.sceneobject_dummy": {
    "prefix": "sim.sceneobject_dummy",
    "body": ["sim.sceneobject_dummy"],
  },
  "sim.sceneobject_forcesensor": {
    "prefix": "sim.sceneobject_forcesensor",
    "body": ["sim.sceneobject_forcesensor"],
  },
  "sim.sceneobject_graph": {
    "prefix": "sim.sceneobject_graph",
    "body": ["sim.sceneobject_graph"],
  },
  "sim.sceneobject_joint": {
    "prefix": "sim.sceneobject_joint",
    "body": ["sim.sceneobject_joint"],
  },
  "sim.sceneobject_light": {
    "prefix": "sim.sceneobject_light",
    "body": ["sim.sceneobject_light"],
  },
  "sim.sceneobject_octree": {
    "prefix": "sim.sceneobject_octree",
    "body": ["sim.sceneobject_octree"],
  },
  "sim.sceneobject_pointcloud": {
    "prefix": "sim.sceneobject_pointcloud",
    "body": ["sim.sceneobject_pointcloud"],
  },
  "sim.sceneobject_proximitysensor": {
    "prefix": "sim.sceneobject_proximitysensor",
    "body": ["sim.sceneobject_proximitysensor"],
  },
  "sim.sceneobject_renderingsensor": {
    "prefix": "sim.sceneobject_renderingsensor",
    "body": ["sim.sceneobject_renderingsensor"],
  },
  "sim.sceneobject_script": {
    "prefix": "sim.sceneobject_script",
    "body": ["sim.sceneobject_script"],
  },
  "sim.sceneobject_shape": {
    "prefix": "sim.sceneobject_shape",
    "body": ["sim.sceneobject_shape"],
  },
  "sim.sceneobject_visionsensor": {
    "prefix": "sim.sceneobject_visionsensor",
    "body": ["sim.sceneobject_visionsensor"],
  },
  "sim.scriptexecorder_first": {
    "prefix": "sim.scriptexecorder_first",
    "body": ["sim.scriptexecorder_first"],
  },
  "sim.scriptexecorder_last": {
    "prefix": "sim.scriptexecorder_last",
    "body": ["sim.scriptexecorder_last"],
  },
  "sim.scriptexecorder_normal": {
    "prefix": "sim.scriptexecorder_normal",
    "body": ["sim.scriptexecorder_normal"],
  },
  "sim.scriptintparam_autorestartonerror": {
    "prefix": "sim.scriptintparam_autorestartonerror",
    "body": ["sim.scriptintparam_autorestartonerror"],
  },
  "sim.scriptintparam_enabled": {
    "prefix": "sim.scriptintparam_enabled",
    "body": ["sim.scriptintparam_enabled"],
  },
  "sim.scriptintparam_execcount": {
    "prefix": "sim.scriptintparam_execcount",
    "body": ["sim.scriptintparam_execcount"],
  },
  "sim.scriptintparam_execorder": {
    "prefix": "sim.scriptintparam_execorder",
    "body": ["sim.scriptintparam_execorder"],
  },
  "sim.scriptintparam_type": {
    "prefix": "sim.scriptintparam_type",
    "body": ["sim.scriptintparam_type"],
  },
  "sim.scriptstringparam_description": {
    "prefix": "sim.scriptstringparam_description",
    "body": ["sim.scriptstringparam_description"],
  },
  "sim.scriptstringparam_name": {
    "prefix": "sim.scriptstringparam_name",
    "body": ["sim.scriptstringparam_name"],
  },
  "sim.scriptstringparam_nameext": {
    "prefix": "sim.scriptstringparam_nameext",
    "body": ["sim.scriptstringparam_nameext"],
  },
  "sim.scriptstringparam_text": {
    "prefix": "sim.scriptstringparam_text",
    "body": ["sim.scriptstringparam_text"],
  },
  "sim.scripttype_addon": {
    "prefix": "sim.scripttype_addon",
    "body": ["sim.scripttype_addon"],
  },
  "sim.scripttype_customization": {
    "prefix": "sim.scripttype_customization",
    "body": ["sim.scripttype_customization"],
  },
  "sim.scripttype_main": {
    "prefix": "sim.scripttype_main",
    "body": ["sim.scripttype_main"],
  },
  "sim.scripttype_passive": {
    "prefix": "sim.scripttype_passive",
    "body": ["sim.scripttype_passive"],
  },
  "sim.scripttype_sandbox": {
    "prefix": "sim.scripttype_sandbox",
    "body": ["sim.scripttype_sandbox"],
  },
  "sim.scripttype_simulation": {
    "prefix": "sim.scripttype_simulation",
    "body": ["sim.scripttype_simulation"],
  },
  "sim.shape_compound": {
    "prefix": "sim.shape_compound",
    "body": ["sim.shape_compound"],
  },
  "sim.shape_simple": {
    "prefix": "sim.shape_simple",
    "body": ["sim.shape_simple"],
  },
  "sim.shapefloatparam_edge_angle": {
    "prefix": "sim.shapefloatparam_edge_angle",
    "body": ["sim.shapefloatparam_edge_angle"],
  },
  "sim.shapefloatparam_init_ang_velocity_x": {
    "prefix": "sim.shapefloatparam_init_ang_velocity_x",
    "body": ["sim.shapefloatparam_init_ang_velocity_x"],
  },
  "sim.shapefloatparam_init_ang_velocity_y": {
    "prefix": "sim.shapefloatparam_init_ang_velocity_y",
    "body": ["sim.shapefloatparam_init_ang_velocity_y"],
  },
  "sim.shapefloatparam_init_ang_velocity_z": {
    "prefix": "sim.shapefloatparam_init_ang_velocity_z",
    "body": ["sim.shapefloatparam_init_ang_velocity_z"],
  },
  "sim.shapefloatparam_init_velocity_x": {
    "prefix": "sim.shapefloatparam_init_velocity_x",
    "body": ["sim.shapefloatparam_init_velocity_x"],
  },
  "sim.shapefloatparam_init_velocity_y": {
    "prefix": "sim.shapefloatparam_init_velocity_y",
    "body": ["sim.shapefloatparam_init_velocity_y"],
  },
  "sim.shapefloatparam_init_velocity_z": {
    "prefix": "sim.shapefloatparam_init_velocity_z",
    "body": ["sim.shapefloatparam_init_velocity_z"],
  },
  "sim.shapefloatparam_mass": {
    "prefix": "sim.shapefloatparam_mass",
    "body": ["sim.shapefloatparam_mass"],
  },
  "sim.shapefloatparam_shading_angle": {
    "prefix": "sim.shapefloatparam_shading_angle",
    "body": ["sim.shapefloatparam_shading_angle"],
  },
  "sim.shapefloatparam_texture_a": {
    "prefix": "sim.shapefloatparam_texture_a",
    "body": ["sim.shapefloatparam_texture_a"],
  },
  "sim.shapefloatparam_texture_b": {
    "prefix": "sim.shapefloatparam_texture_b",
    "body": ["sim.shapefloatparam_texture_b"],
  },
  "sim.shapefloatparam_texture_g": {
    "prefix": "sim.shapefloatparam_texture_g",
    "body": ["sim.shapefloatparam_texture_g"],
  },
  "sim.shapefloatparam_texture_scaling_x": {
    "prefix": "sim.shapefloatparam_texture_scaling_x",
    "body": ["sim.shapefloatparam_texture_scaling_x"],
  },
  "sim.shapefloatparam_texture_scaling_y": {
    "prefix": "sim.shapefloatparam_texture_scaling_y",
    "body": ["sim.shapefloatparam_texture_scaling_y"],
  },
  "sim.shapefloatparam_texture_x": {
    "prefix": "sim.shapefloatparam_texture_x",
    "body": ["sim.shapefloatparam_texture_x"],
  },
  "sim.shapefloatparam_texture_y": {
    "prefix": "sim.shapefloatparam_texture_y",
    "body": ["sim.shapefloatparam_texture_y"],
  },
  "sim.shapefloatparam_texture_z": {
    "prefix": "sim.shapefloatparam_texture_z",
    "body": ["sim.shapefloatparam_texture_z"],
  },
  "sim.shapeintparam_component_cnt": {
    "prefix": "sim.shapeintparam_component_cnt",
    "body": ["sim.shapeintparam_component_cnt"],
  },
  "sim.shapeintparam_compound": {
    "prefix": "sim.shapeintparam_compound",
    "body": ["sim.shapeintparam_compound"],
  },
  "sim.shapeintparam_convex": {
    "prefix": "sim.shapeintparam_convex",
    "body": ["sim.shapeintparam_convex"],
  },
  "sim.shapeintparam_convex_check": {
    "prefix": "sim.shapeintparam_convex_check",
    "body": ["sim.shapeintparam_convex_check"],
  },
  "sim.shapeintparam_culling": {
    "prefix": "sim.shapeintparam_culling",
    "body": ["sim.shapeintparam_culling"],
  },
  "sim.shapeintparam_edge_borders_hidden": {
    "prefix": "sim.shapeintparam_edge_borders_hidden",
    "body": ["sim.shapeintparam_edge_borders_hidden"],
  },
  "sim.shapeintparam_edge_visibility": {
    "prefix": "sim.shapeintparam_edge_visibility",
    "body": ["sim.shapeintparam_edge_visibility"],
  },
  "sim.shapeintparam_kinematic": {
    "prefix": "sim.shapeintparam_kinematic",
    "body": ["sim.shapeintparam_kinematic"],
  },
  "sim.shapeintparam_respondable": {
    "prefix": "sim.shapeintparam_respondable",
    "body": ["sim.shapeintparam_respondable"],
  },
  "sim.shapeintparam_respondable_mask": {
    "prefix": "sim.shapeintparam_respondable_mask",
    "body": ["sim.shapeintparam_respondable_mask"],
  },
  "sim.shapeintparam_respondablesuspendcnt": {
    "prefix": "sim.shapeintparam_respondablesuspendcnt",
    "body": ["sim.shapeintparam_respondablesuspendcnt"],
  },
  "sim.shapeintparam_sleepmodestart": {
    "prefix": "sim.shapeintparam_sleepmodestart",
    "body": ["sim.shapeintparam_sleepmodestart"],
  },
  "sim.shapeintparam_static": {
    "prefix": "sim.shapeintparam_static",
    "body": ["sim.shapeintparam_static"],
  },
  "sim.shapeintparam_wireframe": {
    "prefix": "sim.shapeintparam_wireframe",
    "body": ["sim.shapeintparam_wireframe"],
  },
  "sim.shapestringparam_colorname": {
    "prefix": "sim.shapestringparam_colorname",
    "body": ["sim.shapestringparam_colorname"],
  },
  "sim.simulation_advancing": {
    "prefix": "sim.simulation_advancing",
    "body": ["sim.simulation_advancing"],
  },
  "sim.simulation_advancing_abouttostop": {
    "prefix": "sim.simulation_advancing_abouttostop",
    "body": ["sim.simulation_advancing_abouttostop"],
  },
  "sim.simulation_advancing_firstafterpause": {
    "prefix": "sim.simulation_advancing_firstafterpause",
    "body": ["sim.simulation_advancing_firstafterpause"],
  },
  "sim.simulation_advancing_firstafterstop": {
    "prefix": "sim.simulation_advancing_firstafterstop",
    "body": ["sim.simulation_advancing_firstafterstop"],
  },
  "sim.simulation_advancing_lastbeforepause": {
    "prefix": "sim.simulation_advancing_lastbeforepause",
    "body": ["sim.simulation_advancing_lastbeforepause"],
  },
  "sim.simulation_advancing_lastbeforestop": {
    "prefix": "sim.simulation_advancing_lastbeforestop",
    "body": ["sim.simulation_advancing_lastbeforestop"],
  },
  "sim.simulation_advancing_running": {
    "prefix": "sim.simulation_advancing_running",
    "body": ["sim.simulation_advancing_running"],
  },
  "sim.simulation_paused": {
    "prefix": "sim.simulation_paused",
    "body": ["sim.simulation_paused"],
  },
  "sim.simulation_stopped": {
    "prefix": "sim.simulation_stopped",
    "body": ["sim.simulation_stopped"],
  },
  "sim.stream_transf_cumulative": {
    "prefix": "sim.stream_transf_cumulative",
    "body": ["sim.stream_transf_cumulative"],
  },
  "sim.stream_transf_derivative": {
    "prefix": "sim.stream_transf_derivative",
    "body": ["sim.stream_transf_derivative"],
  },
  "sim.stream_transf_integral": {
    "prefix": "sim.stream_transf_integral",
    "body": ["sim.stream_transf_integral"],
  },
  "sim.stream_transf_raw": {
    "prefix": "sim.stream_transf_raw",
    "body": ["sim.stream_transf_raw"],
  },
  "sim.stringparam_additionalpythonpath": {
    "prefix": "sim.stringparam_additionalpythonpath",
    "body": ["sim.stringparam_additionalpythonpath"],
  },
  "sim.stringparam_addondir": {
    "prefix": "sim.stringparam_addondir",
    "body": ["sim.stringparam_addondir"],
  },
  "sim.stringparam_addonpath": {
    "prefix": "sim.stringparam_addonpath",
    "body": ["sim.stringparam_addonpath"],
  },
  "sim.stringparam_app_arg1": {
    "prefix": "sim.stringparam_app_arg1",
    "body": ["sim.stringparam_app_arg1"],
  },
  "sim.stringparam_app_arg2": {
    "prefix": "sim.stringparam_app_arg2",
    "body": ["sim.stringparam_app_arg2"],
  },
  "sim.stringparam_app_arg3": {
    "prefix": "sim.stringparam_app_arg3",
    "body": ["sim.stringparam_app_arg3"],
  },
  "sim.stringparam_app_arg4": {
    "prefix": "sim.stringparam_app_arg4",
    "body": ["sim.stringparam_app_arg4"],
  },
  "sim.stringparam_app_arg5": {
    "prefix": "sim.stringparam_app_arg5",
    "body": ["sim.stringparam_app_arg5"],
  },
  "sim.stringparam_app_arg6": {
    "prefix": "sim.stringparam_app_arg6",
    "body": ["sim.stringparam_app_arg6"],
  },
  "sim.stringparam_app_arg7": {
    "prefix": "sim.stringparam_app_arg7",
    "body": ["sim.stringparam_app_arg7"],
  },
  "sim.stringparam_app_arg8": {
    "prefix": "sim.stringparam_app_arg8",
    "body": ["sim.stringparam_app_arg8"],
  },
  "sim.stringparam_app_arg9": {
    "prefix": "sim.stringparam_app_arg9",
    "body": ["sim.stringparam_app_arg9"],
  },
  "sim.stringparam_application_path": {
    "prefix": "sim.stringparam_application_path",
    "body": ["sim.stringparam_application_path"],
  },
  "sim.stringparam_datadir": {
    "prefix": "sim.stringparam_datadir",
    "body": ["sim.stringparam_datadir"],
  },
  "sim.stringparam_defaultpython": {
    "prefix": "sim.stringparam_defaultpython",
    "body": ["sim.stringparam_defaultpython"],
  },
  "sim.stringparam_dlgverbosity": {
    "prefix": "sim.stringparam_dlgverbosity",
    "body": ["sim.stringparam_dlgverbosity"],
  },
  "sim.stringparam_importexportdir": {
    "prefix": "sim.stringparam_importexportdir",
    "body": ["sim.stringparam_importexportdir"],
  },
  "sim.stringparam_logfilter": {
    "prefix": "sim.stringparam_logfilter",
    "body": ["sim.stringparam_logfilter"],
  },
  "sim.stringparam_luadir": {
    "prefix": "sim.stringparam_luadir",
    "body": ["sim.stringparam_luadir"],
  },
  "sim.stringparam_machine_id": {
    "prefix": "sim.stringparam_machine_id",
    "body": ["sim.stringparam_machine_id"],
  },
  "sim.stringparam_machine_id_legacy": {
    "prefix": "sim.stringparam_machine_id_legacy",
    "body": ["sim.stringparam_machine_id_legacy"],
  },
  "sim.stringparam_modeldefaultdir": {
    "prefix": "sim.stringparam_modeldefaultdir",
    "body": ["sim.stringparam_modeldefaultdir"],
  },
  "sim.stringparam_mujocodir": {
    "prefix": "sim.stringparam_mujocodir",
    "body": ["sim.stringparam_mujocodir"],
  },
  "sim.stringparam_pythondir": {
    "prefix": "sim.stringparam_pythondir",
    "body": ["sim.stringparam_pythondir"],
  },
  "sim.stringparam_remoteapi_temp_file_dir": {
    "prefix": "sim.stringparam_remoteapi_temp_file_dir",
    "body": ["sim.stringparam_remoteapi_temp_file_dir"],
  },
  "sim.stringparam_resourcesdir": {
    "prefix": "sim.stringparam_resourcesdir",
    "body": ["sim.stringparam_resourcesdir"],
  },
  "sim.stringparam_sandboxlang": {
    "prefix": "sim.stringparam_sandboxlang",
    "body": ["sim.stringparam_sandboxlang"],
  },
  "sim.stringparam_scene_name": {
    "prefix": "sim.stringparam_scene_name",
    "body": ["sim.stringparam_scene_name"],
  },
  "sim.stringparam_scene_path": {
    "prefix": "sim.stringparam_scene_path",
    "body": ["sim.stringparam_scene_path"],
  },
  "sim.stringparam_scene_path_and_name": {
    "prefix": "sim.stringparam_scene_path_and_name",
    "body": ["sim.stringparam_scene_path_and_name"],
  },
  "sim.stringparam_scene_unique_id": {
    "prefix": "sim.stringparam_scene_unique_id",
    "body": ["sim.stringparam_scene_unique_id"],
  },
  "sim.stringparam_scenedefaultdir": {
    "prefix": "sim.stringparam_scenedefaultdir",
    "body": ["sim.stringparam_scenedefaultdir"],
  },
  "sim.stringparam_statusbarverbosity": {
    "prefix": "sim.stringparam_statusbarverbosity",
    "body": ["sim.stringparam_statusbarverbosity"],
  },
  "sim.stringparam_systemdir": {
    "prefix": "sim.stringparam_systemdir",
    "body": ["sim.stringparam_systemdir"],
  },
  "sim.stringparam_tempdir": {
    "prefix": "sim.stringparam_tempdir",
    "body": ["sim.stringparam_tempdir"],
  },
  "sim.stringparam_tempscenedir": {
    "prefix": "sim.stringparam_tempscenedir",
    "body": ["sim.stringparam_tempscenedir"],
  },
  "sim.stringparam_uniqueid": {
    "prefix": "sim.stringparam_uniqueid",
    "body": ["sim.stringparam_uniqueid"],
  },
  "sim.stringparam_usersettingsdir": {
    "prefix": "sim.stringparam_usersettingsdir",
    "body": ["sim.stringparam_usersettingsdir"],
  },
  "sim.stringparam_verbosity": {
    "prefix": "sim.stringparam_verbosity",
    "body": ["sim.stringparam_verbosity"],
  },
  "sim.stringparam_video_filename": {
    "prefix": "sim.stringparam_video_filename",
    "body": ["sim.stringparam_video_filename"],
  },
  "sim.texturemap_cube": {
    "prefix": "sim.texturemap_cube",
    "body": ["sim.texturemap_cube"],
  },
  "sim.texturemap_cylinder": {
    "prefix": "sim.texturemap_cylinder",
    "body": ["sim.texturemap_cylinder"],
  },
  "sim.texturemap_plane": {
    "prefix": "sim.texturemap_plane",
    "body": ["sim.texturemap_plane"],
  },
  "sim.texturemap_sphere": {
    "prefix": "sim.texturemap_sphere",
    "body": ["sim.texturemap_sphere"],
  },
  "sim.verbosity_debug": {
    "prefix": "sim.verbosity_debug",
    "body": ["sim.verbosity_debug"],
  },
  "sim.verbosity_default": {
    "prefix": "sim.verbosity_default",
    "body": ["sim.verbosity_default"],
  },
  "sim.verbosity_errors": {
    "prefix": "sim.verbosity_errors",
    "body": ["sim.verbosity_errors"],
  },
  "sim.verbosity_infos": {
    "prefix": "sim.verbosity_infos",
    "body": ["sim.verbosity_infos"],
  },
  "sim.verbosity_loadinfos": {
    "prefix": "sim.verbosity_loadinfos",
    "body": ["sim.verbosity_loadinfos"],
  },
  "sim.verbosity_msgs": {
    "prefix": "sim.verbosity_msgs",
    "body": ["sim.verbosity_msgs"],
  },
  "sim.verbosity_none": {
    "prefix": "sim.verbosity_none",
    "body": ["sim.verbosity_none"],
  },
  "sim.verbosity_onlyterminal": {
    "prefix": "sim.verbosity_onlyterminal",
    "body": ["sim.verbosity_onlyterminal"],
  },
  "sim.verbosity_questions": {
    "prefix": "sim.verbosity_questions",
    "body": ["sim.verbosity_questions"],
  },
  "sim.verbosity_scripterrors": {
    "prefix": "sim.verbosity_scripterrors",
    "body": ["sim.verbosity_scripterrors"],
  },
  "sim.verbosity_scriptinfos": {
    "prefix": "sim.verbosity_scriptinfos",
    "body": ["sim.verbosity_scriptinfos"],
  },
  "sim.verbosity_scriptwarnings": {
    "prefix": "sim.verbosity_scriptwarnings",
    "body": ["sim.verbosity_scriptwarnings"],
  },
  "sim.verbosity_trace": {
    "prefix": "sim.verbosity_trace",
    "body": ["sim.verbosity_trace"],
  },
  "sim.verbosity_traceall": {
    "prefix": "sim.verbosity_traceall",
    "body": ["sim.verbosity_traceall"],
  },
  "sim.verbosity_tracelua": {
    "prefix": "sim.verbosity_tracelua",
    "body": ["sim.verbosity_tracelua"],
  },
  "sim.verbosity_undecorated": {
    "prefix": "sim.verbosity_undecorated",
    "body": ["sim.verbosity_undecorated"],
  },
  "sim.verbosity_useglobal": {
    "prefix": "sim.verbosity_useglobal",
    "body": ["sim.verbosity_useglobal"],
  },
  "sim.verbosity_warnings": {
    "prefix": "sim.verbosity_warnings",
    "body": ["sim.verbosity_warnings"],
  },
  "sim.visionfarrayparam_viewfrustum": {
    "prefix": "sim.visionfarrayparam_viewfrustum",
    "body": ["sim.visionfarrayparam_viewfrustum"],
  },
  "sim.visionfloatparam_far_clipping": {
    "prefix": "sim.visionfloatparam_far_clipping",
    "body": ["sim.visionfloatparam_far_clipping"],
  },
  "sim.visionfloatparam_near_clipping": {
    "prefix": "sim.visionfloatparam_near_clipping",
    "body": ["sim.visionfloatparam_near_clipping"],
  },
  "sim.visionfloatparam_ortho_size": {
    "prefix": "sim.visionfloatparam_ortho_size",
    "body": ["sim.visionfloatparam_ortho_size"],
  },
  "sim.visionfloatparam_perspective_angle": {
    "prefix": "sim.visionfloatparam_perspective_angle",
    "body": ["sim.visionfloatparam_perspective_angle"],
  },
  "sim.visionfloatparam_pov_aperture": {
    "prefix": "sim.visionfloatparam_pov_aperture",
    "body": ["sim.visionfloatparam_pov_aperture"],
  },
  "sim.visionfloatparam_pov_blur_distance": {
    "prefix": "sim.visionfloatparam_pov_blur_distance",
    "body": ["sim.visionfloatparam_pov_blur_distance"],
  },
  "sim.visionintparam_depthignored": {
    "prefix": "sim.visionintparam_depthignored",
    "body": ["sim.visionintparam_depthignored"],
  },
  "sim.visionintparam_disabled_light_components": {
    "prefix": "sim.visionintparam_disabled_light_components",
    "body": ["sim.visionintparam_disabled_light_components"],
  },
  "sim.visionintparam_entity_to_render": {
    "prefix": "sim.visionintparam_entity_to_render",
    "body": ["sim.visionintparam_entity_to_render"],
  },
  "sim.visionintparam_perspective_operation": {
    "prefix": "sim.visionintparam_perspective_operation",
    "body": ["sim.visionintparam_perspective_operation"],
  },
  "sim.visionintparam_pov_blur_sampled": {
    "prefix": "sim.visionintparam_pov_blur_sampled",
    "body": ["sim.visionintparam_pov_blur_sampled"],
  },
  "sim.visionintparam_pov_focal_blur": {
    "prefix": "sim.visionintparam_pov_focal_blur",
    "body": ["sim.visionintparam_pov_focal_blur"],
  },
  "sim.visionintparam_render_mode": {
    "prefix": "sim.visionintparam_render_mode",
    "body": ["sim.visionintparam_render_mode"],
  },
  "sim.visionintparam_rendering_attributes": {
    "prefix": "sim.visionintparam_rendering_attributes",
    "body": ["sim.visionintparam_rendering_attributes"],
  },
  "sim.visionintparam_resolution_x": {
    "prefix": "sim.visionintparam_resolution_x",
    "body": ["sim.visionintparam_resolution_x"],
  },
  "sim.visionintparam_resolution_y": {
    "prefix": "sim.visionintparam_resolution_y",
    "body": ["sim.visionintparam_resolution_y"],
  },
  "sim.visionintparam_rgbignored": {
    "prefix": "sim.visionintparam_rgbignored",
    "body": ["sim.visionintparam_rgbignored"],
  },
  "sim.visionintparam_windowed_pos_x": {
    "prefix": "sim.visionintparam_windowed_pos_x",
    "body": ["sim.visionintparam_windowed_pos_x"],
  },
  "sim.visionintparam_windowed_pos_y": {
    "prefix": "sim.visionintparam_windowed_pos_y",
    "body": ["sim.visionintparam_windowed_pos_y"],
  },
  "sim.visionintparam_windowed_size_x": {
    "prefix": "sim.visionintparam_windowed_size_x",
    "body": ["sim.visionintparam_windowed_size_x"],
  },
  "sim.visionintparam_windowed_size_y": {
    "prefix": "sim.visionintparam_windowed_size_y",
    "body": ["sim.visionintparam_windowed_size_y"],
  },
  "sim.volume_cone": {
    "prefix": "sim.volume_cone",
    "body": ["sim.volume_cone"],
  },
  "sim.volume_cylinder": {
    "prefix": "sim.volume_cylinder",
    "body": ["sim.volume_cylinder"],
  },
  "sim.volume_disc": {
    "prefix": "sim.volume_disc",
    "body": ["sim.volume_disc"],
  },
  "sim.volume_pyramid": {
    "prefix": "sim.volume_pyramid",
    "body": ["sim.volume_pyramid"],
  },
  "sim.volume_randomizedray": {
    "prefix": "sim.volume_randomizedray",
    "body": ["sim.volume_randomizedray"],
  },
  "sim.volume_ray": {
    "prefix": "sim.volume_ray",
    "body": ["sim.volume_ray"],
  },
  "sim.vortex_body_adhesiveforce": {
    "prefix": "sim.vortex_body_adhesiveforce",
    "body": ["sim.vortex_body_adhesiveforce"],
  },
  "sim.vortex_body_angularvelocitydamping": {
    "prefix": "sim.vortex_body_angularvelocitydamping",
    "body": ["sim.vortex_body_angularvelocitydamping"],
  },
  "sim.vortex_body_autoangulardamping": {
    "prefix": "sim.vortex_body_autoangulardamping",
    "body": ["sim.vortex_body_autoangulardamping"],
  },
  "sim.vortex_body_autoangulardampingtensionratio": {
    "prefix": "sim.vortex_body_autoangulardampingtensionratio",
    "body": ["sim.vortex_body_autoangulardampingtensionratio"],
  },
  "sim.vortex_body_autosleepangularaccelthreshold": {
    "prefix": "sim.vortex_body_autosleepangularaccelthreshold",
    "body": ["sim.vortex_body_autosleepangularaccelthreshold"],
  },
  "sim.vortex_body_autosleepangularspeedthreshold": {
    "prefix": "sim.vortex_body_autosleepangularspeedthreshold",
    "body": ["sim.vortex_body_autosleepangularspeedthreshold"],
  },
  "sim.vortex_body_autosleeplinearaccelthreshold": {
    "prefix": "sim.vortex_body_autosleeplinearaccelthreshold",
    "body": ["sim.vortex_body_autosleeplinearaccelthreshold"],
  },
  "sim.vortex_body_autosleeplinearspeedthreshold": {
    "prefix": "sim.vortex_body_autosleeplinearspeedthreshold",
    "body": ["sim.vortex_body_autosleeplinearspeedthreshold"],
  },
  "sim.vortex_body_autosleepsteplivethreshold": {
    "prefix": "sim.vortex_body_autosleepsteplivethreshold",
    "body": ["sim.vortex_body_autosleepsteplivethreshold"],
  },
  "sim.vortex_body_autoslip": {
    "prefix": "sim.vortex_body_autoslip",
    "body": ["sim.vortex_body_autoslip"],
  },
  "sim.vortex_body_bitcoded": {
    "prefix": "sim.vortex_body_bitcoded",
    "body": ["sim.vortex_body_bitcoded"],
  },
  "sim.vortex_body_compliance": {
    "prefix": "sim.vortex_body_compliance",
    "body": ["sim.vortex_body_compliance"],
  },
  "sim.vortex_body_convexshapesasrandom": {
    "prefix": "sim.vortex_body_convexshapesasrandom",
    "body": ["sim.vortex_body_convexshapesasrandom"],
  },
  "sim.vortex_body_damping": {
    "prefix": "sim.vortex_body_damping",
    "body": ["sim.vortex_body_damping"],
  },
  "sim.vortex_body_fastmoving": {
    "prefix": "sim.vortex_body_fastmoving",
    "body": ["sim.vortex_body_fastmoving"],
  },
  "sim.vortex_body_linearvelocitydamping": {
    "prefix": "sim.vortex_body_linearvelocitydamping",
    "body": ["sim.vortex_body_linearvelocitydamping"],
  },
  "sim.vortex_body_materialuniqueid": {
    "prefix": "sim.vortex_body_materialuniqueid",
    "body": ["sim.vortex_body_materialuniqueid"],
  },
  "sim.vortex_body_normalangularaxisfriction": {
    "prefix": "sim.vortex_body_normalangularaxisfriction",
    "body": ["sim.vortex_body_normalangularaxisfriction"],
  },
  "sim.vortex_body_normalangularaxisfrictionmodel": {
    "prefix": "sim.vortex_body_normalangularaxisfrictionmodel",
    "body": ["sim.vortex_body_normalangularaxisfrictionmodel"],
  },
  "sim.vortex_body_normalangularaxisslide": {
    "prefix": "sim.vortex_body_normalangularaxisslide",
    "body": ["sim.vortex_body_normalangularaxisslide"],
  },
  "sim.vortex_body_normalangularaxisslip": {
    "prefix": "sim.vortex_body_normalangularaxisslip",
    "body": ["sim.vortex_body_normalangularaxisslip"],
  },
  "sim.vortex_body_normalangularaxisstaticfrictionscale": {
    "prefix": "sim.vortex_body_normalangularaxisstaticfrictionscale",
    "body": ["sim.vortex_body_normalangularaxisstaticfrictionscale"],
  },
  "sim.vortex_body_normangaxissameasprimangaxis": {
    "prefix": "sim.vortex_body_normangaxissameasprimangaxis",
    "body": ["sim.vortex_body_normangaxissameasprimangaxis"],
  },
  "sim.vortex_body_primangulararaxisfrictionmodel": {
    "prefix": "sim.vortex_body_primangulararaxisfrictionmodel",
    "body": ["sim.vortex_body_primangulararaxisfrictionmodel"],
  },
  "sim.vortex_body_primangularaxisfriction": {
    "prefix": "sim.vortex_body_primangularaxisfriction",
    "body": ["sim.vortex_body_primangularaxisfriction"],
  },
  "sim.vortex_body_primangularaxisslide": {
    "prefix": "sim.vortex_body_primangularaxisslide",
    "body": ["sim.vortex_body_primangularaxisslide"],
  },
  "sim.vortex_body_primangularaxisslip": {
    "prefix": "sim.vortex_body_primangularaxisslip",
    "body": ["sim.vortex_body_primangularaxisslip"],
  },
  "sim.vortex_body_primangularaxisstaticfrictionscale": {
    "prefix": "sim.vortex_body_primangularaxisstaticfrictionscale",
    "body": ["sim.vortex_body_primangularaxisstaticfrictionscale"],
  },
  "sim.vortex_body_primaxisvectorx": {
    "prefix": "sim.vortex_body_primaxisvectorx",
    "body": ["sim.vortex_body_primaxisvectorx"],
  },
  "sim.vortex_body_primaxisvectory": {
    "prefix": "sim.vortex_body_primaxisvectory",
    "body": ["sim.vortex_body_primaxisvectory"],
  },
  "sim.vortex_body_primaxisvectorz": {
    "prefix": "sim.vortex_body_primaxisvectorz",
    "body": ["sim.vortex_body_primaxisvectorz"],
  },
  "sim.vortex_body_primlinearaxisfriction": {
    "prefix": "sim.vortex_body_primlinearaxisfriction",
    "body": ["sim.vortex_body_primlinearaxisfriction"],
  },
  "sim.vortex_body_primlinearaxisfrictionmodel": {
    "prefix": "sim.vortex_body_primlinearaxisfrictionmodel",
    "body": ["sim.vortex_body_primlinearaxisfrictionmodel"],
  },
  "sim.vortex_body_primlinearaxisslide": {
    "prefix": "sim.vortex_body_primlinearaxisslide",
    "body": ["sim.vortex_body_primlinearaxisslide"],
  },
  "sim.vortex_body_primlinearaxisslip": {
    "prefix": "sim.vortex_body_primlinearaxisslip",
    "body": ["sim.vortex_body_primlinearaxisslip"],
  },
  "sim.vortex_body_primlinearaxisstaticfrictionscale": {
    "prefix": "sim.vortex_body_primlinearaxisstaticfrictionscale",
    "body": ["sim.vortex_body_primlinearaxisstaticfrictionscale"],
  },
  "sim.vortex_body_pureshapesasconvex": {
    "prefix": "sim.vortex_body_pureshapesasconvex",
    "body": ["sim.vortex_body_pureshapesasconvex"],
  },
  "sim.vortex_body_randomshapesasterrain": {
    "prefix": "sim.vortex_body_randomshapesasterrain",
    "body": ["sim.vortex_body_randomshapesasterrain"],
  },
  "sim.vortex_body_restitution": {
    "prefix": "sim.vortex_body_restitution",
    "body": ["sim.vortex_body_restitution"],
  },
  "sim.vortex_body_restitutionthreshold": {
    "prefix": "sim.vortex_body_restitutionthreshold",
    "body": ["sim.vortex_body_restitutionthreshold"],
  },
  "sim.vortex_body_secangaxissameasprimangaxis": {
    "prefix": "sim.vortex_body_secangaxissameasprimangaxis",
    "body": ["sim.vortex_body_secangaxissameasprimangaxis"],
  },
  "sim.vortex_body_secangularaxisfriction": {
    "prefix": "sim.vortex_body_secangularaxisfriction",
    "body": ["sim.vortex_body_secangularaxisfriction"],
  },
  "sim.vortex_body_secangularaxisfrictionmodel": {
    "prefix": "sim.vortex_body_secangularaxisfrictionmodel",
    "body": ["sim.vortex_body_secangularaxisfrictionmodel"],
  },
  "sim.vortex_body_secangularaxisslide": {
    "prefix": "sim.vortex_body_secangularaxisslide",
    "body": ["sim.vortex_body_secangularaxisslide"],
  },
  "sim.vortex_body_secangularaxisslip": {
    "prefix": "sim.vortex_body_secangularaxisslip",
    "body": ["sim.vortex_body_secangularaxisslip"],
  },
  "sim.vortex_body_secangularaxisstaticfrictionscale": {
    "prefix": "sim.vortex_body_secangularaxisstaticfrictionscale",
    "body": ["sim.vortex_body_secangularaxisstaticfrictionscale"],
  },
  "sim.vortex_body_seclinaxissameasprimlinaxis": {
    "prefix": "sim.vortex_body_seclinaxissameasprimlinaxis",
    "body": ["sim.vortex_body_seclinaxissameasprimlinaxis"],
  },
  "sim.vortex_body_seclinearaxisfriction": {
    "prefix": "sim.vortex_body_seclinearaxisfriction",
    "body": ["sim.vortex_body_seclinearaxisfriction"],
  },
  "sim.vortex_body_seclinearaxisfrictionmodel": {
    "prefix": "sim.vortex_body_seclinearaxisfrictionmodel",
    "body": ["sim.vortex_body_seclinearaxisfrictionmodel"],
  },
  "sim.vortex_body_seclinearaxisslide": {
    "prefix": "sim.vortex_body_seclinearaxisslide",
    "body": ["sim.vortex_body_seclinearaxisslide"],
  },
  "sim.vortex_body_seclinearaxisslip": {
    "prefix": "sim.vortex_body_seclinearaxisslip",
    "body": ["sim.vortex_body_seclinearaxisslip"],
  },
  "sim.vortex_body_seclinearaxisstaticfrictionscale": {
    "prefix": "sim.vortex_body_seclinearaxisstaticfrictionscale",
    "body": ["sim.vortex_body_seclinearaxisstaticfrictionscale"],
  },
  "sim.vortex_body_skinthickness": {
    "prefix": "sim.vortex_body_skinthickness",
    "body": ["sim.vortex_body_skinthickness"],
  },
  "sim.vortex_bodyfrictionmodel_box": {
    "prefix": "sim.vortex_bodyfrictionmodel_box",
    "body": ["sim.vortex_bodyfrictionmodel_box"],
  },
  "sim.vortex_bodyfrictionmodel_neutral": {
    "prefix": "sim.vortex_bodyfrictionmodel_neutral",
    "body": ["sim.vortex_bodyfrictionmodel_neutral"],
  },
  "sim.vortex_bodyfrictionmodel_none": {
    "prefix": "sim.vortex_bodyfrictionmodel_none",
    "body": ["sim.vortex_bodyfrictionmodel_none"],
  },
  "sim.vortex_bodyfrictionmodel_prophigh": {
    "prefix": "sim.vortex_bodyfrictionmodel_prophigh",
    "body": ["sim.vortex_bodyfrictionmodel_prophigh"],
  },
  "sim.vortex_bodyfrictionmodel_proplow": {
    "prefix": "sim.vortex_bodyfrictionmodel_proplow",
    "body": ["sim.vortex_bodyfrictionmodel_proplow"],
  },
  "sim.vortex_bodyfrictionmodel_scaledbox": {
    "prefix": "sim.vortex_bodyfrictionmodel_scaledbox",
    "body": ["sim.vortex_bodyfrictionmodel_scaledbox"],
  },
  "sim.vortex_bodyfrictionmodel_scaledboxfast": {
    "prefix": "sim.vortex_bodyfrictionmodel_scaledboxfast",
    "body": ["sim.vortex_bodyfrictionmodel_scaledboxfast"],
  },
  "sim.vortex_global_autosleep": {
    "prefix": "sim.vortex_global_autosleep",
    "body": ["sim.vortex_global_autosleep"],
  },
  "sim.vortex_global_bitcoded": {
    "prefix": "sim.vortex_global_bitcoded",
    "body": ["sim.vortex_global_bitcoded"],
  },
  "sim.vortex_global_computeinertias": {
    "prefix": "sim.vortex_global_computeinertias",
    "body": ["sim.vortex_global_computeinertias"],
  },
  "sim.vortex_global_constraintangularcompliance": {
    "prefix": "sim.vortex_global_constraintangularcompliance",
    "body": ["sim.vortex_global_constraintangularcompliance"],
  },
  "sim.vortex_global_constraintangulardamping": {
    "prefix": "sim.vortex_global_constraintangulardamping",
    "body": ["sim.vortex_global_constraintangulardamping"],
  },
  "sim.vortex_global_constraintangularkineticloss": {
    "prefix": "sim.vortex_global_constraintangularkineticloss",
    "body": ["sim.vortex_global_constraintangularkineticloss"],
  },
  "sim.vortex_global_constraintlinearcompliance": {
    "prefix": "sim.vortex_global_constraintlinearcompliance",
    "body": ["sim.vortex_global_constraintlinearcompliance"],
  },
  "sim.vortex_global_constraintlineardamping": {
    "prefix": "sim.vortex_global_constraintlineardamping",
    "body": ["sim.vortex_global_constraintlineardamping"],
  },
  "sim.vortex_global_constraintlinearkineticloss": {
    "prefix": "sim.vortex_global_constraintlinearkineticloss",
    "body": ["sim.vortex_global_constraintlinearkineticloss"],
  },
  "sim.vortex_global_contacttolerance": {
    "prefix": "sim.vortex_global_contacttolerance",
    "body": ["sim.vortex_global_contacttolerance"],
  },
  "sim.vortex_global_internalscalingfactor": {
    "prefix": "sim.vortex_global_internalscalingfactor",
    "body": ["sim.vortex_global_internalscalingfactor"],
  },
  "sim.vortex_global_multithreading": {
    "prefix": "sim.vortex_global_multithreading",
    "body": ["sim.vortex_global_multithreading"],
  },
  "sim.vortex_joint_a0damping": {
    "prefix": "sim.vortex_joint_a0damping",
    "body": ["sim.vortex_joint_a0damping"],
  },
  "sim.vortex_joint_a0frictioncoeff": {
    "prefix": "sim.vortex_joint_a0frictioncoeff",
    "body": ["sim.vortex_joint_a0frictioncoeff"],
  },
  "sim.vortex_joint_a0frictionloss": {
    "prefix": "sim.vortex_joint_a0frictionloss",
    "body": ["sim.vortex_joint_a0frictionloss"],
  },
  "sim.vortex_joint_a0frictionmaxforce": {
    "prefix": "sim.vortex_joint_a0frictionmaxforce",
    "body": ["sim.vortex_joint_a0frictionmaxforce"],
  },
  "sim.vortex_joint_a0loss": {
    "prefix": "sim.vortex_joint_a0loss",
    "body": ["sim.vortex_joint_a0loss"],
  },
  "sim.vortex_joint_a0stiffness": {
    "prefix": "sim.vortex_joint_a0stiffness",
    "body": ["sim.vortex_joint_a0stiffness"],
  },
  "sim.vortex_joint_a1damping": {
    "prefix": "sim.vortex_joint_a1damping",
    "body": ["sim.vortex_joint_a1damping"],
  },
  "sim.vortex_joint_a1frictioncoeff": {
    "prefix": "sim.vortex_joint_a1frictioncoeff",
    "body": ["sim.vortex_joint_a1frictioncoeff"],
  },
  "sim.vortex_joint_a1frictionloss": {
    "prefix": "sim.vortex_joint_a1frictionloss",
    "body": ["sim.vortex_joint_a1frictionloss"],
  },
  "sim.vortex_joint_a1frictionmaxforce": {
    "prefix": "sim.vortex_joint_a1frictionmaxforce",
    "body": ["sim.vortex_joint_a1frictionmaxforce"],
  },
  "sim.vortex_joint_a1loss": {
    "prefix": "sim.vortex_joint_a1loss",
    "body": ["sim.vortex_joint_a1loss"],
  },
  "sim.vortex_joint_a1stiffness": {
    "prefix": "sim.vortex_joint_a1stiffness",
    "body": ["sim.vortex_joint_a1stiffness"],
  },
  "sim.vortex_joint_a2damping": {
    "prefix": "sim.vortex_joint_a2damping",
    "body": ["sim.vortex_joint_a2damping"],
  },
  "sim.vortex_joint_a2frictioncoeff": {
    "prefix": "sim.vortex_joint_a2frictioncoeff",
    "body": ["sim.vortex_joint_a2frictioncoeff"],
  },
  "sim.vortex_joint_a2frictionloss": {
    "prefix": "sim.vortex_joint_a2frictionloss",
    "body": ["sim.vortex_joint_a2frictionloss"],
  },
  "sim.vortex_joint_a2frictionmaxforce": {
    "prefix": "sim.vortex_joint_a2frictionmaxforce",
    "body": ["sim.vortex_joint_a2frictionmaxforce"],
  },
  "sim.vortex_joint_a2loss": {
    "prefix": "sim.vortex_joint_a2loss",
    "body": ["sim.vortex_joint_a2loss"],
  },
  "sim.vortex_joint_a2stiffness": {
    "prefix": "sim.vortex_joint_a2stiffness",
    "body": ["sim.vortex_joint_a2stiffness"],
  },
  "sim.vortex_joint_bitcoded": {
    "prefix": "sim.vortex_joint_bitcoded",
    "body": ["sim.vortex_joint_bitcoded"],
  },
  "sim.vortex_joint_dependencyfactor": {
    "prefix": "sim.vortex_joint_dependencyfactor",
    "body": ["sim.vortex_joint_dependencyfactor"],
  },
  "sim.vortex_joint_dependencyoffset": {
    "prefix": "sim.vortex_joint_dependencyoffset",
    "body": ["sim.vortex_joint_dependencyoffset"],
  },
  "sim.vortex_joint_dependentobjectid": {
    "prefix": "sim.vortex_joint_dependentobjectid",
    "body": ["sim.vortex_joint_dependentobjectid"],
  },
  "sim.vortex_joint_frictionenabledbc": {
    "prefix": "sim.vortex_joint_frictionenabledbc",
    "body": ["sim.vortex_joint_frictionenabledbc"],
  },
  "sim.vortex_joint_frictionproportionalbc": {
    "prefix": "sim.vortex_joint_frictionproportionalbc",
    "body": ["sim.vortex_joint_frictionproportionalbc"],
  },
  "sim.vortex_joint_lowerlimitdamping": {
    "prefix": "sim.vortex_joint_lowerlimitdamping",
    "body": ["sim.vortex_joint_lowerlimitdamping"],
  },
  "sim.vortex_joint_lowerlimitmaxforce": {
    "prefix": "sim.vortex_joint_lowerlimitmaxforce",
    "body": ["sim.vortex_joint_lowerlimitmaxforce"],
  },
  "sim.vortex_joint_lowerlimitrestitution": {
    "prefix": "sim.vortex_joint_lowerlimitrestitution",
    "body": ["sim.vortex_joint_lowerlimitrestitution"],
  },
  "sim.vortex_joint_lowerlimitstiffness": {
    "prefix": "sim.vortex_joint_lowerlimitstiffness",
    "body": ["sim.vortex_joint_lowerlimitstiffness"],
  },
  "sim.vortex_joint_motorconstraintfrictioncoeff": {
    "prefix": "sim.vortex_joint_motorconstraintfrictioncoeff",
    "body": ["sim.vortex_joint_motorconstraintfrictioncoeff"],
  },
  "sim.vortex_joint_motorconstraintfrictionloss": {
    "prefix": "sim.vortex_joint_motorconstraintfrictionloss",
    "body": ["sim.vortex_joint_motorconstraintfrictionloss"],
  },
  "sim.vortex_joint_motorconstraintfrictionmaxforce": {
    "prefix": "sim.vortex_joint_motorconstraintfrictionmaxforce",
    "body": ["sim.vortex_joint_motorconstraintfrictionmaxforce"],
  },
  "sim.vortex_joint_motorfrictionenabled": {
    "prefix": "sim.vortex_joint_motorfrictionenabled",
    "body": ["sim.vortex_joint_motorfrictionenabled"],
  },
  "sim.vortex_joint_objectid": {
    "prefix": "sim.vortex_joint_objectid",
    "body": ["sim.vortex_joint_objectid"],
  },
  "sim.vortex_joint_p0damping": {
    "prefix": "sim.vortex_joint_p0damping",
    "body": ["sim.vortex_joint_p0damping"],
  },
  "sim.vortex_joint_p0frictioncoeff": {
    "prefix": "sim.vortex_joint_p0frictioncoeff",
    "body": ["sim.vortex_joint_p0frictioncoeff"],
  },
  "sim.vortex_joint_p0frictionloss": {
    "prefix": "sim.vortex_joint_p0frictionloss",
    "body": ["sim.vortex_joint_p0frictionloss"],
  },
  "sim.vortex_joint_p0frictionmaxforce": {
    "prefix": "sim.vortex_joint_p0frictionmaxforce",
    "body": ["sim.vortex_joint_p0frictionmaxforce"],
  },
  "sim.vortex_joint_p0loss": {
    "prefix": "sim.vortex_joint_p0loss",
    "body": ["sim.vortex_joint_p0loss"],
  },
  "sim.vortex_joint_p0stiffness": {
    "prefix": "sim.vortex_joint_p0stiffness",
    "body": ["sim.vortex_joint_p0stiffness"],
  },
  "sim.vortex_joint_p1damping": {
    "prefix": "sim.vortex_joint_p1damping",
    "body": ["sim.vortex_joint_p1damping"],
  },
  "sim.vortex_joint_p1frictioncoeff": {
    "prefix": "sim.vortex_joint_p1frictioncoeff",
    "body": ["sim.vortex_joint_p1frictioncoeff"],
  },
  "sim.vortex_joint_p1frictionloss": {
    "prefix": "sim.vortex_joint_p1frictionloss",
    "body": ["sim.vortex_joint_p1frictionloss"],
  },
  "sim.vortex_joint_p1frictionmaxforce": {
    "prefix": "sim.vortex_joint_p1frictionmaxforce",
    "body": ["sim.vortex_joint_p1frictionmaxforce"],
  },
  "sim.vortex_joint_p1loss": {
    "prefix": "sim.vortex_joint_p1loss",
    "body": ["sim.vortex_joint_p1loss"],
  },
  "sim.vortex_joint_p1stiffness": {
    "prefix": "sim.vortex_joint_p1stiffness",
    "body": ["sim.vortex_joint_p1stiffness"],
  },
  "sim.vortex_joint_p2damping": {
    "prefix": "sim.vortex_joint_p2damping",
    "body": ["sim.vortex_joint_p2damping"],
  },
  "sim.vortex_joint_p2frictioncoeff": {
    "prefix": "sim.vortex_joint_p2frictioncoeff",
    "body": ["sim.vortex_joint_p2frictioncoeff"],
  },
  "sim.vortex_joint_p2frictionloss": {
    "prefix": "sim.vortex_joint_p2frictionloss",
    "body": ["sim.vortex_joint_p2frictionloss"],
  },
  "sim.vortex_joint_p2frictionmaxforce": {
    "prefix": "sim.vortex_joint_p2frictionmaxforce",
    "body": ["sim.vortex_joint_p2frictionmaxforce"],
  },
  "sim.vortex_joint_p2loss": {
    "prefix": "sim.vortex_joint_p2loss",
    "body": ["sim.vortex_joint_p2loss"],
  },
  "sim.vortex_joint_p2stiffness": {
    "prefix": "sim.vortex_joint_p2stiffness",
    "body": ["sim.vortex_joint_p2stiffness"],
  },
  "sim.vortex_joint_pospid1": {
    "prefix": "sim.vortex_joint_pospid1",
    "body": ["sim.vortex_joint_pospid1"],
  },
  "sim.vortex_joint_pospid2": {
    "prefix": "sim.vortex_joint_pospid2",
    "body": ["sim.vortex_joint_pospid2"],
  },
  "sim.vortex_joint_pospid3": {
    "prefix": "sim.vortex_joint_pospid3",
    "body": ["sim.vortex_joint_pospid3"],
  },
  "sim.vortex_joint_proportionalmotorfriction": {
    "prefix": "sim.vortex_joint_proportionalmotorfriction",
    "body": ["sim.vortex_joint_proportionalmotorfriction"],
  },
  "sim.vortex_joint_relaxationenabledbc": {
    "prefix": "sim.vortex_joint_relaxationenabledbc",
    "body": ["sim.vortex_joint_relaxationenabledbc"],
  },
  "sim.vortex_joint_upperlimitdamping": {
    "prefix": "sim.vortex_joint_upperlimitdamping",
    "body": ["sim.vortex_joint_upperlimitdamping"],
  },
  "sim.vortex_joint_upperlimitmaxforce": {
    "prefix": "sim.vortex_joint_upperlimitmaxforce",
    "body": ["sim.vortex_joint_upperlimitmaxforce"],
  },
  "sim.vortex_joint_upperlimitrestitution": {
    "prefix": "sim.vortex_joint_upperlimitrestitution",
    "body": ["sim.vortex_joint_upperlimitrestitution"],
  },
  "sim.vortex_joint_upperlimitstiffness": {
    "prefix": "sim.vortex_joint_upperlimitstiffness",
    "body": ["sim.vortex_joint_upperlimitstiffness"],
  },
  "simAssimp.upVector.auto": {
    "prefix": "simAssimp.upVector.auto",
    "body": ["simAssimp.upVector.auto"],
  },
  "simAssimp.upVector.y": {
    "prefix": "simAssimp.upVector.y",
    "body": ["simAssimp.upVector.y"],
  },
  "simAssimp.upVector.z": {
    "prefix": "simAssimp.upVector.z",
    "body": ["simAssimp.upVector.z"],
  },
  "simEigen.op.abs": {
    "prefix": "simEigen.op.abs",
    "body": ["simEigen.op.abs"],
  },
  "simEigen.op.acos": {
    "prefix": "simEigen.op.acos",
    "body": ["simEigen.op.acos"],
  },
  "simEigen.op.add": {
    "prefix": "simEigen.op.add",
    "body": ["simEigen.op.add"],
  },
  "simEigen.op.asin": {
    "prefix": "simEigen.op.asin",
    "body": ["simEigen.op.asin"],
  },
  "simEigen.op.atan": {
    "prefix": "simEigen.op.atan",
    "body": ["simEigen.op.atan"],
  },
  "simEigen.op.ceil": {
    "prefix": "simEigen.op.ceil",
    "body": ["simEigen.op.ceil"],
  },
  "simEigen.op.cos": {
    "prefix": "simEigen.op.cos",
    "body": ["simEigen.op.cos"],
  },
  "simEigen.op.deg": {
    "prefix": "simEigen.op.deg",
    "body": ["simEigen.op.deg"],
  },
  "simEigen.op.div": {
    "prefix": "simEigen.op.div",
    "body": ["simEigen.op.div"],
  },
  "simEigen.op.exp": {
    "prefix": "simEigen.op.exp",
    "body": ["simEigen.op.exp"],
  },
  "simEigen.op.floor": {
    "prefix": "simEigen.op.floor",
    "body": ["simEigen.op.floor"],
  },
  "simEigen.op.intdiv": {
    "prefix": "simEigen.op.intdiv",
    "body": ["simEigen.op.intdiv"],
  },
  "simEigen.op.log": {
    "prefix": "simEigen.op.log",
    "body": ["simEigen.op.log"],
  },
  "simEigen.op.log10": {
    "prefix": "simEigen.op.log10",
    "body": ["simEigen.op.log10"],
  },
  "simEigen.op.log2": {
    "prefix": "simEigen.op.log2",
    "body": ["simEigen.op.log2"],
  },
  "simEigen.op.max": {
    "prefix": "simEigen.op.max",
    "body": ["simEigen.op.max"],
  },
  "simEigen.op.min": {
    "prefix": "simEigen.op.min",
    "body": ["simEigen.op.min"],
  },
  "simEigen.op.mod": {
    "prefix": "simEigen.op.mod",
    "body": ["simEigen.op.mod"],
  },
  "simEigen.op.rad": {
    "prefix": "simEigen.op.rad",
    "body": ["simEigen.op.rad"],
  },
  "simEigen.op.sin": {
    "prefix": "simEigen.op.sin",
    "body": ["simEigen.op.sin"],
  },
  "simEigen.op.sqrt": {
    "prefix": "simEigen.op.sqrt",
    "body": ["simEigen.op.sqrt"],
  },
  "simEigen.op.sub": {
    "prefix": "simEigen.op.sub",
    "body": ["simEigen.op.sub"],
  },
  "simEigen.op.tan": {
    "prefix": "simEigen.op.tan",
    "body": ["simEigen.op.tan"],
  },
  "simEigen.op.times": {
    "prefix": "simEigen.op.times",
    "body": ["simEigen.op.times"],
  },
  "simEigen.op.unm": {
    "prefix": "simEigen.op.unm",
    "body": ["simEigen.op.unm"],
  },
  "simGLTF.TextureFormat.bmp": {
    "prefix": "simGLTF.TextureFormat.bmp",
    "body": ["simGLTF.TextureFormat.bmp"],
  },
  "simGLTF.TextureFormat.jpg": {
    "prefix": "simGLTF.TextureFormat.jpg",
    "body": ["simGLTF.TextureFormat.jpg"],
  },
  "simGLTF.TextureFormat.png": {
    "prefix": "simGLTF.TextureFormat.png",
    "body": ["simGLTF.TextureFormat.png"],
  },
  "simIGL.boolean_op.difference": {
    "prefix": "simIGL.boolean_op.difference",
    "body": ["simIGL.boolean_op.difference"],
  },
  "simIGL.boolean_op.intersection": {
    "prefix": "simIGL.boolean_op.intersection",
    "body": ["simIGL.boolean_op.intersection"],
  },
  "simIGL.boolean_op.resolve": {
    "prefix": "simIGL.boolean_op.resolve",
    "body": ["simIGL.boolean_op.resolve"],
  },
  "simIGL.boolean_op.symmetric_difference": {
    "prefix": "simIGL.boolean_op.symmetric_difference",
    "body": ["simIGL.boolean_op.symmetric_difference"],
  },
  "simIGL.boolean_op.union": {
    "prefix": "simIGL.boolean_op.union",
    "body": ["simIGL.boolean_op.union"],
  },
  "simIK.calc_cannotinvert": {
    "prefix": "simIK.calc_cannotinvert",
    "body": ["simIK.calc_cannotinvert"],
  },
  "simIK.calc_invalidcallbackdata": {
    "prefix": "simIK.calc_invalidcallbackdata",
    "body": ["simIK.calc_invalidcallbackdata"],
  },
  "simIK.calc_limithit": {
    "prefix": "simIK.calc_limithit",
    "body": ["simIK.calc_limithit"],
  },
  "simIK.calc_notperformed": {
    "prefix": "simIK.calc_notperformed",
    "body": ["simIK.calc_notperformed"],
  },
  "simIK.calc_notwithintolerance": {
    "prefix": "simIK.calc_notwithintolerance",
    "body": ["simIK.calc_notwithintolerance"],
  },
  "simIK.calc_stepstoobig": {
    "prefix": "simIK.calc_stepstoobig",
    "body": ["simIK.calc_stepstoobig"],
  },
  "simIK.constraint_alpha_beta": {
    "prefix": "simIK.constraint_alpha_beta",
    "body": ["simIK.constraint_alpha_beta"],
  },
  "simIK.constraint_gamma": {
    "prefix": "simIK.constraint_gamma",
    "body": ["simIK.constraint_gamma"],
  },
  "simIK.constraint_orientation": {
    "prefix": "simIK.constraint_orientation",
    "body": ["simIK.constraint_orientation"],
  },
  "simIK.constraint_pose": {
    "prefix": "simIK.constraint_pose",
    "body": ["simIK.constraint_pose"],
  },
  "simIK.constraint_position": {
    "prefix": "simIK.constraint_position",
    "body": ["simIK.constraint_position"],
  },
  "simIK.constraint_x": {
    "prefix": "simIK.constraint_x",
    "body": ["simIK.constraint_x"],
  },
  "simIK.constraint_y": {
    "prefix": "simIK.constraint_y",
    "body": ["simIK.constraint_y"],
  },
  "simIK.constraint_z": {
    "prefix": "simIK.constraint_z",
    "body": ["simIK.constraint_z"],
  },
  "simIK.group_avoidlimits": {
    "prefix": "simIK.group_avoidlimits",
    "body": ["simIK.group_avoidlimits"],
  },
  "simIK.group_enabled": {
    "prefix": "simIK.group_enabled",
    "body": ["simIK.group_enabled"],
  },
  "simIK.group_ignoremaxsteps": {
    "prefix": "simIK.group_ignoremaxsteps",
    "body": ["simIK.group_ignoremaxsteps"],
  },
  "simIK.group_restoreonbadangtol": {
    "prefix": "simIK.group_restoreonbadangtol",
    "body": ["simIK.group_restoreonbadangtol"],
  },
  "simIK.group_restoreonbadlintol": {
    "prefix": "simIK.group_restoreonbadlintol",
    "body": ["simIK.group_restoreonbadlintol"],
  },
  "simIK.group_stoponlimithit": {
    "prefix": "simIK.group_stoponlimithit",
    "body": ["simIK.group_stoponlimithit"],
  },
  "simIK.handle_all": {
    "prefix": "simIK.handle_all",
    "body": ["simIK.handle_all"],
  },
  "simIK.handle_parent": {
    "prefix": "simIK.handle_parent",
    "body": ["simIK.handle_parent"],
  },
  "simIK.handle_world": {
    "prefix": "simIK.handle_world",
    "body": ["simIK.handle_world"],
  },
  "simIK.handleflag_tipdummy": {
    "prefix": "simIK.handleflag_tipdummy",
    "body": ["simIK.handleflag_tipdummy"],
  },
  "simIK.jointmode_ik": {
    "prefix": "simIK.jointmode_ik",
    "body": ["simIK.jointmode_ik"],
  },
  "simIK.jointmode_passive": {
    "prefix": "simIK.jointmode_passive",
    "body": ["simIK.jointmode_passive"],
  },
  "simIK.jointtype_prismatic": {
    "prefix": "simIK.jointtype_prismatic",
    "body": ["simIK.jointtype_prismatic"],
  },
  "simIK.jointtype_revolute": {
    "prefix": "simIK.jointtype_revolute",
    "body": ["simIK.jointtype_revolute"],
  },
  "simIK.jointtype_spherical": {
    "prefix": "simIK.jointtype_spherical",
    "body": ["simIK.jointtype_spherical"],
  },
  "simIK.method_damped_least_squares": {
    "prefix": "simIK.method_damped_least_squares",
    "body": ["simIK.method_damped_least_squares"],
  },
  "simIK.method_jacobian_transpose": {
    "prefix": "simIK.method_jacobian_transpose",
    "body": ["simIK.method_jacobian_transpose"],
  },
  "simIK.method_pseudo_inverse": {
    "prefix": "simIK.method_pseudo_inverse",
    "body": ["simIK.method_pseudo_inverse"],
  },
  "simIK.method_undamped_pseudo_inverse": {
    "prefix": "simIK.method_undamped_pseudo_inverse",
    "body": ["simIK.method_undamped_pseudo_inverse"],
  },
  "simIK.objecttype_dummy": {
    "prefix": "simIK.objecttype_dummy",
    "body": ["simIK.objecttype_dummy"],
  },
  "simIK.objecttype_joint": {
    "prefix": "simIK.objecttype_joint",
    "body": ["simIK.objecttype_joint"],
  },
  "simIK.result_fail": {
    "prefix": "simIK.result_fail",
    "body": ["simIK.result_fail"],
  },
  "simIK.result_not_performed": {
    "prefix": "simIK.result_not_performed",
    "body": ["simIK.result_not_performed"],
  },
  "simIK.result_success": {
    "prefix": "simIK.result_success",
    "body": ["simIK.result_success"],
  },
  "simIM.cmpOp.eq": {
    "prefix": "simIM.cmpOp.eq",
    "body": ["simIM.cmpOp.eq"],
  },
  "simIM.cmpOp.ge": {
    "prefix": "simIM.cmpOp.ge",
    "body": ["simIM.cmpOp.ge"],
  },
  "simIM.cmpOp.gt": {
    "prefix": "simIM.cmpOp.gt",
    "body": ["simIM.cmpOp.gt"],
  },
  "simIM.cmpOp.le": {
    "prefix": "simIM.cmpOp.le",
    "body": ["simIM.cmpOp.le"],
  },
  "simIM.cmpOp.lt": {
    "prefix": "simIM.cmpOp.lt",
    "body": ["simIM.cmpOp.lt"],
  },
  "simIM.cmpOp.ne": {
    "prefix": "simIM.cmpOp.ne",
    "body": ["simIM.cmpOp.ne"],
  },
  "simIM.dict_type._4X4_100": {
    "prefix": "simIM.dict_type._4X4_100",
    "body": ["simIM.dict_type._4X4_100"],
  },
  "simIM.dict_type._4X4_1000": {
    "prefix": "simIM.dict_type._4X4_1000",
    "body": ["simIM.dict_type._4X4_1000"],
  },
  "simIM.dict_type._4X4_250": {
    "prefix": "simIM.dict_type._4X4_250",
    "body": ["simIM.dict_type._4X4_250"],
  },
  "simIM.dict_type._4X4_50": {
    "prefix": "simIM.dict_type._4X4_50",
    "body": ["simIM.dict_type._4X4_50"],
  },
  "simIM.dict_type._5X5_100": {
    "prefix": "simIM.dict_type._5X5_100",
    "body": ["simIM.dict_type._5X5_100"],
  },
  "simIM.dict_type._5X5_1000": {
    "prefix": "simIM.dict_type._5X5_1000",
    "body": ["simIM.dict_type._5X5_1000"],
  },
  "simIM.dict_type._5X5_250": {
    "prefix": "simIM.dict_type._5X5_250",
    "body": ["simIM.dict_type._5X5_250"],
  },
  "simIM.dict_type._5X5_50": {
    "prefix": "simIM.dict_type._5X5_50",
    "body": ["simIM.dict_type._5X5_50"],
  },
  "simIM.dict_type._6X6_100": {
    "prefix": "simIM.dict_type._6X6_100",
    "body": ["simIM.dict_type._6X6_100"],
  },
  "simIM.dict_type._6X6_1000": {
    "prefix": "simIM.dict_type._6X6_1000",
    "body": ["simIM.dict_type._6X6_1000"],
  },
  "simIM.dict_type._6X6_250": {
    "prefix": "simIM.dict_type._6X6_250",
    "body": ["simIM.dict_type._6X6_250"],
  },
  "simIM.dict_type._6X6_50": {
    "prefix": "simIM.dict_type._6X6_50",
    "body": ["simIM.dict_type._6X6_50"],
  },
  "simIM.dict_type._7X7_100": {
    "prefix": "simIM.dict_type._7X7_100",
    "body": ["simIM.dict_type._7X7_100"],
  },
  "simIM.dict_type._7X7_1000": {
    "prefix": "simIM.dict_type._7X7_1000",
    "body": ["simIM.dict_type._7X7_1000"],
  },
  "simIM.dict_type._7X7_250": {
    "prefix": "simIM.dict_type._7X7_250",
    "body": ["simIM.dict_type._7X7_250"],
  },
  "simIM.dict_type._7X7_50": {
    "prefix": "simIM.dict_type._7X7_50",
    "body": ["simIM.dict_type._7X7_50"],
  },
  "simIM.dict_type._APRILTAG_16h5": {
    "prefix": "simIM.dict_type._APRILTAG_16h5",
    "body": ["simIM.dict_type._APRILTAG_16h5"],
  },
  "simIM.dict_type._APRILTAG_25h9": {
    "prefix": "simIM.dict_type._APRILTAG_25h9",
    "body": ["simIM.dict_type._APRILTAG_25h9"],
  },
  "simIM.dict_type._APRILTAG_36h10": {
    "prefix": "simIM.dict_type._APRILTAG_36h10",
    "body": ["simIM.dict_type._APRILTAG_36h10"],
  },
  "simIM.dict_type._APRILTAG_36h11": {
    "prefix": "simIM.dict_type._APRILTAG_36h11",
    "body": ["simIM.dict_type._APRILTAG_36h11"],
  },
  "simIM.dict_type._ARUCO_ORIGINAL": {
    "prefix": "simIM.dict_type._ARUCO_ORIGINAL",
    "body": ["simIM.dict_type._ARUCO_ORIGINAL"],
  },
  "simIM.dist.C": {
    "prefix": "simIM.dist.C",
    "body": ["simIM.dist.C"],
  },
  "simIM.dist.L1": {
    "prefix": "simIM.dist.L1",
    "body": ["simIM.dist.L1"],
  },
  "simIM.dist.L2": {
    "prefix": "simIM.dist.L2",
    "body": ["simIM.dist.L2"],
  },
  "simIM.flipOp.both": {
    "prefix": "simIM.flipOp.both",
    "body": ["simIM.flipOp.both"],
  },
  "simIM.flipOp.x": {
    "prefix": "simIM.flipOp.x",
    "body": ["simIM.flipOp.x"],
  },
  "simIM.flipOp.y": {
    "prefix": "simIM.flipOp.y",
    "body": ["simIM.flipOp.y"],
  },
  "simIM.fontFace.complex": {
    "prefix": "simIM.fontFace.complex",
    "body": ["simIM.fontFace.complex"],
  },
  "simIM.fontFace.complex_small": {
    "prefix": "simIM.fontFace.complex_small",
    "body": ["simIM.fontFace.complex_small"],
  },
  "simIM.fontFace.duplex": {
    "prefix": "simIM.fontFace.duplex",
    "body": ["simIM.fontFace.duplex"],
  },
  "simIM.fontFace.plain": {
    "prefix": "simIM.fontFace.plain",
    "body": ["simIM.fontFace.plain"],
  },
  "simIM.fontFace.script_complex": {
    "prefix": "simIM.fontFace.script_complex",
    "body": ["simIM.fontFace.script_complex"],
  },
  "simIM.fontFace.script_simplex": {
    "prefix": "simIM.fontFace.script_simplex",
    "body": ["simIM.fontFace.script_simplex"],
  },
  "simIM.fontFace.simplex": {
    "prefix": "simIM.fontFace.simplex",
    "body": ["simIM.fontFace.simplex"],
  },
  "simIM.fontFace.triplex": {
    "prefix": "simIM.fontFace.triplex",
    "body": ["simIM.fontFace.triplex"],
  },
  "simIM.format._32FC1": {
    "prefix": "simIM.format._32FC1",
    "body": ["simIM.format._32FC1"],
  },
  "simIM.format._32FC3": {
    "prefix": "simIM.format._32FC3",
    "body": ["simIM.format._32FC3"],
  },
  "simIM.format._32FC4": {
    "prefix": "simIM.format._32FC4",
    "body": ["simIM.format._32FC4"],
  },
  "simIM.format._8UC1": {
    "prefix": "simIM.format._8UC1",
    "body": ["simIM.format._8UC1"],
  },
  "simIM.format._8UC3": {
    "prefix": "simIM.format._8UC3",
    "body": ["simIM.format._8UC3"],
  },
  "simIM.format._8UC4": {
    "prefix": "simIM.format._8UC4",
    "body": ["simIM.format._8UC4"],
  },
  "simIM.interp.area": {
    "prefix": "simIM.interp.area",
    "body": ["simIM.interp.area"],
  },
  "simIM.interp.cubic": {
    "prefix": "simIM.interp.cubic",
    "body": ["simIM.interp.cubic"],
  },
  "simIM.interp.lanczos4": {
    "prefix": "simIM.interp.lanczos4",
    "body": ["simIM.interp.lanczos4"],
  },
  "simIM.interp.linear": {
    "prefix": "simIM.interp.linear",
    "body": ["simIM.interp.linear"],
  },
  "simIM.interp.nearest": {
    "prefix": "simIM.interp.nearest",
    "body": ["simIM.interp.nearest"],
  },
  "simIM.maskSize._3x3": {
    "prefix": "simIM.maskSize._3x3",
    "body": ["simIM.maskSize._3x3"],
  },
  "simIM.maskSize._5x5": {
    "prefix": "simIM.maskSize._5x5",
    "body": ["simIM.maskSize._5x5"],
  },
  "simIM.maskSize._precise": {
    "prefix": "simIM.maskSize._precise",
    "body": ["simIM.maskSize._precise"],
  },
  "simIM.reduceOp.avg": {
    "prefix": "simIM.reduceOp.avg",
    "body": ["simIM.reduceOp.avg"],
  },
  "simIM.reduceOp.max": {
    "prefix": "simIM.reduceOp.max",
    "body": ["simIM.reduceOp.max"],
  },
  "simIM.reduceOp.min": {
    "prefix": "simIM.reduceOp.min",
    "body": ["simIM.reduceOp.min"],
  },
  "simIM.reduceOp.sum": {
    "prefix": "simIM.reduceOp.sum",
    "body": ["simIM.reduceOp.sum"],
  },
  "simOMPL.Algorithm.BITstar": {
    "prefix": "simOMPL.Algorithm.BITstar",
    "body": ["simOMPL.Algorithm.BITstar"],
  },
  "simOMPL.Algorithm.BKPIECE1": {
    "prefix": "simOMPL.Algorithm.BKPIECE1",
    "body": ["simOMPL.Algorithm.BKPIECE1"],
  },
  "simOMPL.Algorithm.BiTRRT": {
    "prefix": "simOMPL.Algorithm.BiTRRT",
    "body": ["simOMPL.Algorithm.BiTRRT"],
  },
  "simOMPL.Algorithm.CForest": {
    "prefix": "simOMPL.Algorithm.CForest",
    "body": ["simOMPL.Algorithm.CForest"],
  },
  "simOMPL.Algorithm.EST": {
    "prefix": "simOMPL.Algorithm.EST",
    "body": ["simOMPL.Algorithm.EST"],
  },
  "simOMPL.Algorithm.FMT": {
    "prefix": "simOMPL.Algorithm.FMT",
    "body": ["simOMPL.Algorithm.FMT"],
  },
  "simOMPL.Algorithm.KPIECE1": {
    "prefix": "simOMPL.Algorithm.KPIECE1",
    "body": ["simOMPL.Algorithm.KPIECE1"],
  },
  "simOMPL.Algorithm.LBKPIECE1": {
    "prefix": "simOMPL.Algorithm.LBKPIECE1",
    "body": ["simOMPL.Algorithm.LBKPIECE1"],
  },
  "simOMPL.Algorithm.LBTRRT": {
    "prefix": "simOMPL.Algorithm.LBTRRT",
    "body": ["simOMPL.Algorithm.LBTRRT"],
  },
  "simOMPL.Algorithm.LazyPRM": {
    "prefix": "simOMPL.Algorithm.LazyPRM",
    "body": ["simOMPL.Algorithm.LazyPRM"],
  },
  "simOMPL.Algorithm.LazyPRMstar": {
    "prefix": "simOMPL.Algorithm.LazyPRMstar",
    "body": ["simOMPL.Algorithm.LazyPRMstar"],
  },
  "simOMPL.Algorithm.LazyRRT": {
    "prefix": "simOMPL.Algorithm.LazyRRT",
    "body": ["simOMPL.Algorithm.LazyRRT"],
  },
  "simOMPL.Algorithm.PDST": {
    "prefix": "simOMPL.Algorithm.PDST",
    "body": ["simOMPL.Algorithm.PDST"],
  },
  "simOMPL.Algorithm.PRM": {
    "prefix": "simOMPL.Algorithm.PRM",
    "body": ["simOMPL.Algorithm.PRM"],
  },
  "simOMPL.Algorithm.PRMstar": {
    "prefix": "simOMPL.Algorithm.PRMstar",
    "body": ["simOMPL.Algorithm.PRMstar"],
  },
  "simOMPL.Algorithm.RRT": {
    "prefix": "simOMPL.Algorithm.RRT",
    "body": ["simOMPL.Algorithm.RRT"],
  },
  "simOMPL.Algorithm.RRTConnect": {
    "prefix": "simOMPL.Algorithm.RRTConnect",
    "body": ["simOMPL.Algorithm.RRTConnect"],
  },
  "simOMPL.Algorithm.RRTstar": {
    "prefix": "simOMPL.Algorithm.RRTstar",
    "body": ["simOMPL.Algorithm.RRTstar"],
  },
  "simOMPL.Algorithm.SBL": {
    "prefix": "simOMPL.Algorithm.SBL",
    "body": ["simOMPL.Algorithm.SBL"],
  },
  "simOMPL.Algorithm.SPARS": {
    "prefix": "simOMPL.Algorithm.SPARS",
    "body": ["simOMPL.Algorithm.SPARS"],
  },
  "simOMPL.Algorithm.SPARStwo": {
    "prefix": "simOMPL.Algorithm.SPARStwo",
    "body": ["simOMPL.Algorithm.SPARStwo"],
  },
  "simOMPL.Algorithm.STRIDE": {
    "prefix": "simOMPL.Algorithm.STRIDE",
    "body": ["simOMPL.Algorithm.STRIDE"],
  },
  "simOMPL.Algorithm.TRRT": {
    "prefix": "simOMPL.Algorithm.TRRT",
    "body": ["simOMPL.Algorithm.TRRT"],
  },
  "simOMPL.StateSpaceType.cyclic_joint_position": {
    "prefix": "simOMPL.StateSpaceType.cyclic_joint_position",
    "body": ["simOMPL.StateSpaceType.cyclic_joint_position"],
  },
  "simOMPL.StateSpaceType.dubins": {
    "prefix": "simOMPL.StateSpaceType.dubins",
    "body": ["simOMPL.StateSpaceType.dubins"],
  },
  "simOMPL.StateSpaceType.joint_position": {
    "prefix": "simOMPL.StateSpaceType.joint_position",
    "body": ["simOMPL.StateSpaceType.joint_position"],
  },
  "simOMPL.StateSpaceType.pose2d": {
    "prefix": "simOMPL.StateSpaceType.pose2d",
    "body": ["simOMPL.StateSpaceType.pose2d"],
  },
  "simOMPL.StateSpaceType.pose3d": {
    "prefix": "simOMPL.StateSpaceType.pose3d",
    "body": ["simOMPL.StateSpaceType.pose3d"],
  },
  "simOMPL.StateSpaceType.position2d": {
    "prefix": "simOMPL.StateSpaceType.position2d",
    "body": ["simOMPL.StateSpaceType.position2d"],
  },
  "simOMPL.StateSpaceType.position3d": {
    "prefix": "simOMPL.StateSpaceType.position3d",
    "body": ["simOMPL.StateSpaceType.position3d"],
  },
  "simQML.image_data_format.argb32": {
    "prefix": "simQML.image_data_format.argb32",
    "body": ["simQML.image_data_format.argb32"],
  },
  "simQML.image_data_format.bgr888": {
    "prefix": "simQML.image_data_format.bgr888",
    "body": ["simQML.image_data_format.bgr888"],
  },
  "simQML.image_data_format.gray8": {
    "prefix": "simQML.image_data_format.gray8",
    "body": ["simQML.image_data_format.gray8"],
  },
  "simQML.image_data_format.rgb32": {
    "prefix": "simQML.image_data_format.rgb32",
    "body": ["simQML.image_data_format.rgb32"],
  },
  "simQML.image_data_format.rgb888": {
    "prefix": "simQML.image_data_format.rgb888",
    "body": ["simQML.image_data_format.rgb888"],
  },
  "simQML.image_data_format.rgbx8888": {
    "prefix": "simQML.image_data_format.rgbx8888",
    "body": ["simQML.image_data_format.rgbx8888"],
  },
  "simROS2.action_result_code.aborted": {
    "prefix": "simROS2.action_result_code.aborted",
    "body": ["simROS2.action_result_code.aborted"],
  },
  "simROS2.action_result_code.canceled": {
    "prefix": "simROS2.action_result_code.canceled",
    "body": ["simROS2.action_result_code.canceled"],
  },
  "simROS2.action_result_code.succeeded": {
    "prefix": "simROS2.action_result_code.succeeded",
    "body": ["simROS2.action_result_code.succeeded"],
  },
  "simROS2.action_result_code.unknown": {
    "prefix": "simROS2.action_result_code.unknown",
    "body": ["simROS2.action_result_code.unknown"],
  },
  "simROS2.cancel_response.accept": {
    "prefix": "simROS2.cancel_response.accept",
    "body": ["simROS2.cancel_response.accept"],
  },
  "simROS2.cancel_response.reject": {
    "prefix": "simROS2.cancel_response.reject",
    "body": ["simROS2.cancel_response.reject"],
  },
  "simROS2.clock_type.ros": {
    "prefix": "simROS2.clock_type.ros",
    "body": ["simROS2.clock_type.ros"],
  },
  "simROS2.clock_type.steady": {
    "prefix": "simROS2.clock_type.steady",
    "body": ["simROS2.clock_type.steady"],
  },
  "simROS2.clock_type.system": {
    "prefix": "simROS2.clock_type.system",
    "body": ["simROS2.clock_type.system"],
  },
  "simROS2.goal_response.accept_and_defer": {
    "prefix": "simROS2.goal_response.accept_and_defer",
    "body": ["simROS2.goal_response.accept_and_defer"],
  },
  "simROS2.goal_response.accept_and_execute": {
    "prefix": "simROS2.goal_response.accept_and_execute",
    "body": ["simROS2.goal_response.accept_and_execute"],
  },
  "simROS2.goal_response.reject": {
    "prefix": "simROS2.goal_response.reject",
    "body": ["simROS2.goal_response.reject"],
  },
  "simROS2.qos_durability_policy.system_default": {
    "prefix": "simROS2.qos_durability_policy.system_default",
    "body": ["simROS2.qos_durability_policy.system_default"],
  },
  "simROS2.qos_durability_policy.transient_local": {
    "prefix": "simROS2.qos_durability_policy.transient_local",
    "body": ["simROS2.qos_durability_policy.transient_local"],
  },
  "simROS2.qos_durability_policy.volatile": {
    "prefix": "simROS2.qos_durability_policy.volatile",
    "body": ["simROS2.qos_durability_policy.volatile"],
  },
  "simROS2.qos_history_policy.keep_all": {
    "prefix": "simROS2.qos_history_policy.keep_all",
    "body": ["simROS2.qos_history_policy.keep_all"],
  },
  "simROS2.qos_history_policy.keep_last": {
    "prefix": "simROS2.qos_history_policy.keep_last",
    "body": ["simROS2.qos_history_policy.keep_last"],
  },
  "simROS2.qos_history_policy.system_default": {
    "prefix": "simROS2.qos_history_policy.system_default",
    "body": ["simROS2.qos_history_policy.system_default"],
  },
  "simROS2.qos_liveliness_policy.automatic": {
    "prefix": "simROS2.qos_liveliness_policy.automatic",
    "body": ["simROS2.qos_liveliness_policy.automatic"],
  },
  "simROS2.qos_liveliness_policy.manual_by_topic": {
    "prefix": "simROS2.qos_liveliness_policy.manual_by_topic",
    "body": ["simROS2.qos_liveliness_policy.manual_by_topic"],
  },
  "simROS2.qos_liveliness_policy.system_default": {
    "prefix": "simROS2.qos_liveliness_policy.system_default",
    "body": ["simROS2.qos_liveliness_policy.system_default"],
  },
  "simROS2.qos_reliability_policy.best_effort": {
    "prefix": "simROS2.qos_reliability_policy.best_effort",
    "body": ["simROS2.qos_reliability_policy.best_effort"],
  },
  "simROS2.qos_reliability_policy.reliable": {
    "prefix": "simROS2.qos_reliability_policy.reliable",
    "body": ["simROS2.qos_reliability_policy.reliable"],
  },
  "simROS2.qos_reliability_policy.system_default": {
    "prefix": "simROS2.qos_reliability_policy.system_default",
    "body": ["simROS2.qos_reliability_policy.system_default"],
  },
  "simUI.curve_scatter_shape.circle": {
    "prefix": "simUI.curve_scatter_shape.circle",
    "body": ["simUI.curve_scatter_shape.circle"],
  },
  "simUI.curve_scatter_shape.cross": {
    "prefix": "simUI.curve_scatter_shape.cross",
    "body": ["simUI.curve_scatter_shape.cross"],
  },
  "simUI.curve_scatter_shape.cross_circle": {
    "prefix": "simUI.curve_scatter_shape.cross_circle",
    "body": ["simUI.curve_scatter_shape.cross_circle"],
  },
  "simUI.curve_scatter_shape.cross_square": {
    "prefix": "simUI.curve_scatter_shape.cross_square",
    "body": ["simUI.curve_scatter_shape.cross_square"],
  },
  "simUI.curve_scatter_shape.diamond": {
    "prefix": "simUI.curve_scatter_shape.diamond",
    "body": ["simUI.curve_scatter_shape.diamond"],
  },
  "simUI.curve_scatter_shape.disc": {
    "prefix": "simUI.curve_scatter_shape.disc",
    "body": ["simUI.curve_scatter_shape.disc"],
  },
  "simUI.curve_scatter_shape.dot": {
    "prefix": "simUI.curve_scatter_shape.dot",
    "body": ["simUI.curve_scatter_shape.dot"],
  },
  "simUI.curve_scatter_shape.none": {
    "prefix": "simUI.curve_scatter_shape.none",
    "body": ["simUI.curve_scatter_shape.none"],
  },
  "simUI.curve_scatter_shape.peace": {
    "prefix": "simUI.curve_scatter_shape.peace",
    "body": ["simUI.curve_scatter_shape.peace"],
  },
  "simUI.curve_scatter_shape.plus": {
    "prefix": "simUI.curve_scatter_shape.plus",
    "body": ["simUI.curve_scatter_shape.plus"],
  },
  "simUI.curve_scatter_shape.plus_circle": {
    "prefix": "simUI.curve_scatter_shape.plus_circle",
    "body": ["simUI.curve_scatter_shape.plus_circle"],
  },
  "simUI.curve_scatter_shape.plus_square": {
    "prefix": "simUI.curve_scatter_shape.plus_square",
    "body": ["simUI.curve_scatter_shape.plus_square"],
  },
  "simUI.curve_scatter_shape.square": {
    "prefix": "simUI.curve_scatter_shape.square",
    "body": ["simUI.curve_scatter_shape.square"],
  },
  "simUI.curve_scatter_shape.star": {
    "prefix": "simUI.curve_scatter_shape.star",
    "body": ["simUI.curve_scatter_shape.star"],
  },
  "simUI.curve_scatter_shape.triangle": {
    "prefix": "simUI.curve_scatter_shape.triangle",
    "body": ["simUI.curve_scatter_shape.triangle"],
  },
  "simUI.curve_scatter_shape.triangle_inverted": {
    "prefix": "simUI.curve_scatter_shape.triangle_inverted",
    "body": ["simUI.curve_scatter_shape.triangle_inverted"],
  },
  "simUI.curve_style.impulse": {
    "prefix": "simUI.curve_style.impulse",
    "body": ["simUI.curve_style.impulse"],
  },
  "simUI.curve_style.line": {
    "prefix": "simUI.curve_style.line",
    "body": ["simUI.curve_style.line"],
  },
  "simUI.curve_style.line_and_scatter": {
    "prefix": "simUI.curve_style.line_and_scatter",
    "body": ["simUI.curve_style.line_and_scatter"],
  },
  "simUI.curve_style.scatter": {
    "prefix": "simUI.curve_style.scatter",
    "body": ["simUI.curve_style.scatter"],
  },
  "simUI.curve_style.step_center": {
    "prefix": "simUI.curve_style.step_center",
    "body": ["simUI.curve_style.step_center"],
  },
  "simUI.curve_style.step_left": {
    "prefix": "simUI.curve_style.step_left",
    "body": ["simUI.curve_style.step_left"],
  },
  "simUI.curve_style.step_right": {
    "prefix": "simUI.curve_style.step_right",
    "body": ["simUI.curve_style.step_right"],
  },
  "simUI.curve_type.time": {
    "prefix": "simUI.curve_type.time",
    "body": ["simUI.curve_type.time"],
  },
  "simUI.curve_type.xy": {
    "prefix": "simUI.curve_type.xy",
    "body": ["simUI.curve_type.xy"],
  },
  "simUI.filedialog_type.folder": {
    "prefix": "simUI.filedialog_type.folder",
    "body": ["simUI.filedialog_type.folder"],
  },
  "simUI.filedialog_type.load": {
    "prefix": "simUI.filedialog_type.load",
    "body": ["simUI.filedialog_type.load"],
  },
  "simUI.filedialog_type.load_multiple": {
    "prefix": "simUI.filedialog_type.load_multiple",
    "body": ["simUI.filedialog_type.load_multiple"],
  },
  "simUI.filedialog_type.save": {
    "prefix": "simUI.filedialog_type.save",
    "body": ["simUI.filedialog_type.save"],
  },
  "simUI.line_style.dashed": {
    "prefix": "simUI.line_style.dashed",
    "body": ["simUI.line_style.dashed"],
  },
  "simUI.line_style.dotted": {
    "prefix": "simUI.line_style.dotted",
    "body": ["simUI.line_style.dotted"],
  },
  "simUI.line_style.solid": {
    "prefix": "simUI.line_style.solid",
    "body": ["simUI.line_style.solid"],
  },
  "simUI.mouse.left_button_down": {
    "prefix": "simUI.mouse.left_button_down",
    "body": ["simUI.mouse.left_button_down"],
  },
  "simUI.mouse.left_button_up": {
    "prefix": "simUI.mouse.left_button_up",
    "body": ["simUI.mouse.left_button_up"],
  },
  "simUI.mouse.move": {
    "prefix": "simUI.mouse.move",
    "body": ["simUI.mouse.move"],
  },
  "simUI.msgbox_buttons.ok": {
    "prefix": "simUI.msgbox_buttons.ok",
    "body": ["simUI.msgbox_buttons.ok"],
  },
  "simUI.msgbox_buttons.okcancel": {
    "prefix": "simUI.msgbox_buttons.okcancel",
    "body": ["simUI.msgbox_buttons.okcancel"],
  },
  "simUI.msgbox_buttons.yesno": {
    "prefix": "simUI.msgbox_buttons.yesno",
    "body": ["simUI.msgbox_buttons.yesno"],
  },
  "simUI.msgbox_buttons.yesnocancel": {
    "prefix": "simUI.msgbox_buttons.yesnocancel",
    "body": ["simUI.msgbox_buttons.yesnocancel"],
  },
  "simUI.msgbox_result.cancel": {
    "prefix": "simUI.msgbox_result.cancel",
    "body": ["simUI.msgbox_result.cancel"],
  },
  "simUI.msgbox_result.no": {
    "prefix": "simUI.msgbox_result.no",
    "body": ["simUI.msgbox_result.no"],
  },
  "simUI.msgbox_result.ok": {
    "prefix": "simUI.msgbox_result.ok",
    "body": ["simUI.msgbox_result.ok"],
  },
  "simUI.msgbox_result.yes": {
    "prefix": "simUI.msgbox_result.yes",
    "body": ["simUI.msgbox_result.yes"],
  },
  "simUI.msgbox_type.critical": {
    "prefix": "simUI.msgbox_type.critical",
    "body": ["simUI.msgbox_type.critical"],
  },
  "simUI.msgbox_type.info": {
    "prefix": "simUI.msgbox_type.info",
    "body": ["simUI.msgbox_type.info"],
  },
  "simUI.msgbox_type.question": {
    "prefix": "simUI.msgbox_type.question",
    "body": ["simUI.msgbox_type.question"],
  },
  "simUI.msgbox_type.warning": {
    "prefix": "simUI.msgbox_type.warning",
    "body": ["simUI.msgbox_type.warning"],
  },
  "simUI.scene3d_node_type.camera": {
    "prefix": "simUI.scene3d_node_type.camera",
    "body": ["simUI.scene3d_node_type.camera"],
  },
  "simUI.scene3d_node_type.camera_controller_first_person": {
    "prefix": "simUI.scene3d_node_type.camera_controller_first_person",
    "body": ["simUI.scene3d_node_type.camera_controller_first_person"],
  },
  "simUI.scene3d_node_type.camera_controller_orbit": {
    "prefix": "simUI.scene3d_node_type.camera_controller_orbit",
    "body": ["simUI.scene3d_node_type.camera_controller_orbit"],
  },
  "simUI.scene3d_node_type.entity": {
    "prefix": "simUI.scene3d_node_type.entity",
    "body": ["simUI.scene3d_node_type.entity"],
  },
  "simUI.scene3d_node_type.light_directional": {
    "prefix": "simUI.scene3d_node_type.light_directional",
    "body": ["simUI.scene3d_node_type.light_directional"],
  },
  "simUI.scene3d_node_type.light_point": {
    "prefix": "simUI.scene3d_node_type.light_point",
    "body": ["simUI.scene3d_node_type.light_point"],
  },
  "simUI.scene3d_node_type.light_spot": {
    "prefix": "simUI.scene3d_node_type.light_spot",
    "body": ["simUI.scene3d_node_type.light_spot"],
  },
  "simUI.scene3d_node_type.material_diffuse_map": {
    "prefix": "simUI.scene3d_node_type.material_diffuse_map",
    "body": ["simUI.scene3d_node_type.material_diffuse_map"],
  },
  "simUI.scene3d_node_type.material_gooch": {
    "prefix": "simUI.scene3d_node_type.material_gooch",
    "body": ["simUI.scene3d_node_type.material_gooch"],
  },
  "simUI.scene3d_node_type.material_phong": {
    "prefix": "simUI.scene3d_node_type.material_phong",
    "body": ["simUI.scene3d_node_type.material_phong"],
  },
  "simUI.scene3d_node_type.material_texture": {
    "prefix": "simUI.scene3d_node_type.material_texture",
    "body": ["simUI.scene3d_node_type.material_texture"],
  },
  "simUI.scene3d_node_type.mesh": {
    "prefix": "simUI.scene3d_node_type.mesh",
    "body": ["simUI.scene3d_node_type.mesh"],
  },
  "simUI.scene3d_node_type.mesh_cone": {
    "prefix": "simUI.scene3d_node_type.mesh_cone",
    "body": ["simUI.scene3d_node_type.mesh_cone"],
  },
  "simUI.scene3d_node_type.mesh_cuboid": {
    "prefix": "simUI.scene3d_node_type.mesh_cuboid",
    "body": ["simUI.scene3d_node_type.mesh_cuboid"],
  },
  "simUI.scene3d_node_type.mesh_cylinder": {
    "prefix": "simUI.scene3d_node_type.mesh_cylinder",
    "body": ["simUI.scene3d_node_type.mesh_cylinder"],
  },
  "simUI.scene3d_node_type.mesh_plane": {
    "prefix": "simUI.scene3d_node_type.mesh_plane",
    "body": ["simUI.scene3d_node_type.mesh_plane"],
  },
  "simUI.scene3d_node_type.mesh_sphere": {
    "prefix": "simUI.scene3d_node_type.mesh_sphere",
    "body": ["simUI.scene3d_node_type.mesh_sphere"],
  },
  "simUI.scene3d_node_type.mesh_torus": {
    "prefix": "simUI.scene3d_node_type.mesh_torus",
    "body": ["simUI.scene3d_node_type.mesh_torus"],
  },
  "simUI.scene3d_node_type.object_picker": {
    "prefix": "simUI.scene3d_node_type.object_picker",
    "body": ["simUI.scene3d_node_type.object_picker"],
  },
  "simUI.scene3d_node_type.texture2d": {
    "prefix": "simUI.scene3d_node_type.texture2d",
    "body": ["simUI.scene3d_node_type.texture2d"],
  },
  "simUI.scene3d_node_type.texture_image": {
    "prefix": "simUI.scene3d_node_type.texture_image",
    "body": ["simUI.scene3d_node_type.texture_image"],
  },
  "simUI.scene3d_node_type.transform": {
    "prefix": "simUI.scene3d_node_type.transform",
    "body": ["simUI.scene3d_node_type.transform"],
  },
  "simURLDrop.download_mode.buffer": {
    "prefix": "simURLDrop.download_mode.buffer",
    "body": ["simURLDrop.download_mode.buffer"],
  },
  "simURLDrop.download_mode.file": {
    "prefix": "simURLDrop.download_mode.file",
    "body": ["simURLDrop.download_mode.file"],
  },
  "simWS.opcode.binary": {
    "prefix": "simWS.opcode.binary",
    "body": ["simWS.opcode.binary"],
  },
  "simWS.opcode.continuation": {
    "prefix": "simWS.opcode.continuation",
    "body": ["simWS.opcode.continuation"],
  },
  "simWS.opcode.text": {
    "prefix": "simWS.opcode.text",
    "body": ["simWS.opcode.text"],
  },
}
